/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 64 cycles
//   Latency: 260 cycles

//   Resources required:
//     68 multipliers (64 x 64 bit)
//     184 adders (64 x 64 bit)
//     24 RAMs (128 words, 128 bits per word)
//     8 RAMs (16 words, 128 bits per word)
//     14 ROMs (8 words, 64 bits per word)
//     14 ROMs (64 words, 64 bits per word)

// Generated on Sat Feb 25 08:32:01 UTC 2023

// Latency: 260 clock cycles
// Throughput: 1 transform every 64 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 64 cycles.  This means that
// 64 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 260 cycles.  This means that
// the 'next_out' will be asserted 260 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.



// Latency: 260
// Gap: 64
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [63:0] t0_0;
   wire [63:0] t0_1;
   wire [63:0] t0_2;
   wire [63:0] t0_3;
   wire [63:0] t0_4;
   wire [63:0] t0_5;
   wire [63:0] t0_6;
   wire [63:0] t0_7;
   wire [63:0] t0_8;
   wire [63:0] t0_9;
   wire [63:0] t0_10;
   wire [63:0] t0_11;
   wire [63:0] t0_12;
   wire [63:0] t0_13;
   wire [63:0] t0_14;
   wire [63:0] t0_15;
   wire next_0;
   wire [63:0] t1_0;
   wire [63:0] t1_1;
   wire [63:0] t1_2;
   wire [63:0] t1_3;
   wire [63:0] t1_4;
   wire [63:0] t1_5;
   wire [63:0] t1_6;
   wire [63:0] t1_7;
   wire [63:0] t1_8;
   wire [63:0] t1_9;
   wire [63:0] t1_10;
   wire [63:0] t1_11;
   wire [63:0] t1_12;
   wire [63:0] t1_13;
   wire [63:0] t1_14;
   wire [63:0] t1_15;
   wire next_1;
   wire [63:0] t2_0;
   wire [63:0] t2_1;
   wire [63:0] t2_2;
   wire [63:0] t2_3;
   wire [63:0] t2_4;
   wire [63:0] t2_5;
   wire [63:0] t2_6;
   wire [63:0] t2_7;
   wire [63:0] t2_8;
   wire [63:0] t2_9;
   wire [63:0] t2_10;
   wire [63:0] t2_11;
   wire [63:0] t2_12;
   wire [63:0] t2_13;
   wire [63:0] t2_14;
   wire [63:0] t2_15;
   wire next_2;
   wire [63:0] t3_0;
   wire [63:0] t3_1;
   wire [63:0] t3_2;
   wire [63:0] t3_3;
   wire [63:0] t3_4;
   wire [63:0] t3_5;
   wire [63:0] t3_6;
   wire [63:0] t3_7;
   wire [63:0] t3_8;
   wire [63:0] t3_9;
   wire [63:0] t3_10;
   wire [63:0] t3_11;
   wire [63:0] t3_12;
   wire [63:0] t3_13;
   wire [63:0] t3_14;
   wire [63:0] t3_15;
   wire next_3;
   wire [63:0] t4_0;
   wire [63:0] t4_1;
   wire [63:0] t4_2;
   wire [63:0] t4_3;
   wire [63:0] t4_4;
   wire [63:0] t4_5;
   wire [63:0] t4_6;
   wire [63:0] t4_7;
   wire [63:0] t4_8;
   wire [63:0] t4_9;
   wire [63:0] t4_10;
   wire [63:0] t4_11;
   wire [63:0] t4_12;
   wire [63:0] t4_13;
   wire [63:0] t4_14;
   wire [63:0] t4_15;
   wire next_4;
   wire [63:0] t5_0;
   wire [63:0] t5_1;
   wire [63:0] t5_2;
   wire [63:0] t5_3;
   wire [63:0] t5_4;
   wire [63:0] t5_5;
   wire [63:0] t5_6;
   wire [63:0] t5_7;
   wire [63:0] t5_8;
   wire [63:0] t5_9;
   wire [63:0] t5_10;
   wire [63:0] t5_11;
   wire [63:0] t5_12;
   wire [63:0] t5_13;
   wire [63:0] t5_14;
   wire [63:0] t5_15;
   wire next_5;
   wire [63:0] t6_0;
   wire [63:0] t6_1;
   wire [63:0] t6_2;
   wire [63:0] t6_3;
   wire [63:0] t6_4;
   wire [63:0] t6_5;
   wire [63:0] t6_6;
   wire [63:0] t6_7;
   wire [63:0] t6_8;
   wire [63:0] t6_9;
   wire [63:0] t6_10;
   wire [63:0] t6_11;
   wire [63:0] t6_12;
   wire [63:0] t6_13;
   wire [63:0] t6_14;
   wire [63:0] t6_15;
   wire next_6;
   wire [63:0] t7_0;
   wire [63:0] t7_1;
   wire [63:0] t7_2;
   wire [63:0] t7_3;
   wire [63:0] t7_4;
   wire [63:0] t7_5;
   wire [63:0] t7_6;
   wire [63:0] t7_7;
   wire [63:0] t7_8;
   wire [63:0] t7_9;
   wire [63:0] t7_10;
   wire [63:0] t7_11;
   wire [63:0] t7_12;
   wire [63:0] t7_13;
   wire [63:0] t7_14;
   wire [63:0] t7_15;
   wire next_7;
   wire [63:0] t8_0;
   wire [63:0] t8_1;
   wire [63:0] t8_2;
   wire [63:0] t8_3;
   wire [63:0] t8_4;
   wire [63:0] t8_5;
   wire [63:0] t8_6;
   wire [63:0] t8_7;
   wire [63:0] t8_8;
   wire [63:0] t8_9;
   wire [63:0] t8_10;
   wire [63:0] t8_11;
   wire [63:0] t8_12;
   wire [63:0] t8_13;
   wire [63:0] t8_14;
   wire [63:0] t8_15;
   wire next_8;
   wire [63:0] t9_0;
   wire [63:0] t9_1;
   wire [63:0] t9_2;
   wire [63:0] t9_3;
   wire [63:0] t9_4;
   wire [63:0] t9_5;
   wire [63:0] t9_6;
   wire [63:0] t9_7;
   wire [63:0] t9_8;
   wire [63:0] t9_9;
   wire [63:0] t9_10;
   wire [63:0] t9_11;
   wire [63:0] t9_12;
   wire [63:0] t9_13;
   wire [63:0] t9_14;
   wire [63:0] t9_15;
   wire next_9;
   assign t0_0 = X0;
   assign Y0 = t9_0;
   assign t0_1 = X1;
   assign Y1 = t9_1;
   assign t0_2 = X2;
   assign Y2 = t9_2;
   assign t0_3 = X3;
   assign Y3 = t9_3;
   assign t0_4 = X4;
   assign Y4 = t9_4;
   assign t0_5 = X5;
   assign Y5 = t9_5;
   assign t0_6 = X6;
   assign Y6 = t9_6;
   assign t0_7 = X7;
   assign Y7 = t9_7;
   assign t0_8 = X8;
   assign Y8 = t9_8;
   assign t0_9 = X9;
   assign Y9 = t9_9;
   assign t0_10 = X10;
   assign Y10 = t9_10;
   assign t0_11 = X11;
   assign Y11 = t9_11;
   assign t0_12 = X12;
   assign Y12 = t9_12;
   assign t0_13 = X13;
   assign Y13 = t9_13;
   assign t0_14 = X14;
   assign Y14 = t9_14;
   assign t0_15 = X15;
   assign Y15 = t9_15;
   assign next_0 = next;
   assign next_out = next_9;

// latency=63, gap=64
   rc20740 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=11, gap=64
   codeBlock20742 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=14, gap=64
   rc21331 stage2(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15));


// latency=12, gap=64
   DirSum_22136 stage3(.next(next_3), .clk(clk), .reset(reset), .next_out(next_4),
       .X0(t3_0), .Y0(t4_0),
       .X1(t3_1), .Y1(t4_1),
       .X2(t3_2), .Y2(t4_2),
       .X3(t3_3), .Y3(t4_3),
       .X4(t3_4), .Y4(t4_4),
       .X5(t3_5), .Y5(t4_5),
       .X6(t3_6), .Y6(t4_6),
       .X7(t3_7), .Y7(t4_7),
       .X8(t3_8), .Y8(t4_8),
       .X9(t3_9), .Y9(t4_9),
       .X10(t3_10), .Y10(t4_10),
       .X11(t3_11), .Y11(t4_11),
       .X12(t3_12), .Y12(t4_12),
       .X13(t3_13), .Y13(t4_13),
       .X14(t3_14), .Y14(t4_14),
       .X15(t3_15), .Y15(t4_15));


// latency=11, gap=64
   codeBlock22139 stage4(.clk(clk), .reset(reset), .next_in(next_4), .next_out(next_5),
       .X0_in(t4_0), .Y0(t5_0),
       .X1_in(t4_1), .Y1(t5_1),
       .X2_in(t4_2), .Y2(t5_2),
       .X3_in(t4_3), .Y3(t5_3),
       .X4_in(t4_4), .Y4(t5_4),
       .X5_in(t4_5), .Y5(t5_5),
       .X6_in(t4_6), .Y6(t5_6),
       .X7_in(t4_7), .Y7(t5_7),
       .X8_in(t4_8), .Y8(t5_8),
       .X9_in(t4_9), .Y9(t5_9),
       .X10_in(t4_10), .Y10(t5_10),
       .X11_in(t4_11), .Y11(t5_11),
       .X12_in(t4_12), .Y12(t5_12),
       .X13_in(t4_13), .Y13(t5_13),
       .X14_in(t4_14), .Y14(t5_14),
       .X15_in(t4_15), .Y15(t5_15));


// latency=63, gap=64
   rc22728 stage5(.clk(clk), .reset(reset), .next(next_5), .next_out(next_6),
    .X0(t5_0), .Y0(t6_0),
    .X1(t5_1), .Y1(t6_1),
    .X2(t5_2), .Y2(t6_2),
    .X3(t5_3), .Y3(t6_3),
    .X4(t5_4), .Y4(t6_4),
    .X5(t5_5), .Y5(t6_5),
    .X6(t5_6), .Y6(t6_6),
    .X7(t5_7), .Y7(t6_7),
    .X8(t5_8), .Y8(t6_8),
    .X9(t5_9), .Y9(t6_9),
    .X10(t5_10), .Y10(t6_10),
    .X11(t5_11), .Y11(t6_11),
    .X12(t5_12), .Y12(t6_12),
    .X13(t5_13), .Y13(t6_13),
    .X14(t5_14), .Y14(t6_14),
    .X15(t5_15), .Y15(t6_15));


// latency=12, gap=64
   DirSum_24428 stage6(.next(next_6), .clk(clk), .reset(reset), .next_out(next_7),
       .X0(t6_0), .Y0(t7_0),
       .X1(t6_1), .Y1(t7_1),
       .X2(t6_2), .Y2(t7_2),
       .X3(t6_3), .Y3(t7_3),
       .X4(t6_4), .Y4(t7_4),
       .X5(t6_5), .Y5(t7_5),
       .X6(t6_6), .Y6(t7_6),
       .X7(t6_7), .Y7(t7_7),
       .X8(t6_8), .Y8(t7_8),
       .X9(t6_9), .Y9(t7_9),
       .X10(t6_10), .Y10(t7_10),
       .X11(t6_11), .Y11(t7_11),
       .X12(t6_12), .Y12(t7_12),
       .X13(t6_13), .Y13(t7_13),
       .X14(t6_14), .Y14(t7_14),
       .X15(t6_15), .Y15(t7_15));


// latency=11, gap=64
   codeBlock24431 stage7(.clk(clk), .reset(reset), .next_in(next_7), .next_out(next_8),
       .X0_in(t7_0), .Y0(t8_0),
       .X1_in(t7_1), .Y1(t8_1),
       .X2_in(t7_2), .Y2(t8_2),
       .X3_in(t7_3), .Y3(t8_3),
       .X4_in(t7_4), .Y4(t8_4),
       .X5_in(t7_5), .Y5(t8_5),
       .X6_in(t7_6), .Y6(t8_6),
       .X7_in(t7_7), .Y7(t8_7),
       .X8_in(t7_8), .Y8(t8_8),
       .X9_in(t7_9), .Y9(t8_9),
       .X10_in(t7_10), .Y10(t8_10),
       .X11_in(t7_11), .Y11(t8_11),
       .X12_in(t7_12), .Y12(t8_12),
       .X13_in(t7_13), .Y13(t8_13),
       .X14_in(t7_14), .Y14(t8_14),
       .X15_in(t7_15), .Y15(t8_15));


// latency=63, gap=64
   rc25020 stage8(.clk(clk), .reset(reset), .next(next_8), .next_out(next_9),
    .X0(t8_0), .Y0(t9_0),
    .X1(t8_1), .Y1(t9_1),
    .X2(t8_2), .Y2(t9_2),
    .X3(t8_3), .Y3(t9_3),
    .X4(t8_4), .Y4(t9_4),
    .X5(t8_5), .Y5(t9_5),
    .X6(t8_6), .Y6(t9_6),
    .X7(t8_7), .Y7(t9_7),
    .X8(t8_8), .Y8(t9_8),
    .X9(t8_9), .Y9(t9_9),
    .X10(t8_10), .Y10(t9_10),
    .X11(t8_11), .Y11(t9_11),
    .X12(t8_12), .Y12(t9_12),
    .X13(t8_13), .Y13(t9_13),
    .X14(t8_14), .Y14(t9_14),
    .X15(t8_15), .Y15(t9_15));


endmodule

// Latency: 63
// Gap: 64
module rc20740(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];

   perm20738 instPerm27675(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 63
// Gap: 64
module perm20738(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inBank0[2] = addr0[8] ^ addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign inAddr0[5] = addr0[2];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inBank1[2] = addr1[8] ^ addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign inAddr1[5] = addr1[2];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inBank2[2] = addr2[8] ^ addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign inAddr2[5] = addr2[2];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inBank3[2] = addr3[8] ^ addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign inAddr3[5] = addr3[2];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[7] ^ addr4[1];
   assign inBank4[2] = addr4[8] ^ addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign inAddr4[5] = addr4[2];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[7] ^ addr5[1];
   assign inBank5[2] = addr5[8] ^ addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign inAddr5[5] = addr5[2];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[7] ^ addr6[1];
   assign inBank6[2] = addr6[8] ^ addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign inAddr6[5] = addr6[2];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[7] ^ addr7[1];
   assign inBank7[2] = addr7[8] ^ addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign inAddr7[5] = addr7[2];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];

   nextReg #(57, 6) nextReg_27680(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_27683(.X(next0), .Y(next_out), .clk(clk));


   memArray512_20738 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 56)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 60)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 56) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 56)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[4];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[3];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_20738(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(64, 6) nextReg_27688(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 11
// Gap: 1
module codeBlock20742(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(10, 1) shiftFIFO_27695(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a550;
   wire signed [63:0] a551;
   wire signed [63:0] a552;
   wire signed [63:0] a553;
   wire signed [63:0] a558;
   wire signed [63:0] a559;
   wire signed [63:0] a560;
   wire signed [63:0] a561;
   wire signed [63:0] a566;
   wire signed [63:0] a567;
   wire signed [63:0] a568;
   wire signed [63:0] a569;
   wire signed [63:0] a574;
   wire signed [63:0] a575;
   wire signed [63:0] a576;
   wire signed [63:0] a577;
   wire signed [63:0] t1102;
   wire signed [63:0] t1103;
   wire signed [63:0] t1104;
   wire signed [63:0] t1105;
   wire signed [63:0] t1106;
   wire signed [63:0] t1107;
   wire signed [63:0] t1108;
   wire signed [63:0] t1109;
   wire signed [63:0] t1112;
   wire signed [63:0] t1113;
   wire signed [63:0] t1114;
   wire signed [63:0] t1115;
   wire signed [63:0] t1116;
   wire signed [63:0] t1117;
   wire signed [63:0] t1118;
   wire signed [63:0] t1119;
   wire signed [63:0] t1122;
   wire signed [63:0] t1123;
   wire signed [63:0] t1124;
   wire signed [63:0] t1125;
   wire signed [63:0] t1126;
   wire signed [63:0] t1127;
   wire signed [63:0] t1128;
   wire signed [63:0] t1129;
   wire signed [63:0] t1138;
   wire signed [63:0] t1139;
   wire signed [63:0] t1140;
   wire signed [63:0] t1141;
   wire signed [63:0] t1130;
   wire signed [63:0] t1131;
   wire signed [63:0] t1132;
   wire signed [63:0] t1133;
   wire signed [63:0] t1134;
   wire signed [63:0] t1135;
   wire signed [63:0] t1136;
   wire signed [63:0] t1137;
   reg signed [63:0] tm136;
   reg signed [63:0] tm143;
   reg signed [63:0] tm164;
   reg signed [63:0] tm171;
   reg signed [63:0] tm137;
   reg signed [63:0] tm144;
   reg signed [63:0] tm165;
   reg signed [63:0] tm172;
   reg signed [63:0] tm192;
   reg signed [63:0] tm199;
   reg signed [63:0] tm206;
   reg signed [63:0] tm213;
   reg signed [63:0] tm220;
   reg signed [63:0] tm227;
   reg signed [63:0] tm234;
   reg signed [63:0] tm241;
   reg signed [63:0] tm138;
   reg signed [63:0] tm145;
   reg signed [63:0] tm166;
   reg signed [63:0] tm173;
   reg signed [63:0] tm193;
   reg signed [63:0] tm200;
   reg signed [63:0] tm207;
   reg signed [63:0] tm214;
   reg signed [63:0] tm221;
   reg signed [63:0] tm228;
   reg signed [63:0] tm235;
   reg signed [63:0] tm242;
   reg signed [63:0] tm139;
   reg signed [63:0] tm146;
   reg signed [63:0] tm167;
   reg signed [63:0] tm174;
   reg signed [63:0] tm194;
   reg signed [63:0] tm201;
   reg signed [63:0] tm208;
   reg signed [63:0] tm215;
   reg signed [63:0] tm222;
   reg signed [63:0] tm229;
   reg signed [63:0] tm236;
   reg signed [63:0] tm243;
   wire signed [63:0] a546;
   wire signed [63:0] a547;
   wire signed [63:0] a548;
   wire signed [63:0] a549;
   reg signed [63:0] tm140;
   reg signed [63:0] tm147;
   reg signed [63:0] tm168;
   reg signed [63:0] tm175;
   reg signed [63:0] tm195;
   reg signed [63:0] tm202;
   reg signed [63:0] tm209;
   reg signed [63:0] tm216;
   reg signed [63:0] tm223;
   reg signed [63:0] tm230;
   reg signed [63:0] tm237;
   reg signed [63:0] tm244;
   wire signed [63:0] t1110;
   wire signed [63:0] t1111;
   wire signed [63:0] t1120;
   wire signed [63:0] t1121;
   reg signed [63:0] tm141;
   reg signed [63:0] tm148;
   reg signed [63:0] tm169;
   reg signed [63:0] tm176;
   reg signed [63:0] tm196;
   reg signed [63:0] tm203;
   reg signed [63:0] tm210;
   reg signed [63:0] tm217;
   reg signed [63:0] tm224;
   reg signed [63:0] tm231;
   reg signed [63:0] tm238;
   reg signed [63:0] tm245;
   wire signed [63:0] t1142;
   wire signed [63:0] t1143;
   wire signed [63:0] t1144;
   wire signed [63:0] t1145;
   reg signed [63:0] tm142;
   reg signed [63:0] tm149;
   reg signed [63:0] tm170;
   reg signed [63:0] tm177;
   reg signed [63:0] tm197;
   reg signed [63:0] tm204;
   reg signed [63:0] tm211;
   reg signed [63:0] tm218;
   reg signed [63:0] tm225;
   reg signed [63:0] tm232;
   reg signed [63:0] tm239;
   reg signed [63:0] tm246;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] t1146;
   wire signed [63:0] t1147;
   wire signed [63:0] t1148;
   wire signed [63:0] t1149;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] t1150;
   wire signed [63:0] t1151;
   wire signed [63:0] t1152;
   wire signed [63:0] t1153;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm198;
   reg signed [63:0] tm205;
   reg signed [63:0] tm212;
   reg signed [63:0] tm219;
   reg signed [63:0] tm226;
   reg signed [63:0] tm233;
   reg signed [63:0] tm240;
   reg signed [63:0] tm247;

   wire signed [63:0] tm0;
   assign tm0 = 64'h2d413cccfe779a00;

   assign a550 = X0;
   assign a551 = X8;
   assign a552 = X1;
   assign a553 = X9;
   assign a558 = X2;
   assign a559 = X10;
   assign a560 = X3;
   assign a561 = X11;
   assign a566 = X4;
   assign a567 = X12;
   assign a568 = X5;
   assign a569 = X13;
   assign a574 = X6;
   assign a575 = X14;
   assign a576 = X7;
   assign a577 = X15;
   assign Y0 = tm198;
   assign Y1 = tm205;
   assign Y8 = tm212;
   assign Y9 = tm219;
   assign Y4 = tm226;
   assign Y5 = tm233;
   assign Y12 = tm240;
   assign Y13 = tm247;
   assign Y2 = t1146;
   assign Y3 = t1147;
   assign Y10 = t1148;
   assign Y11 = t1149;
   assign Y6 = t1150;
   assign Y7 = t1151;
   assign Y14 = t1152;
   assign Y15 = t1153;

    addfxp #(64, 1) add20754(.a(a550), .b(a551), .clk(clk), .q(t1102));    // 0
    addfxp #(64, 1) add20769(.a(a552), .b(a553), .clk(clk), .q(t1103));    // 0
    subfxp #(64, 1) sub20784(.a(a550), .b(a551), .clk(clk), .q(t1104));    // 0
    subfxp #(64, 1) sub20799(.a(a552), .b(a553), .clk(clk), .q(t1105));    // 0
    addfxp #(64, 1) add20814(.a(a558), .b(a559), .clk(clk), .q(t1106));    // 0
    addfxp #(64, 1) add20829(.a(a560), .b(a561), .clk(clk), .q(t1107));    // 0
    subfxp #(64, 1) sub20844(.a(a558), .b(a559), .clk(clk), .q(t1108));    // 0
    subfxp #(64, 1) sub20859(.a(a560), .b(a561), .clk(clk), .q(t1109));    // 0
    addfxp #(64, 1) add20902(.a(a566), .b(a567), .clk(clk), .q(t1112));    // 0
    addfxp #(64, 1) add20917(.a(a568), .b(a569), .clk(clk), .q(t1113));    // 0
    subfxp #(64, 1) sub20932(.a(a566), .b(a567), .clk(clk), .q(t1114));    // 0
    subfxp #(64, 1) sub20947(.a(a568), .b(a569), .clk(clk), .q(t1115));    // 0
    addfxp #(64, 1) add20962(.a(a574), .b(a575), .clk(clk), .q(t1116));    // 0
    addfxp #(64, 1) add20977(.a(a576), .b(a577), .clk(clk), .q(t1117));    // 0
    subfxp #(64, 1) sub20992(.a(a574), .b(a575), .clk(clk), .q(t1118));    // 0
    subfxp #(64, 1) sub21007(.a(a576), .b(a577), .clk(clk), .q(t1119));    // 0
    addfxp #(64, 1) add21042(.a(t1102), .b(t1112), .clk(clk), .q(t1122));    // 1
    addfxp #(64, 1) add21049(.a(t1103), .b(t1113), .clk(clk), .q(t1123));    // 1
    subfxp #(64, 1) sub21056(.a(t1102), .b(t1112), .clk(clk), .q(t1124));    // 1
    subfxp #(64, 1) sub21063(.a(t1103), .b(t1113), .clk(clk), .q(t1125));    // 1
    addfxp #(64, 1) add21070(.a(t1106), .b(t1116), .clk(clk), .q(t1126));    // 1
    addfxp #(64, 1) add21077(.a(t1107), .b(t1117), .clk(clk), .q(t1127));    // 1
    subfxp #(64, 1) sub21084(.a(t1106), .b(t1116), .clk(clk), .q(t1128));    // 1
    subfxp #(64, 1) sub21091(.a(t1107), .b(t1117), .clk(clk), .q(t1129));    // 1
    addfxp #(64, 1) add21186(.a(t1104), .b(t1115), .clk(clk), .q(t1138));    // 1
    subfxp #(64, 1) sub21193(.a(t1105), .b(t1114), .clk(clk), .q(t1139));    // 1
    subfxp #(64, 1) sub21200(.a(t1104), .b(t1115), .clk(clk), .q(t1140));    // 1
    addfxp #(64, 1) add21207(.a(t1105), .b(t1114), .clk(clk), .q(t1141));    // 1
    addfxp #(64, 1) add21098(.a(t1122), .b(t1126), .clk(clk), .q(t1130));    // 2
    addfxp #(64, 1) add21105(.a(t1123), .b(t1127), .clk(clk), .q(t1131));    // 2
    subfxp #(64, 1) sub21112(.a(t1122), .b(t1126), .clk(clk), .q(t1132));    // 2
    subfxp #(64, 1) sub21119(.a(t1123), .b(t1127), .clk(clk), .q(t1133));    // 2
    addfxp #(64, 1) add21142(.a(t1124), .b(t1129), .clk(clk), .q(t1134));    // 2
    subfxp #(64, 1) sub21149(.a(t1125), .b(t1128), .clk(clk), .q(t1135));    // 2
    subfxp #(64, 1) sub21156(.a(t1124), .b(t1129), .clk(clk), .q(t1136));    // 2
    addfxp #(64, 1) add21163(.a(t1125), .b(t1128), .clk(clk), .q(t1137));    // 2
    multfix #(64, 6) m20866(.a(tm0), .b(t1108), .clk(clk), .q_sc(a546), .q_unsc(), .rst(reset));
    multfix #(64, 6) m20873(.a(tm0), .b(t1109), .clk(clk), .q_sc(a547), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21014(.a(tm0), .b(t1119), .clk(clk), .q_sc(a548), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21021(.a(tm0), .b(t1118), .clk(clk), .q_sc(a549), .q_unsc(), .rst(reset));
    addfxp #(64, 1) add20880(.a(a546), .b(a547), .clk(clk), .q(t1110));    // 7
    subfxp #(64, 1) sub20887(.a(a547), .b(a546), .clk(clk), .q(t1111));    // 7
    subfxp #(64, 1) sub21028(.a(a548), .b(a549), .clk(clk), .q(t1120));    // 7
    addfxp #(64, 1) add21035(.a(a549), .b(a548), .clk(clk), .q(t1121));    // 7
    addfxp #(64, 1) add21214(.a(t1110), .b(t1120), .clk(clk), .q(t1142));    // 8
    subfxp #(64, 1) sub21221(.a(t1111), .b(t1121), .clk(clk), .q(t1143));    // 8
    subfxp #(64, 1) sub21228(.a(t1110), .b(t1120), .clk(clk), .q(t1144));    // 8
    addfxp #(64, 1) add21235(.a(t1111), .b(t1121), .clk(clk), .q(t1145));    // 8
    addfxp #(64, 1) add21242(.a(tm142), .b(t1142), .clk(clk), .q(t1146));    // 9
    addfxp #(64, 1) add21249(.a(tm149), .b(t1143), .clk(clk), .q(t1147));    // 9
    subfxp #(64, 1) sub21256(.a(tm142), .b(t1142), .clk(clk), .q(t1148));    // 9
    subfxp #(64, 1) sub21263(.a(tm149), .b(t1143), .clk(clk), .q(t1149));    // 9
    addfxp #(64, 1) add21286(.a(tm170), .b(t1145), .clk(clk), .q(t1150));    // 9
    subfxp #(64, 1) sub21293(.a(tm177), .b(t1144), .clk(clk), .q(t1151));    // 9
    subfxp #(64, 1) sub21300(.a(tm170), .b(t1145), .clk(clk), .q(t1152));    // 9
    addfxp #(64, 1) add21307(.a(tm177), .b(t1144), .clk(clk), .q(t1153));    // 9


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm136 <= t1138;
         tm143 <= t1139;
         tm164 <= t1140;
         tm171 <= t1141;
         tm137 <= tm136;
         tm144 <= tm143;
         tm165 <= tm164;
         tm172 <= tm171;
         tm192 <= t1130;
         tm199 <= t1131;
         tm206 <= t1132;
         tm213 <= t1133;
         tm220 <= t1134;
         tm227 <= t1135;
         tm234 <= t1136;
         tm241 <= t1137;
         tm138 <= tm137;
         tm145 <= tm144;
         tm166 <= tm165;
         tm173 <= tm172;
         tm193 <= tm192;
         tm200 <= tm199;
         tm207 <= tm206;
         tm214 <= tm213;
         tm221 <= tm220;
         tm228 <= tm227;
         tm235 <= tm234;
         tm242 <= tm241;
         tm139 <= tm138;
         tm146 <= tm145;
         tm167 <= tm166;
         tm174 <= tm173;
         tm194 <= tm193;
         tm201 <= tm200;
         tm208 <= tm207;
         tm215 <= tm214;
         tm222 <= tm221;
         tm229 <= tm228;
         tm236 <= tm235;
         tm243 <= tm242;
         tm140 <= tm139;
         tm147 <= tm146;
         tm168 <= tm167;
         tm175 <= tm174;
         tm195 <= tm194;
         tm202 <= tm201;
         tm209 <= tm208;
         tm216 <= tm215;
         tm223 <= tm222;
         tm230 <= tm229;
         tm237 <= tm236;
         tm244 <= tm243;
         tm141 <= tm140;
         tm148 <= tm147;
         tm169 <= tm168;
         tm176 <= tm175;
         tm196 <= tm195;
         tm203 <= tm202;
         tm210 <= tm209;
         tm217 <= tm216;
         tm224 <= tm223;
         tm231 <= tm230;
         tm238 <= tm237;
         tm245 <= tm244;
         tm142 <= tm141;
         tm149 <= tm148;
         tm170 <= tm169;
         tm177 <= tm176;
         tm197 <= tm196;
         tm204 <= tm203;
         tm211 <= tm210;
         tm218 <= tm217;
         tm225 <= tm224;
         tm232 <= tm231;
         tm239 <= tm238;
         tm246 <= tm245;
         tm198 <= tm197;
         tm205 <= tm204;
         tm212 <= tm211;
         tm219 <= tm218;
         tm226 <= tm225;
         tm233 <= tm232;
         tm240 <= tm239;
         tm247 <= tm246;
      end
   end
endmodule

// Latency: 14
// Gap: 8
module rc21331(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];

   perm21329 instPerm27696(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 14
// Gap: 8
module perm21329(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inBank0[1] = addr0[4] ^ addr0[1];
   assign inBank0[2] = addr0[5] ^ addr0[2];
   assign inAddr0[0] = addr0[0];
   assign inAddr0[1] = addr0[1];
   assign inAddr0[2] = addr0[2];
   assign outBank0[0] = addr0b[3] ^ addr0b[0];
   assign outBank0[1] = addr0b[4] ^ addr0b[1];
   assign outBank0[2] = addr0b[5] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outBank_a0[0] = addr0c[3] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[4] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[5] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inBank1[1] = addr1[4] ^ addr1[1];
   assign inBank1[2] = addr1[5] ^ addr1[2];
   assign inAddr1[0] = addr1[0];
   assign inAddr1[1] = addr1[1];
   assign inAddr1[2] = addr1[2];
   assign outBank1[0] = addr1b[3] ^ addr1b[0];
   assign outBank1[1] = addr1b[4] ^ addr1b[1];
   assign outBank1[2] = addr1b[5] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outBank_a1[0] = addr1c[3] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[4] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[5] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];

   assign inBank2[0] = addr2[3] ^ addr2[0];
   assign inBank2[1] = addr2[4] ^ addr2[1];
   assign inBank2[2] = addr2[5] ^ addr2[2];
   assign inAddr2[0] = addr2[0];
   assign inAddr2[1] = addr2[1];
   assign inAddr2[2] = addr2[2];
   assign outBank2[0] = addr2b[3] ^ addr2b[0];
   assign outBank2[1] = addr2b[4] ^ addr2b[1];
   assign outBank2[2] = addr2b[5] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outBank_a2[0] = addr2c[3] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[4] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[5] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];

   assign inBank3[0] = addr3[3] ^ addr3[0];
   assign inBank3[1] = addr3[4] ^ addr3[1];
   assign inBank3[2] = addr3[5] ^ addr3[2];
   assign inAddr3[0] = addr3[0];
   assign inAddr3[1] = addr3[1];
   assign inAddr3[2] = addr3[2];
   assign outBank3[0] = addr3b[3] ^ addr3b[0];
   assign outBank3[1] = addr3b[4] ^ addr3b[1];
   assign outBank3[2] = addr3b[5] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outBank_a3[0] = addr3c[3] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[4] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[5] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];

   assign inBank4[0] = addr4[3] ^ addr4[0];
   assign inBank4[1] = addr4[4] ^ addr4[1];
   assign inBank4[2] = addr4[5] ^ addr4[2];
   assign inAddr4[0] = addr4[0];
   assign inAddr4[1] = addr4[1];
   assign inAddr4[2] = addr4[2];
   assign outBank4[0] = addr4b[3] ^ addr4b[0];
   assign outBank4[1] = addr4b[4] ^ addr4b[1];
   assign outBank4[2] = addr4b[5] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outBank_a4[0] = addr4c[3] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[4] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[5] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];

   assign inBank5[0] = addr5[3] ^ addr5[0];
   assign inBank5[1] = addr5[4] ^ addr5[1];
   assign inBank5[2] = addr5[5] ^ addr5[2];
   assign inAddr5[0] = addr5[0];
   assign inAddr5[1] = addr5[1];
   assign inAddr5[2] = addr5[2];
   assign outBank5[0] = addr5b[3] ^ addr5b[0];
   assign outBank5[1] = addr5b[4] ^ addr5b[1];
   assign outBank5[2] = addr5b[5] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outBank_a5[0] = addr5c[3] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[4] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[5] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];

   assign inBank6[0] = addr6[3] ^ addr6[0];
   assign inBank6[1] = addr6[4] ^ addr6[1];
   assign inBank6[2] = addr6[5] ^ addr6[2];
   assign inAddr6[0] = addr6[0];
   assign inAddr6[1] = addr6[1];
   assign inAddr6[2] = addr6[2];
   assign outBank6[0] = addr6b[3] ^ addr6b[0];
   assign outBank6[1] = addr6b[4] ^ addr6b[1];
   assign outBank6[2] = addr6b[5] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outBank_a6[0] = addr6c[3] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[4] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[5] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];

   assign inBank7[0] = addr7[3] ^ addr7[0];
   assign inBank7[1] = addr7[4] ^ addr7[1];
   assign inBank7[2] = addr7[5] ^ addr7[2];
   assign inAddr7[0] = addr7[0];
   assign inAddr7[1] = addr7[1];
   assign inAddr7[2] = addr7[2];
   assign outBank7[0] = addr7b[3] ^ addr7b[0];
   assign outBank7[1] = addr7b[4] ^ addr7b[1];
   assign outBank7[2] = addr7b[5] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outBank_a7[0] = addr7c[3] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[4] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[5] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];

   shiftRegFIFO #(8, 1) shiftFIFO_27699(.X(next), .Y(next0), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_27702(.X(next0), .Y(next_out), .clk(clk));


   memArray64_21329 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

    reg resetOutCountRd2_8;
    reg resetOutCountRd2_9;
    reg resetOutCountRd2_10;
    reg resetOutCountRd2_11;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_8 <= 0;
            resetOutCountRd2_9 <= 0;
            resetOutCountRd2_10 <= 0;
            resetOutCountRd2_11 <= 0;
        end
        else begin
            resetOutCountRd2_8 <= (inCount == 7) ? 1'b1 : 1'b0;
            resetOutCountRd2_9 <= resetOutCountRd2_8;
            resetOutCountRd2_10 <= resetOutCountRd2_9;
            resetOutCountRd2_11 <= resetOutCountRd2_10;
            if (resetOutCountRd2_11 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 7)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 7) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 7) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 7)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[1];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[0];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[2];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[1];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[0];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[2];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[1];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[0];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray64_21329(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 8;
   parameter logDepth = 3;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   shiftRegFIFO #(8, 1) shiftFIFO_27705(.X(next), .Y(next0), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 12
// Gap: 8
module DirSum_22136(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [2:0] i2;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 7)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock21334 codeBlockIsnt27706(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D27_21984(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3ec52f9feeb96000;
      2: out3 <= 64'h3b20d79e651a8c00;
      3: out3 <= 64'h3536cc521d434600;
      4: out3 <= 64'h2d413cccfe779a00;
      5: out3 <= 64'h238e76735cd19000;
      6: out3 <= 64'h187de2a6aea96300;
      7: out3 <= 64'hc7c5c1e34d30580;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D40_21994(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hd76619b5edc45400;
      2: out3 <= 64'hc13ad0601146a000;
      3: out3 <= 64'hc78e9a1cfe849e00;
      4: out3 <= 64'he7821d5951569d00;
      5: out3 <= 64'h1294062ed59f0600;
      6: out3 <= 64'h3536cc521d434600;
      7: out3 <= 64'h3fb11b47a24a4c00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D39_22004(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hdc71898ca32e7000;
      2: out3 <= 64'hc4df28619ae57400;
      3: out3 <= 64'hc13ad0601146a000;
      4: out3 <= 64'hd2bec33301886600;
      5: out3 <= 64'hf383a3e1cb2cfa80;
      6: out3 <= 64'h187de2a6aea96300;
      7: out3 <= 64'h3536cc521d434600;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D38_22014(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'he1d4a2c7f909c500;
      2: out3 <= 64'hcac933ade2bcba00;
      3: out3 <= 64'hc04ee4b85db5b400;
      4: out3 <= 64'hc4df28619ae57400;
      5: out3 <= 64'hd76619b5edc45400;
      6: out3 <= 64'hf383a3e1cb2cfa80;
      7: out3 <= 64'h1294062ed59f0600;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D37_22024(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'he7821d5951569d00;
      2: out3 <= 64'hd2bec33301886600;
      3: out3 <= 64'hc4df28619ae57400;
      4: out3 <= 64'hc000000000000000;
      5: out3 <= 64'hc4df28619ae57400;
      6: out3 <= 64'hd2bec33301886600;
      7: out3 <= 64'he7821d5951569d00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D36_22034(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hed6bf9d12a60fa00;
      2: out3 <= 64'hdc71898ca32e7000;
      3: out3 <= 64'hce86ff29d5d17e00;
      4: out3 <= 64'hc4df28619ae57400;
      5: out3 <= 64'hc04ee4b85db5b400;
      6: out3 <= 64'hc13ad0601146a000;
      7: out3 <= 64'hc78e9a1cfe849e00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D35_22044(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hf383a3e1cb2cfa80;
      2: out3 <= 64'he7821d5951569d00;
      3: out3 <= 64'hdc71898ca32e7000;
      4: out3 <= 64'hd2bec33301886600;
      5: out3 <= 64'hcac933ade2bcba00;
      6: out3 <= 64'hc4df28619ae57400;
      7: out3 <= 64'hc13ad0601146a000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D34_22054(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hf9ba1650f592f500;
      2: out3 <= 64'hf383a3e1cb2cfa80;
      3: out3 <= 64'hed6bf9d12a60fa00;
      4: out3 <= 64'he7821d5951569d00;
      5: out3 <= 64'he1d4a2c7f909c500;
      6: out3 <= 64'hdc71898ca32e7000;
      7: out3 <= 64'hd76619b5edc45400;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D32_22074(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h317900d62a2e8200;
      2: out3 <= 64'hc7c5c1e34d30580;
      3: out3 <= 64'he1d4a2c7f909c500;
      4: out3 <= 64'hc4df28619ae57400;
      5: out3 <= 64'hc2c17d5273a44c00;
      6: out3 <= 64'hdc71898ca32e7000;
      7: out3 <= 64'h645e9af0a6d0b00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D31_22084(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3536cc521d434600;
      2: out3 <= 64'h187de2a6aea96300;
      3: out3 <= 64'hf383a3e1cb2cfa80;
      4: out3 <= 64'hd2bec33301886600;
      5: out3 <= 64'hc13ad0601146a000;
      6: out3 <= 64'hc4df28619ae57400;
      7: out3 <= 64'hdc71898ca32e7000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D30_22094(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h387165e3017b6200;
      2: out3 <= 64'h238e76735cd19000;
      3: out3 <= 64'h645e9af0a6d0b00;
      4: out3 <= 64'he7821d5951569d00;
      5: out3 <= 64'hce86ff29d5d17e00;
      6: out3 <= 64'hc13ad0601146a000;
      7: out3 <= 64'hc2c17d5273a44c00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D29_22104(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3b20d79e651a8c00;
      2: out3 <= 64'h2d413cccfe779a00;
      3: out3 <= 64'h187de2a6aea96300;
      4: out3 <= 64'h0;
      5: out3 <= 64'he7821d5951569d00;
      6: out3 <= 64'hd2bec33301886600;
      7: out3 <= 64'hc4df28619ae57400;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D28_22124(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3d3e82ad8c5bb400;
      2: out3 <= 64'h3536cc521d434600;
      3: out3 <= 64'h2899e64a123bac00;
      4: out3 <= 64'h187de2a6aea96300;
      5: out3 <= 64'h645e9af0a6d0b00;
      6: out3 <= 64'hf383a3e1cb2cfa80;
      7: out3 <= 64'he1d4a2c7f909c500;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D26_22134(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3fb11b47a24a4c00;
      2: out3 <= 64'h3ec52f9feeb96000;
      3: out3 <= 64'h3d3e82ad8c5bb400;
      4: out3 <= 64'h3b20d79e651a8c00;
      5: out3 <= 64'h387165e3017b6200;
      6: out3 <= 64'h3536cc521d434600;
      7: out3 <= 64'h317900d62a2e8200;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 12
// Gap: 1
module codeBlock21334(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i2_in;
   reg [2:0] i2;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(11, 1) shiftFIFO_27709(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a474;
   wire signed [63:0] a427;
   wire signed [63:0] a477;
   wire signed [63:0] a431;
   wire signed [63:0] a478;
   wire signed [63:0] a479;
   wire signed [63:0] a482;
   wire signed [63:0] a483;
   wire signed [63:0] a486;
   wire signed [63:0] a487;
   wire signed [63:0] a490;
   wire signed [63:0] a491;
   wire signed [63:0] a494;
   wire signed [63:0] a495;
   wire signed [63:0] a498;
   wire signed [63:0] a499;
   wire signed [63:0] a502;
   wire signed [63:0] a503;
   reg signed [63:0] tm248;
   reg signed [63:0] tm252;
   reg signed [63:0] tm264;
   reg signed [63:0] tm268;
   reg signed [63:0] tm280;
   reg signed [63:0] tm284;
   reg signed [63:0] tm296;
   reg signed [63:0] tm300;
   reg signed [63:0] tm312;
   reg signed [63:0] tm316;
   reg signed [63:0] tm328;
   reg signed [63:0] tm332;
   reg signed [63:0] tm344;
   reg signed [63:0] tm348;
   reg signed [63:0] tm360;
   reg signed [63:0] tm371;
   reg signed [63:0] tm249;
   reg signed [63:0] tm253;
   reg signed [63:0] tm265;
   reg signed [63:0] tm269;
   reg signed [63:0] tm281;
   reg signed [63:0] tm285;
   reg signed [63:0] tm297;
   reg signed [63:0] tm301;
   reg signed [63:0] tm313;
   reg signed [63:0] tm317;
   reg signed [63:0] tm329;
   reg signed [63:0] tm333;
   reg signed [63:0] tm345;
   reg signed [63:0] tm349;
   reg signed [63:0] tm361;
   reg signed [63:0] tm372;
   wire signed [63:0] tm6;
   wire signed [63:0] a432;
   wire signed [63:0] tm7;
   wire signed [63:0] a434;
   wire signed [63:0] tm8;
   wire signed [63:0] a438;
   wire signed [63:0] tm9;
   wire signed [63:0] a440;
   wire signed [63:0] tm10;
   wire signed [63:0] a444;
   wire signed [63:0] tm11;
   wire signed [63:0] a446;
   wire signed [63:0] tm12;
   wire signed [63:0] a450;
   wire signed [63:0] tm13;
   wire signed [63:0] a452;
   wire signed [63:0] tm14;
   wire signed [63:0] a456;
   wire signed [63:0] tm15;
   wire signed [63:0] a458;
   wire signed [63:0] tm16;
   wire signed [63:0] a462;
   wire signed [63:0] tm17;
   wire signed [63:0] a464;
   wire signed [63:0] tm18;
   wire signed [63:0] a468;
   wire signed [63:0] tm19;
   wire signed [63:0] a470;
   reg signed [63:0] tm250;
   reg signed [63:0] tm254;
   reg signed [63:0] tm266;
   reg signed [63:0] tm270;
   reg signed [63:0] tm282;
   reg signed [63:0] tm286;
   reg signed [63:0] tm298;
   reg signed [63:0] tm302;
   reg signed [63:0] tm314;
   reg signed [63:0] tm318;
   reg signed [63:0] tm330;
   reg signed [63:0] tm334;
   reg signed [63:0] tm346;
   reg signed [63:0] tm350;
   reg signed [63:0] tm362;
   reg signed [63:0] tm373;
   reg signed [63:0] tm48;
   reg signed [63:0] tm49;
   reg signed [63:0] tm52;
   reg signed [63:0] tm53;
   reg signed [63:0] tm56;
   reg signed [63:0] tm57;
   reg signed [63:0] tm60;
   reg signed [63:0] tm61;
   reg signed [63:0] tm64;
   reg signed [63:0] tm65;
   reg signed [63:0] tm68;
   reg signed [63:0] tm69;
   reg signed [63:0] tm72;
   reg signed [63:0] tm73;
   reg signed [63:0] tm251;
   reg signed [63:0] tm255;
   reg signed [63:0] tm267;
   reg signed [63:0] tm271;
   reg signed [63:0] tm283;
   reg signed [63:0] tm287;
   reg signed [63:0] tm299;
   reg signed [63:0] tm303;
   reg signed [63:0] tm315;
   reg signed [63:0] tm319;
   reg signed [63:0] tm331;
   reg signed [63:0] tm335;
   reg signed [63:0] tm347;
   reg signed [63:0] tm351;
   reg signed [63:0] tm363;
   reg signed [63:0] tm374;
   reg signed [63:0] tm364;
   reg signed [63:0] tm375;
   reg signed [63:0] tm365;
   reg signed [63:0] tm376;
   reg signed [63:0] tm366;
   reg signed [63:0] tm377;
   reg signed [63:0] tm367;
   reg signed [63:0] tm378;
   reg signed [63:0] tm368;
   reg signed [63:0] tm379;
   wire signed [63:0] a433;
   wire signed [63:0] a435;
   wire signed [63:0] a436;
   wire signed [63:0] a437;
   wire signed [63:0] a439;
   wire signed [63:0] a441;
   wire signed [63:0] a442;
   wire signed [63:0] a443;
   wire signed [63:0] a445;
   wire signed [63:0] a447;
   wire signed [63:0] a448;
   wire signed [63:0] a449;
   wire signed [63:0] a451;
   wire signed [63:0] a453;
   wire signed [63:0] a454;
   wire signed [63:0] a455;
   wire signed [63:0] a457;
   wire signed [63:0] a459;
   wire signed [63:0] a460;
   wire signed [63:0] a461;
   wire signed [63:0] a463;
   wire signed [63:0] a465;
   wire signed [63:0] a466;
   wire signed [63:0] a467;
   wire signed [63:0] a469;
   wire signed [63:0] a471;
   wire signed [63:0] a472;
   wire signed [63:0] a473;
   reg signed [63:0] tm369;
   reg signed [63:0] tm380;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm370;
   reg signed [63:0] tm381;


   assign a474 = X0;
   assign a427 = a474;
   assign a477 = X1;
   assign a431 = a477;
   assign a478 = X2;
   assign a479 = X3;
   assign a482 = X4;
   assign a483 = X5;
   assign a486 = X6;
   assign a487 = X7;
   assign a490 = X8;
   assign a491 = X9;
   assign a494 = X10;
   assign a495 = X11;
   assign a498 = X12;
   assign a499 = X13;
   assign a502 = X14;
   assign a503 = X15;
   assign a432 = tm6;
   assign a434 = tm7;
   assign a438 = tm8;
   assign a440 = tm9;
   assign a444 = tm10;
   assign a446 = tm11;
   assign a450 = tm12;
   assign a452 = tm13;
   assign a456 = tm14;
   assign a458 = tm15;
   assign a462 = tm16;
   assign a464 = tm17;
   assign a468 = tm18;
   assign a470 = tm19;
   assign Y0 = tm370;
   assign Y1 = tm381;

   D27_21984 instD27inst0_21984(.addr(i2[2:0]), .out(tm8), .clk(clk));

   D40_21994 instD40inst0_21994(.addr(i2[2:0]), .out(tm19), .clk(clk));

   D39_22004 instD39inst0_22004(.addr(i2[2:0]), .out(tm17), .clk(clk));

   D38_22014 instD38inst0_22014(.addr(i2[2:0]), .out(tm15), .clk(clk));

   D37_22024 instD37inst0_22024(.addr(i2[2:0]), .out(tm13), .clk(clk));

   D36_22034 instD36inst0_22034(.addr(i2[2:0]), .out(tm11), .clk(clk));

   D35_22044 instD35inst0_22044(.addr(i2[2:0]), .out(tm9), .clk(clk));

   D34_22054 instD34inst0_22054(.addr(i2[2:0]), .out(tm7), .clk(clk));

   D32_22074 instD32inst0_22074(.addr(i2[2:0]), .out(tm18), .clk(clk));

   D31_22084 instD31inst0_22084(.addr(i2[2:0]), .out(tm16), .clk(clk));

   D30_22094 instD30inst0_22094(.addr(i2[2:0]), .out(tm14), .clk(clk));

   D29_22104 instD29inst0_22104(.addr(i2[2:0]), .out(tm12), .clk(clk));

   D28_22124 instD28inst0_22124(.addr(i2[2:0]), .out(tm10), .clk(clk));

   D26_22134 instD26inst0_22134(.addr(i2[2:0]), .out(tm6), .clk(clk));

    multfix #(64, 6) m21433(.a(tm48), .b(tm251), .clk(clk), .q_sc(a433), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21455(.a(tm49), .b(tm255), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21473(.a(tm49), .b(tm251), .clk(clk), .q_sc(a436), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21484(.a(tm48), .b(tm255), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21513(.a(tm52), .b(tm267), .clk(clk), .q_sc(a439), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21535(.a(tm53), .b(tm271), .clk(clk), .q_sc(a441), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21553(.a(tm53), .b(tm267), .clk(clk), .q_sc(a442), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21564(.a(tm52), .b(tm271), .clk(clk), .q_sc(a443), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21593(.a(tm56), .b(tm283), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21615(.a(tm57), .b(tm287), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21633(.a(tm57), .b(tm283), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21644(.a(tm56), .b(tm287), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21673(.a(tm60), .b(tm299), .clk(clk), .q_sc(a451), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21695(.a(tm61), .b(tm303), .clk(clk), .q_sc(a453), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21713(.a(tm61), .b(tm299), .clk(clk), .q_sc(a454), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21724(.a(tm60), .b(tm303), .clk(clk), .q_sc(a455), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21753(.a(tm64), .b(tm315), .clk(clk), .q_sc(a457), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21775(.a(tm65), .b(tm319), .clk(clk), .q_sc(a459), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21793(.a(tm65), .b(tm315), .clk(clk), .q_sc(a460), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21804(.a(tm64), .b(tm319), .clk(clk), .q_sc(a461), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21833(.a(tm68), .b(tm331), .clk(clk), .q_sc(a463), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21855(.a(tm69), .b(tm335), .clk(clk), .q_sc(a465), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21873(.a(tm69), .b(tm331), .clk(clk), .q_sc(a466), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21884(.a(tm68), .b(tm335), .clk(clk), .q_sc(a467), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21913(.a(tm72), .b(tm347), .clk(clk), .q_sc(a469), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21935(.a(tm73), .b(tm351), .clk(clk), .q_sc(a471), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21953(.a(tm73), .b(tm347), .clk(clk), .q_sc(a472), .q_unsc(), .rst(reset));
    multfix #(64, 6) m21964(.a(tm72), .b(tm351), .clk(clk), .q_sc(a473), .q_unsc(), .rst(reset));
    subfxp #(64, 1) sub21462(.a(a433), .b(a435), .clk(clk), .q(Y2));    // 10
    addfxp #(64, 1) add21491(.a(a436), .b(a437), .clk(clk), .q(Y3));    // 10
    subfxp #(64, 1) sub21542(.a(a439), .b(a441), .clk(clk), .q(Y4));    // 10
    addfxp #(64, 1) add21571(.a(a442), .b(a443), .clk(clk), .q(Y5));    // 10
    subfxp #(64, 1) sub21622(.a(a445), .b(a447), .clk(clk), .q(Y6));    // 10
    addfxp #(64, 1) add21651(.a(a448), .b(a449), .clk(clk), .q(Y7));    // 10
    subfxp #(64, 1) sub21702(.a(a451), .b(a453), .clk(clk), .q(Y8));    // 10
    addfxp #(64, 1) add21731(.a(a454), .b(a455), .clk(clk), .q(Y9));    // 10
    subfxp #(64, 1) sub21782(.a(a457), .b(a459), .clk(clk), .q(Y10));    // 10
    addfxp #(64, 1) add21811(.a(a460), .b(a461), .clk(clk), .q(Y11));    // 10
    subfxp #(64, 1) sub21862(.a(a463), .b(a465), .clk(clk), .q(Y12));    // 10
    addfxp #(64, 1) add21891(.a(a466), .b(a467), .clk(clk), .q(Y13));    // 10
    subfxp #(64, 1) sub21942(.a(a469), .b(a471), .clk(clk), .q(Y14));    // 10
    addfxp #(64, 1) add21971(.a(a472), .b(a473), .clk(clk), .q(Y15));    // 10


   always @(posedge clk) begin
      if (reset == 1) begin
         tm48 <= 0;
         tm251 <= 0;
         tm49 <= 0;
         tm255 <= 0;
         tm49 <= 0;
         tm251 <= 0;
         tm48 <= 0;
         tm255 <= 0;
         tm52 <= 0;
         tm267 <= 0;
         tm53 <= 0;
         tm271 <= 0;
         tm53 <= 0;
         tm267 <= 0;
         tm52 <= 0;
         tm271 <= 0;
         tm56 <= 0;
         tm283 <= 0;
         tm57 <= 0;
         tm287 <= 0;
         tm57 <= 0;
         tm283 <= 0;
         tm56 <= 0;
         tm287 <= 0;
         tm60 <= 0;
         tm299 <= 0;
         tm61 <= 0;
         tm303 <= 0;
         tm61 <= 0;
         tm299 <= 0;
         tm60 <= 0;
         tm303 <= 0;
         tm64 <= 0;
         tm315 <= 0;
         tm65 <= 0;
         tm319 <= 0;
         tm65 <= 0;
         tm315 <= 0;
         tm64 <= 0;
         tm319 <= 0;
         tm68 <= 0;
         tm331 <= 0;
         tm69 <= 0;
         tm335 <= 0;
         tm69 <= 0;
         tm331 <= 0;
         tm68 <= 0;
         tm335 <= 0;
         tm72 <= 0;
         tm347 <= 0;
         tm73 <= 0;
         tm351 <= 0;
         tm73 <= 0;
         tm347 <= 0;
         tm72 <= 0;
         tm351 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm248 <= a478;
         tm252 <= a479;
         tm264 <= a482;
         tm268 <= a483;
         tm280 <= a486;
         tm284 <= a487;
         tm296 <= a490;
         tm300 <= a491;
         tm312 <= a494;
         tm316 <= a495;
         tm328 <= a498;
         tm332 <= a499;
         tm344 <= a502;
         tm348 <= a503;
         tm360 <= a427;
         tm371 <= a431;
         tm249 <= tm248;
         tm253 <= tm252;
         tm265 <= tm264;
         tm269 <= tm268;
         tm281 <= tm280;
         tm285 <= tm284;
         tm297 <= tm296;
         tm301 <= tm300;
         tm313 <= tm312;
         tm317 <= tm316;
         tm329 <= tm328;
         tm333 <= tm332;
         tm345 <= tm344;
         tm349 <= tm348;
         tm361 <= tm360;
         tm372 <= tm371;
         tm250 <= tm249;
         tm254 <= tm253;
         tm266 <= tm265;
         tm270 <= tm269;
         tm282 <= tm281;
         tm286 <= tm285;
         tm298 <= tm297;
         tm302 <= tm301;
         tm314 <= tm313;
         tm318 <= tm317;
         tm330 <= tm329;
         tm334 <= tm333;
         tm346 <= tm345;
         tm350 <= tm349;
         tm362 <= tm361;
         tm373 <= tm372;
         tm48 <= a432;
         tm49 <= a434;
         tm52 <= a438;
         tm53 <= a440;
         tm56 <= a444;
         tm57 <= a446;
         tm60 <= a450;
         tm61 <= a452;
         tm64 <= a456;
         tm65 <= a458;
         tm68 <= a462;
         tm69 <= a464;
         tm72 <= a468;
         tm73 <= a470;
         tm251 <= tm250;
         tm255 <= tm254;
         tm267 <= tm266;
         tm271 <= tm270;
         tm283 <= tm282;
         tm287 <= tm286;
         tm299 <= tm298;
         tm303 <= tm302;
         tm315 <= tm314;
         tm319 <= tm318;
         tm331 <= tm330;
         tm335 <= tm334;
         tm347 <= tm346;
         tm351 <= tm350;
         tm363 <= tm362;
         tm374 <= tm373;
         tm364 <= tm363;
         tm375 <= tm374;
         tm365 <= tm364;
         tm376 <= tm375;
         tm366 <= tm365;
         tm377 <= tm376;
         tm367 <= tm366;
         tm378 <= tm377;
         tm368 <= tm367;
         tm379 <= tm378;
         tm369 <= tm368;
         tm380 <= tm379;
         tm370 <= tm369;
         tm381 <= tm380;
      end
   end
endmodule

// Latency: 11
// Gap: 1
module codeBlock22139(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(10, 1) shiftFIFO_27712(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a297;
   wire signed [63:0] a298;
   wire signed [63:0] a299;
   wire signed [63:0] a300;
   wire signed [63:0] a305;
   wire signed [63:0] a306;
   wire signed [63:0] a307;
   wire signed [63:0] a308;
   wire signed [63:0] a313;
   wire signed [63:0] a314;
   wire signed [63:0] a315;
   wire signed [63:0] a316;
   wire signed [63:0] a321;
   wire signed [63:0] a322;
   wire signed [63:0] a323;
   wire signed [63:0] a324;
   wire signed [63:0] t718;
   wire signed [63:0] t719;
   wire signed [63:0] t720;
   wire signed [63:0] t721;
   wire signed [63:0] t722;
   wire signed [63:0] t723;
   wire signed [63:0] t724;
   wire signed [63:0] t725;
   wire signed [63:0] t728;
   wire signed [63:0] t729;
   wire signed [63:0] t730;
   wire signed [63:0] t731;
   wire signed [63:0] t732;
   wire signed [63:0] t733;
   wire signed [63:0] t734;
   wire signed [63:0] t735;
   wire signed [63:0] t738;
   wire signed [63:0] t739;
   wire signed [63:0] t740;
   wire signed [63:0] t741;
   wire signed [63:0] t742;
   wire signed [63:0] t743;
   wire signed [63:0] t744;
   wire signed [63:0] t745;
   wire signed [63:0] t754;
   wire signed [63:0] t755;
   wire signed [63:0] t756;
   wire signed [63:0] t757;
   wire signed [63:0] t746;
   wire signed [63:0] t747;
   wire signed [63:0] t748;
   wire signed [63:0] t749;
   wire signed [63:0] t750;
   wire signed [63:0] t751;
   wire signed [63:0] t752;
   wire signed [63:0] t753;
   reg signed [63:0] tm382;
   reg signed [63:0] tm389;
   reg signed [63:0] tm410;
   reg signed [63:0] tm417;
   reg signed [63:0] tm383;
   reg signed [63:0] tm390;
   reg signed [63:0] tm411;
   reg signed [63:0] tm418;
   reg signed [63:0] tm438;
   reg signed [63:0] tm445;
   reg signed [63:0] tm452;
   reg signed [63:0] tm459;
   reg signed [63:0] tm466;
   reg signed [63:0] tm473;
   reg signed [63:0] tm480;
   reg signed [63:0] tm487;
   reg signed [63:0] tm384;
   reg signed [63:0] tm391;
   reg signed [63:0] tm412;
   reg signed [63:0] tm419;
   reg signed [63:0] tm439;
   reg signed [63:0] tm446;
   reg signed [63:0] tm453;
   reg signed [63:0] tm460;
   reg signed [63:0] tm467;
   reg signed [63:0] tm474;
   reg signed [63:0] tm481;
   reg signed [63:0] tm488;
   reg signed [63:0] tm385;
   reg signed [63:0] tm392;
   reg signed [63:0] tm413;
   reg signed [63:0] tm420;
   reg signed [63:0] tm440;
   reg signed [63:0] tm447;
   reg signed [63:0] tm454;
   reg signed [63:0] tm461;
   reg signed [63:0] tm468;
   reg signed [63:0] tm475;
   reg signed [63:0] tm482;
   reg signed [63:0] tm489;
   wire signed [63:0] a293;
   wire signed [63:0] a294;
   wire signed [63:0] a295;
   wire signed [63:0] a296;
   reg signed [63:0] tm386;
   reg signed [63:0] tm393;
   reg signed [63:0] tm414;
   reg signed [63:0] tm421;
   reg signed [63:0] tm441;
   reg signed [63:0] tm448;
   reg signed [63:0] tm455;
   reg signed [63:0] tm462;
   reg signed [63:0] tm469;
   reg signed [63:0] tm476;
   reg signed [63:0] tm483;
   reg signed [63:0] tm490;
   wire signed [63:0] t726;
   wire signed [63:0] t727;
   wire signed [63:0] t736;
   wire signed [63:0] t737;
   reg signed [63:0] tm387;
   reg signed [63:0] tm394;
   reg signed [63:0] tm415;
   reg signed [63:0] tm422;
   reg signed [63:0] tm442;
   reg signed [63:0] tm449;
   reg signed [63:0] tm456;
   reg signed [63:0] tm463;
   reg signed [63:0] tm470;
   reg signed [63:0] tm477;
   reg signed [63:0] tm484;
   reg signed [63:0] tm491;
   wire signed [63:0] t758;
   wire signed [63:0] t759;
   wire signed [63:0] t760;
   wire signed [63:0] t761;
   reg signed [63:0] tm388;
   reg signed [63:0] tm395;
   reg signed [63:0] tm416;
   reg signed [63:0] tm423;
   reg signed [63:0] tm443;
   reg signed [63:0] tm450;
   reg signed [63:0] tm457;
   reg signed [63:0] tm464;
   reg signed [63:0] tm471;
   reg signed [63:0] tm478;
   reg signed [63:0] tm485;
   reg signed [63:0] tm492;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] t762;
   wire signed [63:0] t763;
   wire signed [63:0] t764;
   wire signed [63:0] t765;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] t766;
   wire signed [63:0] t767;
   wire signed [63:0] t768;
   wire signed [63:0] t769;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm444;
   reg signed [63:0] tm451;
   reg signed [63:0] tm458;
   reg signed [63:0] tm465;
   reg signed [63:0] tm472;
   reg signed [63:0] tm479;
   reg signed [63:0] tm486;
   reg signed [63:0] tm493;

   wire signed [63:0] tm20;
   assign tm20 = 64'h2d413cccfe779a00;

   assign a297 = X0;
   assign a298 = X8;
   assign a299 = X1;
   assign a300 = X9;
   assign a305 = X2;
   assign a306 = X10;
   assign a307 = X3;
   assign a308 = X11;
   assign a313 = X4;
   assign a314 = X12;
   assign a315 = X5;
   assign a316 = X13;
   assign a321 = X6;
   assign a322 = X14;
   assign a323 = X7;
   assign a324 = X15;
   assign Y0 = tm444;
   assign Y1 = tm451;
   assign Y8 = tm458;
   assign Y9 = tm465;
   assign Y4 = tm472;
   assign Y5 = tm479;
   assign Y12 = tm486;
   assign Y13 = tm493;
   assign Y2 = t762;
   assign Y3 = t763;
   assign Y10 = t764;
   assign Y11 = t765;
   assign Y6 = t766;
   assign Y7 = t767;
   assign Y14 = t768;
   assign Y15 = t769;

    addfxp #(64, 1) add22151(.a(a297), .b(a298), .clk(clk), .q(t718));    // 0
    addfxp #(64, 1) add22166(.a(a299), .b(a300), .clk(clk), .q(t719));    // 0
    subfxp #(64, 1) sub22181(.a(a297), .b(a298), .clk(clk), .q(t720));    // 0
    subfxp #(64, 1) sub22196(.a(a299), .b(a300), .clk(clk), .q(t721));    // 0
    addfxp #(64, 1) add22211(.a(a305), .b(a306), .clk(clk), .q(t722));    // 0
    addfxp #(64, 1) add22226(.a(a307), .b(a308), .clk(clk), .q(t723));    // 0
    subfxp #(64, 1) sub22241(.a(a305), .b(a306), .clk(clk), .q(t724));    // 0
    subfxp #(64, 1) sub22256(.a(a307), .b(a308), .clk(clk), .q(t725));    // 0
    addfxp #(64, 1) add22299(.a(a313), .b(a314), .clk(clk), .q(t728));    // 0
    addfxp #(64, 1) add22314(.a(a315), .b(a316), .clk(clk), .q(t729));    // 0
    subfxp #(64, 1) sub22329(.a(a313), .b(a314), .clk(clk), .q(t730));    // 0
    subfxp #(64, 1) sub22344(.a(a315), .b(a316), .clk(clk), .q(t731));    // 0
    addfxp #(64, 1) add22359(.a(a321), .b(a322), .clk(clk), .q(t732));    // 0
    addfxp #(64, 1) add22374(.a(a323), .b(a324), .clk(clk), .q(t733));    // 0
    subfxp #(64, 1) sub22389(.a(a321), .b(a322), .clk(clk), .q(t734));    // 0
    subfxp #(64, 1) sub22404(.a(a323), .b(a324), .clk(clk), .q(t735));    // 0
    addfxp #(64, 1) add22439(.a(t718), .b(t728), .clk(clk), .q(t738));    // 1
    addfxp #(64, 1) add22446(.a(t719), .b(t729), .clk(clk), .q(t739));    // 1
    subfxp #(64, 1) sub22453(.a(t718), .b(t728), .clk(clk), .q(t740));    // 1
    subfxp #(64, 1) sub22460(.a(t719), .b(t729), .clk(clk), .q(t741));    // 1
    addfxp #(64, 1) add22467(.a(t722), .b(t732), .clk(clk), .q(t742));    // 1
    addfxp #(64, 1) add22474(.a(t723), .b(t733), .clk(clk), .q(t743));    // 1
    subfxp #(64, 1) sub22481(.a(t722), .b(t732), .clk(clk), .q(t744));    // 1
    subfxp #(64, 1) sub22488(.a(t723), .b(t733), .clk(clk), .q(t745));    // 1
    addfxp #(64, 1) add22583(.a(t720), .b(t731), .clk(clk), .q(t754));    // 1
    subfxp #(64, 1) sub22590(.a(t721), .b(t730), .clk(clk), .q(t755));    // 1
    subfxp #(64, 1) sub22597(.a(t720), .b(t731), .clk(clk), .q(t756));    // 1
    addfxp #(64, 1) add22604(.a(t721), .b(t730), .clk(clk), .q(t757));    // 1
    addfxp #(64, 1) add22495(.a(t738), .b(t742), .clk(clk), .q(t746));    // 2
    addfxp #(64, 1) add22502(.a(t739), .b(t743), .clk(clk), .q(t747));    // 2
    subfxp #(64, 1) sub22509(.a(t738), .b(t742), .clk(clk), .q(t748));    // 2
    subfxp #(64, 1) sub22516(.a(t739), .b(t743), .clk(clk), .q(t749));    // 2
    addfxp #(64, 1) add22539(.a(t740), .b(t745), .clk(clk), .q(t750));    // 2
    subfxp #(64, 1) sub22546(.a(t741), .b(t744), .clk(clk), .q(t751));    // 2
    subfxp #(64, 1) sub22553(.a(t740), .b(t745), .clk(clk), .q(t752));    // 2
    addfxp #(64, 1) add22560(.a(t741), .b(t744), .clk(clk), .q(t753));    // 2
    multfix #(64, 6) m22263(.a(tm20), .b(t724), .clk(clk), .q_sc(a293), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22270(.a(tm20), .b(t725), .clk(clk), .q_sc(a294), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22411(.a(tm20), .b(t735), .clk(clk), .q_sc(a295), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22418(.a(tm20), .b(t734), .clk(clk), .q_sc(a296), .q_unsc(), .rst(reset));
    addfxp #(64, 1) add22277(.a(a293), .b(a294), .clk(clk), .q(t726));    // 7
    subfxp #(64, 1) sub22284(.a(a294), .b(a293), .clk(clk), .q(t727));    // 7
    subfxp #(64, 1) sub22425(.a(a295), .b(a296), .clk(clk), .q(t736));    // 7
    addfxp #(64, 1) add22432(.a(a296), .b(a295), .clk(clk), .q(t737));    // 7
    addfxp #(64, 1) add22611(.a(t726), .b(t736), .clk(clk), .q(t758));    // 8
    subfxp #(64, 1) sub22618(.a(t727), .b(t737), .clk(clk), .q(t759));    // 8
    subfxp #(64, 1) sub22625(.a(t726), .b(t736), .clk(clk), .q(t760));    // 8
    addfxp #(64, 1) add22632(.a(t727), .b(t737), .clk(clk), .q(t761));    // 8
    addfxp #(64, 1) add22639(.a(tm388), .b(t758), .clk(clk), .q(t762));    // 9
    addfxp #(64, 1) add22646(.a(tm395), .b(t759), .clk(clk), .q(t763));    // 9
    subfxp #(64, 1) sub22653(.a(tm388), .b(t758), .clk(clk), .q(t764));    // 9
    subfxp #(64, 1) sub22660(.a(tm395), .b(t759), .clk(clk), .q(t765));    // 9
    addfxp #(64, 1) add22683(.a(tm416), .b(t761), .clk(clk), .q(t766));    // 9
    subfxp #(64, 1) sub22690(.a(tm423), .b(t760), .clk(clk), .q(t767));    // 9
    subfxp #(64, 1) sub22697(.a(tm416), .b(t761), .clk(clk), .q(t768));    // 9
    addfxp #(64, 1) add22704(.a(tm423), .b(t760), .clk(clk), .q(t769));    // 9


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm382 <= t754;
         tm389 <= t755;
         tm410 <= t756;
         tm417 <= t757;
         tm383 <= tm382;
         tm390 <= tm389;
         tm411 <= tm410;
         tm418 <= tm417;
         tm438 <= t746;
         tm445 <= t747;
         tm452 <= t748;
         tm459 <= t749;
         tm466 <= t750;
         tm473 <= t751;
         tm480 <= t752;
         tm487 <= t753;
         tm384 <= tm383;
         tm391 <= tm390;
         tm412 <= tm411;
         tm419 <= tm418;
         tm439 <= tm438;
         tm446 <= tm445;
         tm453 <= tm452;
         tm460 <= tm459;
         tm467 <= tm466;
         tm474 <= tm473;
         tm481 <= tm480;
         tm488 <= tm487;
         tm385 <= tm384;
         tm392 <= tm391;
         tm413 <= tm412;
         tm420 <= tm419;
         tm440 <= tm439;
         tm447 <= tm446;
         tm454 <= tm453;
         tm461 <= tm460;
         tm468 <= tm467;
         tm475 <= tm474;
         tm482 <= tm481;
         tm489 <= tm488;
         tm386 <= tm385;
         tm393 <= tm392;
         tm414 <= tm413;
         tm421 <= tm420;
         tm441 <= tm440;
         tm448 <= tm447;
         tm455 <= tm454;
         tm462 <= tm461;
         tm469 <= tm468;
         tm476 <= tm475;
         tm483 <= tm482;
         tm490 <= tm489;
         tm387 <= tm386;
         tm394 <= tm393;
         tm415 <= tm414;
         tm422 <= tm421;
         tm442 <= tm441;
         tm449 <= tm448;
         tm456 <= tm455;
         tm463 <= tm462;
         tm470 <= tm469;
         tm477 <= tm476;
         tm484 <= tm483;
         tm491 <= tm490;
         tm388 <= tm387;
         tm395 <= tm394;
         tm416 <= tm415;
         tm423 <= tm422;
         tm443 <= tm442;
         tm450 <= tm449;
         tm457 <= tm456;
         tm464 <= tm463;
         tm471 <= tm470;
         tm478 <= tm477;
         tm485 <= tm484;
         tm492 <= tm491;
         tm444 <= tm443;
         tm451 <= tm450;
         tm458 <= tm457;
         tm465 <= tm464;
         tm472 <= tm471;
         tm479 <= tm478;
         tm486 <= tm485;
         tm493 <= tm492;
      end
   end
endmodule

// Latency: 63
// Gap: 64
module rc22728(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];

   perm22726 instPerm27713(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 63
// Gap: 64
module perm22726(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inBank0[2] = addr0[8] ^ addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign inAddr0[5] = addr0[2];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inBank1[2] = addr1[8] ^ addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign inAddr1[5] = addr1[2];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inBank2[2] = addr2[8] ^ addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign inAddr2[5] = addr2[2];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inBank3[2] = addr3[8] ^ addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign inAddr3[5] = addr3[2];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[7] ^ addr4[1];
   assign inBank4[2] = addr4[8] ^ addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign inAddr4[5] = addr4[2];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[7] ^ addr5[1];
   assign inBank5[2] = addr5[8] ^ addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign inAddr5[5] = addr5[2];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[7] ^ addr6[1];
   assign inBank6[2] = addr6[8] ^ addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign inAddr6[5] = addr6[2];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[7] ^ addr7[1];
   assign inBank7[2] = addr7[8] ^ addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign inAddr7[5] = addr7[2];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];

   nextReg #(57, 6) nextReg_27718(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_27721(.X(next0), .Y(next_out), .clk(clk));


   memArray512_22726 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 56)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 60)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 56) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 56)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[4];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[3];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_22726(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(64, 6) nextReg_27726(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

// Latency: 12
// Gap: 64
module DirSum_24428(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [5:0] i1;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 63)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock22730 codeBlockIsnt27731(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D12_23436(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3fc395f97ab61200;
      2: out3 <= 64'h3f0ec9f4e2975200;
      3: out3 <= 64'h3de2f147c8e78400;
      4: out3 <= 64'h3c424209ed0dca00;
      5: out3 <= 64'h3a2fcee87c6bb800;
      6: out3 <= 64'h37af8158df2a5400;
      7: out3 <= 64'h34c6123605f5c400;
      8: out3 <= 64'h317900d62a2e8200;
      9: out3 <= 64'h2dce88a9d5515e00;
      10: out3 <= 64'h29cd9577c7cbd200;
      11: out3 <= 64'h257db64bf5e7d400;
      12: out3 <= 64'h20e70f3245ffdc00;
      13: out3 <= 64'h1c1249d8011ee700;
      14: out3 <= 64'h17088530fa459f00;
      15: out3 <= 64'h11d3443f4cdb3e00;
      16: out3 <= 64'hc7c5c1e34d30580;
      17: out3 <= 64'h70de171e7b0b540;
      18: out3 <= 64'h192155f7a3667e0;
      19: out3 <= 64'hfc135230c0fbe400;
      20: out3 <= 64'hf69bf7c8b8cf6300;
      21: out3 <= 64'hf136580d5d5e7780;
      22: out3 <= 64'hebeca36be899ff00;
      23: out3 <= 64'he6c8d59c436c2900;
      24: out3 <= 64'he1d4a2c7f909c500;
      25: out3 <= 64'hdd19653842496e00;
      26: out3 <= 64'hd8a00badbf5e8e00;
      27: out3 <= 64'hd471088335fce800;
      28: out3 <= 64'hd09441bb2aa0a200;
      29: out3 <= 64'hcd11021670517c00;
      30: out3 <= 64'hc9edeb4fd5fc0000;
      31: out3 <= 64'hc730e996ef18ca00;
      32: out3 <= 64'hc4df28619ae57400;
      33: out3 <= 64'hc2fd08a9665de600;
      34: out3 <= 64'hc18e18a73634ee00;
      35: out3 <= 64'hc0950d1cd4517e00;
      36: out3 <= 64'hc013bc390d250400;
      37: out3 <= 64'hc00b1a2002114600;
      38: out3 <= 64'hc07b371e3cc05a00;
      39: out3 <= 64'hc1633f89e9a1a600;
      40: out3 <= 64'hc2c17d5273a44c00;
      41: out3 <= 64'hc4935b3b8ebeca00;
      42: out3 <= 64'hc6d569bd97dc1600;
      43: out3 <= 64'hc98365821551dc00;
      44: out3 <= 64'hcc983f7018f17e00;
      45: out3 <= 64'hd00e263951d11e00;
      46: out3 <= 64'hd3de9155c5a64200;
      47: out3 <= 64'hd8024d5975525800;
      48: out3 <= 64'hdc71898ca32e7000;
      49: out3 <= 64'he123e6ad10872a00;
      50: out3 <= 64'he61086bc57127600;
      51: out3 <= 64'heb2e1dbd87189600;
      52: out3 <= 64'hf07303426f507280;
      53: out3 <= 64'hf5d544a76b60d300;
      54: out3 <= 64'hfb4ab7db4c798280;
      55: out3 <= 64'hc90e8fe6f63c20;
      56: out3 <= 64'h645e9af0a6d0b00;
      57: out3 <= 64'hbb6ecef285f9880;
      58: out3 <= 64'h1111d262b1f67700;
      59: out3 <= 64'h164c7ddd3f27c600;
      60: out3 <= 64'h1b5d1009e15cc000;
      61: out3 <= 64'h2039f90e987d6e00;
      62: out3 <= 64'h24da0a99ba25be00;
      63: out3 <= 64'h2934893736127200;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D11_23568(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3fd39b5a03107400;
      2: out3 <= 64'h3f4eaafe114a2e00;
      3: out3 <= 64'h3e71e758c9cb1200;
      4: out3 <= 64'h3d3e82ad8c5bb400;
      5: out3 <= 64'h3bb6276d99847800;
      6: out3 <= 64'h39daf5e8798ee600;
      7: out3 <= 64'h37af8158df2a5400;
      8: out3 <= 64'h3536cc521d434600;
      9: out3 <= 64'h3274449324c7f600;
      10: out3 <= 64'h2f6bbe44d55f5e00;
      11: out3 <= 64'h2c216eaa3a59be00;
      12: out3 <= 64'h2899e64a123bac00;
      13: out3 <= 64'h24da0a99ba25be00;
      14: out3 <= 64'h20e70f3245ffdc00;
      15: out3 <= 64'h1cc66e9931c45e00;
      16: out3 <= 64'h187de2a6aea96300;
      17: out3 <= 64'h14135c9417660100;
      18: out3 <= 64'hf8cfcbd90af8d80;
      19: out3 <= 64'haf10a22459fe300;
      20: out3 <= 64'h645e9af0a6d0b00;
      21: out3 <= 64'h192155f7a3667e0;
      22: out3 <= 64'hfcdc1341de44fd80;
      23: out3 <= 64'hf82a6c6a55a33c80;
      24: out3 <= 64'hf383a3e1cb2cfa80;
      25: out3 <= 64'heeee2d9d4e098900;
      26: out3 <= 64'hea70658a54e02300;
      27: out3 <= 64'he61086bc57127600;
      28: out3 <= 64'he1d4a2c7f909c500;
      29: out3 <= 64'hddc29957c969ba00;
      30: out3 <= 64'hd9e010063d1f9600;
      31: out3 <= 64'hd6326a8838342e00;
      32: out3 <= 64'hd2bec33301886600;
      33: out3 <= 64'hcf89e3e800d12400;
      34: out3 <= 64'hcc983f7018f17e00;
      35: out3 <= 64'hc9edeb4fd5fc0000;
      36: out3 <= 64'hc78e9a1cfe849e00;
      37: out3 <= 64'hc57d965d646d8c00;
      38: out3 <= 64'hc3bdbdf612f23600;
      39: out3 <= 64'hc2517e312f6d3a00;
      40: out3 <= 64'hc13ad0601146a000;
      41: out3 <= 64'hc07b371e3cc05a00;
      42: out3 <= 64'hc013bc390d250400;
      43: out3 <= 64'hc004ef3ef665e600;
      44: out3 <= 64'hc04ee4b85db5b400;
      45: out3 <= 64'hc0f1360b1d68ae00;
      46: out3 <= 64'hc1eb0208db9e5200;
      47: out3 <= 64'hc33aee276e3ddc00;
      48: out3 <= 64'hc4df28619ae57400;
      49: out3 <= 64'hc6d569bd97dc1600;
      50: out3 <= 64'hc91af975cd238400;
      51: out3 <= 64'hcbacb0bf73b0fc00;
      52: out3 <= 64'hce86ff29d5d17e00;
      53: out3 <= 64'hd1a5ef902000d400;
      54: out3 <= 64'hd5052d96e626c000;
      55: out3 <= 64'hd8a00badbf5e8e00;
      56: out3 <= 64'hdc71898ca32e7000;
      57: out3 <= 64'he0745b2407654600;
      58: out3 <= 64'he4a2eff61ea34000;
      59: out3 <= 64'he8f77acf05ba6100;
      60: out3 <= 64'hed6bf9d12a60fa00;
      61: out3 <= 64'hf1fa3ecac0d84e80;
      62: out3 <= 64'hf69bf7c8b8cf6300;
      63: out3 <= 64'hfb4ab7db4c798280;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D14_23634(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hff36f1701909c3e0;
      2: out3 <= 64'hfe6deaa085c99820;
      3: out3 <= 64'hfda4f3514d754660;
      4: out3 <= 64'hfcdc1341de44fd80;
      5: out3 <= 64'hfc135230c0fbe400;
      6: out3 <= 64'hfb4ab7db4c798280;
      7: out3 <= 64'hfa824bfd5956f9c0;
      8: out3 <= 64'hf9ba1650f592f500;
      9: out3 <= 64'hf8f21e8e184f4ac0;
      10: out3 <= 64'hf82a6c6a55a33c80;
      11: out3 <= 64'hf763079892854480;
      12: out3 <= 64'hf69bf7c8b8cf6300;
      13: out3 <= 64'hf5d544a76b60d300;
      14: out3 <= 64'hf50ef5ddba601d00;
      15: out3 <= 64'hf4491310d7a06780;
      16: out3 <= 64'hf383a3e1cb2cfa80;
      17: out3 <= 64'hf2beafed27fdd780;
      18: out3 <= 64'hf1fa3ecac0d84e80;
      19: out3 <= 64'hf136580d5d5e7780;
      20: out3 <= 64'hf07303426f507280;
      21: out3 <= 64'hefb047f1c8025200;
      22: out3 <= 64'heeee2d9d4e098900;
      23: out3 <= 64'hee2cbbc0b324c200;
      24: out3 <= 64'hed6bf9d12a60fa00;
      25: out3 <= 64'hecabef3d1e7eae00;
      26: out3 <= 64'hebeca36be899ff00;
      27: out3 <= 64'heb2e1dbd87189600;
      28: out3 <= 64'hea70658a54e02300;
      29: out3 <= 64'he9b38222c0d83a00;
      30: out3 <= 64'he8f77acf05ba6100;
      31: out3 <= 64'he83c56cee2331900;
      32: out3 <= 64'he7821d5951569d00;
      33: out3 <= 64'he6c8d59c436c2900;
      34: out3 <= 64'he61086bc57127600;
      35: out3 <= 64'he55937d492c03600;
      36: out3 <= 64'he4a2eff61ea34000;
      37: out3 <= 64'he3edb627fee11900;
      38: out3 <= 64'he3399166ce3ba200;
      39: out3 <= 64'he28688a4791c7700;
      40: out3 <= 64'he1d4a2c7f909c500;
      41: out3 <= 64'he123e6ad10872a00;
      42: out3 <= 64'he0745b2407654600;
      43: out3 <= 64'hdfc606f167829200;
      44: out3 <= 64'hdf18f0cdba002400;
      45: out3 <= 64'hde6d1f6544ece200;
      46: out3 <= 64'hddc29957c969ba00;
      47: out3 <= 64'hdd19653842496e00;
      48: out3 <= 64'hdc71898ca32e7000;
      49: out3 <= 64'hdbcb0ccd98294e00;
      50: out3 <= 64'hdb25f56645da4200;
      51: out3 <= 64'hda8249b40a182c00;
      52: out3 <= 64'hd9e010063d1f9600;
      53: out3 <= 64'hd93f4e9df34c1a00;
      54: out3 <= 64'hd8a00badbf5e8e00;
      55: out3 <= 64'hd8024d5975525800;
      56: out3 <= 64'hd76619b5edc45400;
      57: out3 <= 64'hd6cb76c8c9ed8e00;
      58: out3 <= 64'hd6326a8838342e00;
      59: out3 <= 64'hd59afadab954d400;
      60: out3 <= 64'hd5052d96e626c000;
      61: out3 <= 64'hd471088335fce800;
      62: out3 <= 64'hd3de9155c5a64200;
      63: out3 <= 64'hd34dcdb41f0f8600;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D10_23700(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3fe12acb1ce35a00;
      2: out3 <= 64'h3f84c8e1c33fa600;
      3: out3 <= 64'h3eeb33474240ee00;
      4: out3 <= 64'h3e14fdf72461ae00;
      5: out3 <= 64'h3d02f75699a21a00;
      6: out3 <= 64'h3bb6276d99847800;
      7: out3 <= 64'h3a2fcee87c6bb800;
      8: out3 <= 64'h387165e3017b6200;
      9: out3 <= 64'h367c9a7deaae2400;
      10: out3 <= 64'h34534f408c4f0400;
      11: out3 <= 64'h31f79947df281a00;
      12: out3 <= 64'h2f6bbe44d55f5e00;
      13: out3 <= 64'h2cb2324be0f07a00;
      14: out3 <= 64'h29cd9577c7cbd200;
      15: out3 <= 64'h26c0b1620cb3e600;
      16: out3 <= 64'h238e76735cd19000;
      17: out3 <= 64'h2039f90e987d6e00;
      18: out3 <= 64'h1cc66e9931c45e00;
      19: out3 <= 64'h19372a63bc93d700;
      20: out3 <= 64'h158f9a75ab1fdd00;
      21: out3 <= 64'h11d3443f4cdb3e00;
      22: out3 <= 64'he05c1353f27b180;
      23: out3 <= 64'ha2abb58949f2d00;
      24: out3 <= 64'h645e9af0a6d0b00;
      25: out3 <= 64'h25b0caeb28ab9a0;
      26: out3 <= 64'hfe6deaa085c99820;
      27: out3 <= 64'hfa824bfd5956f9c0;
      28: out3 <= 64'hf69bf7c8b8cf6300;
      29: out3 <= 64'hf2beafed27fdd780;
      30: out3 <= 64'heeee2d9d4e098900;
      31: out3 <= 64'heb2e1dbd87189600;
      32: out3 <= 64'he7821d5951569d00;
      33: out3 <= 64'he3edb627fee11900;
      34: out3 <= 64'he0745b2407654600;
      35: out3 <= 64'hdd19653842496e00;
      36: out3 <= 64'hd9e010063d1f9600;
      37: out3 <= 64'hd6cb76c8c9ed8e00;
      38: out3 <= 64'hd3de9155c5a64200;
      39: out3 <= 64'hd11c3141f91b3e00;
      40: out3 <= 64'hce86ff29d5d17e00;
      41: out3 <= 64'hcc217821aca0d800;
      42: out3 <= 64'hc9edeb4fd5fc0000;
      43: out3 <= 64'hc7ee77b31b556e00;
      44: out3 <= 64'hc6250a1786711a00;
      45: out3 <= 64'hc4935b3b8ebeca00;
      46: out3 <= 64'hc33aee276e3ddc00;
      47: out3 <= 64'hc21d0eb837187c00;
      48: out3 <= 64'hc13ad0601146a000;
      49: out3 <= 64'hc0950d1cd4517e00;
      50: out3 <= 64'hc02c64a5fcef8c00;
      51: out3 <= 64'hc0013bd2c8da4a00;
      52: out3 <= 64'hc013bc390d250400;
      53: out3 <= 64'hc063d40524b30a00;
      54: out3 <= 64'hc0f1360b1d68ae00;
      55: out3 <= 64'hc1bb5a11138a4c00;
      56: out3 <= 64'hc2c17d5273a44c00;
      57: out3 <= 64'hc402a33ba483aa00;
      58: out3 <= 64'hc57d965d646d8c00;
      59: out3 <= 64'hc730e996ef18ca00;
      60: out3 <= 64'hc91af975cd238400;
      61: out3 <= 64'hcb39edc9fa0a3c00;
      62: out3 <= 64'hcd8bbb6cdb380a00;
      63: out3 <= 64'hd00e263951d11e00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D15_23766(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hfe6deaa085c99820;
      2: out3 <= 64'hfcdc1341de44fd80;
      3: out3 <= 64'hfb4ab7db4c798280;
      4: out3 <= 64'hf9ba1650f592f500;
      5: out3 <= 64'hf82a6c6a55a33c80;
      6: out3 <= 64'hf69bf7c8b8cf6300;
      7: out3 <= 64'hf50ef5ddba601d00;
      8: out3 <= 64'hf383a3e1cb2cfa80;
      9: out3 <= 64'hf1fa3ecac0d84e80;
      10: out3 <= 64'hf07303426f507280;
      11: out3 <= 64'heeee2d9d4e098900;
      12: out3 <= 64'hed6bf9d12a60fa00;
      13: out3 <= 64'hebeca36be899ff00;
      14: out3 <= 64'hea70658a54e02300;
      15: out3 <= 64'he8f77acf05ba6100;
      16: out3 <= 64'he7821d5951569d00;
      17: out3 <= 64'he61086bc57127600;
      18: out3 <= 64'he4a2eff61ea34000;
      19: out3 <= 64'he3399166ce3ba200;
      20: out3 <= 64'he1d4a2c7f909c500;
      21: out3 <= 64'he0745b2407654600;
      22: out3 <= 64'hdf18f0cdba002400;
      23: out3 <= 64'hddc29957c969ba00;
      24: out3 <= 64'hdc71898ca32e7000;
      25: out3 <= 64'hdb25f56645da4200;
      26: out3 <= 64'hd9e010063d1f9600;
      27: out3 <= 64'hd8a00badbf5e8e00;
      28: out3 <= 64'hd76619b5edc45400;
      29: out3 <= 64'hd6326a8838342e00;
      30: out3 <= 64'hd5052d96e626c000;
      31: out3 <= 64'hd3de9155c5a64200;
      32: out3 <= 64'hd2bec33301886600;
      33: out3 <= 64'hd1a5ef902000d400;
      34: out3 <= 64'hd09441bb2aa0a200;
      35: out3 <= 64'hcf89e3e800d12400;
      36: out3 <= 64'hce86ff29d5d17e00;
      37: out3 <= 64'hcd8bbb6cdb380a00;
      38: out3 <= 64'hcc983f7018f17e00;
      39: out3 <= 64'hcbacb0bf73b0fc00;
      40: out3 <= 64'hcac933ade2bcba00;
      41: out3 <= 64'hc9edeb4fd5fc0000;
      42: out3 <= 64'hc91af975cd238400;
      43: out3 <= 64'hc8507ea720d5ac00;
      44: out3 <= 64'hc78e9a1cfe849e00;
      45: out3 <= 64'hc6d569bd97dc1600;
      46: out3 <= 64'hc6250a1786711a00;
      47: out3 <= 64'hc57d965d646d8c00;
      48: out3 <= 64'hc4df28619ae57400;
      49: out3 <= 64'hc449d892667b8800;
      50: out3 <= 64'hc3bdbdf612f23600;
      51: out3 <= 64'hc33aee276e3ddc00;
      52: out3 <= 64'hc2c17d5273a44c00;
      53: out3 <= 64'hc2517e312f6d3a00;
      54: out3 <= 64'hc1eb0208db9e5200;
      55: out3 <= 64'hc18e18a73634ee00;
      56: out3 <= 64'hc13ad0601146a000;
      57: out3 <= 64'hc0f1360b1d68ae00;
      58: out3 <= 64'hc0b15501eeb5d200;
      59: out3 <= 64'hc07b371e3cc05a00;
      60: out3 <= 64'hc04ee4b85db5b400;
      61: out3 <= 64'hc02c64a5fcef8c00;
      62: out3 <= 64'hc013bc390d250400;
      63: out3 <= 64'hc004ef3ef665e600;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D9_23832(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3fec43c6f2dafc00;
      2: out3 <= 64'h3fb11b47a24a4c00;
      3: out3 <= 64'h3f4eaafe114a2e00;
      4: out3 <= 64'h3ec52f9feeb96000;
      5: out3 <= 64'h3e14fdf72461ae00;
      6: out3 <= 64'h3d3e82ad8c5bb400;
      7: out3 <= 64'h3c424209ed0dca00;
      8: out3 <= 64'h3b20d79e651a8c00;
      9: out3 <= 64'h39daf5e8798ee600;
      10: out3 <= 64'h387165e3017b6200;
      11: out3 <= 64'h36e5068a32dc7c00;
      12: out3 <= 64'h3536cc521d434600;
      13: out3 <= 64'h3367c08fe70e8200;
      14: out3 <= 64'h317900d62a2e8200;
      15: out3 <= 64'h2f6bbe44d55f5e00;
      16: out3 <= 64'h2d413cccfe779a00;
      17: out3 <= 64'h2afad26919d94000;
      18: out3 <= 64'h2899e64a123bac00;
      19: out3 <= 64'h261feff9c2e06a00;
      20: out3 <= 64'h238e76735cd19000;
      21: out3 <= 64'h20e70f3245ffdc00;
      22: out3 <= 64'h1e2b5d3806f63b00;
      23: out3 <= 64'h1b5d1009e15cc000;
      24: out3 <= 64'h187de2a6aea96300;
      25: out3 <= 64'h158f9a75ab1fdd00;
      26: out3 <= 64'h1294062ed59f0600;
      27: out3 <= 64'hf8cfcbd90af8d80;
      28: out3 <= 64'hc7c5c1e34d30580;
      29: out3 <= 64'h964083747309d00;
      30: out3 <= 64'h645e9af0a6d0b00;
      31: out3 <= 64'h323ecbe21bb0280;
      32: out3 <= 64'h0;
      33: out3 <= 64'hfcdc1341de44fd80;
      34: out3 <= 64'hf9ba1650f592f500;
      35: out3 <= 64'hf69bf7c8b8cf6300;
      36: out3 <= 64'hf383a3e1cb2cfa80;
      37: out3 <= 64'hf07303426f507280;
      38: out3 <= 64'hed6bf9d12a60fa00;
      39: out3 <= 64'hea70658a54e02300;
      40: out3 <= 64'he7821d5951569d00;
      41: out3 <= 64'he4a2eff61ea34000;
      42: out3 <= 64'he1d4a2c7f909c500;
      43: out3 <= 64'hdf18f0cdba002400;
      44: out3 <= 64'hdc71898ca32e7000;
      45: out3 <= 64'hd9e010063d1f9600;
      46: out3 <= 64'hd76619b5edc45400;
      47: out3 <= 64'hd5052d96e626c000;
      48: out3 <= 64'hd2bec33301886600;
      49: out3 <= 64'hd09441bb2aa0a200;
      50: out3 <= 64'hce86ff29d5d17e00;
      51: out3 <= 64'hcc983f7018f17e00;
      52: out3 <= 64'hcac933ade2bcba00;
      53: out3 <= 64'hc91af975cd238400;
      54: out3 <= 64'hc78e9a1cfe849e00;
      55: out3 <= 64'hc6250a1786711a00;
      56: out3 <= 64'hc4df28619ae57400;
      57: out3 <= 64'hc3bdbdf612f23600;
      58: out3 <= 64'hc2c17d5273a44c00;
      59: out3 <= 64'hc1eb0208db9e5200;
      60: out3 <= 64'hc13ad0601146a000;
      61: out3 <= 64'hc0b15501eeb5d200;
      62: out3 <= 64'hc04ee4b85db5b400;
      63: out3 <= 64'hc013bc390d250400;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D16_23898(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hfda4f3514d754660;
      2: out3 <= 64'hfb4ab7db4c798280;
      3: out3 <= 64'hf8f21e8e184f4ac0;
      4: out3 <= 64'hf69bf7c8b8cf6300;
      5: out3 <= 64'hf4491310d7a06780;
      6: out3 <= 64'hf1fa3ecac0d84e80;
      7: out3 <= 64'hefb047f1c8025200;
      8: out3 <= 64'hed6bf9d12a60fa00;
      9: out3 <= 64'heb2e1dbd87189600;
      10: out3 <= 64'he8f77acf05ba6100;
      11: out3 <= 64'he6c8d59c436c2900;
      12: out3 <= 64'he4a2eff61ea34000;
      13: out3 <= 64'he28688a4791c7700;
      14: out3 <= 64'he0745b2407654600;
      15: out3 <= 64'hde6d1f6544ece200;
      16: out3 <= 64'hdc71898ca32e7000;
      17: out3 <= 64'hda8249b40a182c00;
      18: out3 <= 64'hd8a00badbf5e8e00;
      19: out3 <= 64'hd6cb76c8c9ed8e00;
      20: out3 <= 64'hd5052d96e626c000;
      21: out3 <= 64'hd34dcdb41f0f8600;
      22: out3 <= 64'hd1a5ef902000d400;
      23: out3 <= 64'hd00e263951d11e00;
      24: out3 <= 64'hce86ff29d5d17e00;
      25: out3 <= 64'hcd11021670517c00;
      26: out3 <= 64'hcbacb0bf73b0fc00;
      27: out3 <= 64'hca5a86c3bc55de00;
      28: out3 <= 64'hc91af975cd238400;
      29: out3 <= 64'hc7ee77b31b556e00;
      30: out3 <= 64'hc6d569bd97dc1600;
      31: out3 <= 64'hc5d0311783944800;
      32: out3 <= 64'hc4df28619ae57400;
      33: out3 <= 64'hc402a33ba483aa00;
      34: out3 <= 64'hc33aee276e3ddc00;
      35: out3 <= 64'hc2884e6e41e91800;
      36: out3 <= 64'hc1eb0208db9e5200;
      37: out3 <= 64'hc1633f89e9a1a600;
      38: out3 <= 64'hc0f1360b1d68ae00;
      39: out3 <= 64'hc0950d1cd4517e00;
      40: out3 <= 64'hc04ee4b85db5b400;
      41: out3 <= 64'hc01ed534e31ca600;
      42: out3 <= 64'hc004ef3ef665e600;
      43: out3 <= 64'hc0013bd2c8da4a00;
      44: out3 <= 64'hc013bc390d250400;
      45: out3 <= 64'hc03c6a068549ee00;
      46: out3 <= 64'hc07b371e3cc05a00;
      47: out3 <= 64'hc0d00db66decca00;
      48: out3 <= 64'hc13ad0601146a000;
      49: out3 <= 64'hc1bb5a11138a4c00;
      50: out3 <= 64'hc2517e312f6d3a00;
      51: out3 <= 64'hc2fd08a9665de600;
      52: out3 <= 64'hc3bdbdf612f23600;
      53: out3 <= 64'hc4935b3b8ebeca00;
      54: out3 <= 64'hc57d965d646d8c00;
      55: out3 <= 64'hc67c1e1806074800;
      56: out3 <= 64'hc78e9a1cfe849e00;
      57: out3 <= 64'hc8b4ab3194de5c00;
      58: out3 <= 64'hc9edeb4fd5fc0000;
      59: out3 <= 64'hcb39edc9fa0a3c00;
      60: out3 <= 64'hcc983f7018f17e00;
      61: out3 <= 64'hce0866b820d7e600;
      62: out3 <= 64'hcf89e3e800d12400;
      63: out3 <= 64'hd11c3141f91b3e00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D8_23964(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3ff4e5dffdeeba00;
      2: out3 <= 64'h3fd39b5a03107400;
      3: out3 <= 64'h3f9c2bfadb4cf600;
      4: out3 <= 64'h3f4eaafe114a2e00;
      5: out3 <= 64'h3eeb33474240ee00;
      6: out3 <= 64'h3e71e758c9cb1200;
      7: out3 <= 64'h3de2f147c8e78400;
      8: out3 <= 64'h3d3e82ad8c5bb400;
      9: out3 <= 64'h3c84d4965782fc00;
      10: out3 <= 64'h3bb6276d99847800;
      11: out3 <= 64'h3ad2c2e793cd1600;
      12: out3 <= 64'h39daf5e8798ee600;
      13: out3 <= 64'h38cf166910e73600;
      14: out3 <= 64'h37af8158df2a5400;
      15: out3 <= 64'h367c9a7deaae2400;
      16: out3 <= 64'h3536cc521d434600;
      17: out3 <= 64'h33de87de535f2800;
      18: out3 <= 64'h3274449324c7f600;
      19: out3 <= 64'h30f8801f745d7e00;
      20: out3 <= 64'h2f6bbe44d55f5e00;
      21: out3 <= 64'h2dce88a9d5515e00;
      22: out3 <= 64'h2c216eaa3a59be00;
      23: out3 <= 64'h2a65052546ab2c00;
      24: out3 <= 64'h2899e64a123bac00;
      25: out3 <= 64'h26c0b1620cb3e600;
      26: out3 <= 64'h24da0a99ba25be00;
      27: out3 <= 64'h22e69ac7bdb69200;
      28: out3 <= 64'h20e70f3245ffdc00;
      29: out3 <= 64'h1edc1952ef78d600;
      30: out3 <= 64'h1cc66e9931c45e00;
      31: out3 <= 64'h1aa6c82b6d3fca00;
      32: out3 <= 64'h187de2a6aea96300;
      33: out3 <= 64'h164c7ddd3f27c600;
      34: out3 <= 64'h14135c9417660100;
      35: out3 <= 64'h11d3443f4cdb3e00;
      36: out3 <= 64'hf8cfcbd90af8d80;
      37: out3 <= 64'hd415012d8022880;
      38: out3 <= 64'haf10a22459fe300;
      39: out3 <= 64'h89cf8676d7abb80;
      40: out3 <= 64'h645e9af0a6d0b00;
      41: out3 <= 64'h3ecadcf3f041c00;
      42: out3 <= 64'h192155f7a3667e0;
      43: out3 <= 64'hff36f1701909c3e0;
      44: out3 <= 64'hfcdc1341de44fd80;
      45: out3 <= 64'hfa824bfd5956f9c0;
      46: out3 <= 64'hf82a6c6a55a33c80;
      47: out3 <= 64'hf5d544a76b60d300;
      48: out3 <= 64'hf383a3e1cb2cfa80;
      49: out3 <= 64'hf136580d5d5e7780;
      50: out3 <= 64'heeee2d9d4e098900;
      51: out3 <= 64'hecabef3d1e7eae00;
      52: out3 <= 64'hea70658a54e02300;
      53: out3 <= 64'he83c56cee2331900;
      54: out3 <= 64'he61086bc57127600;
      55: out3 <= 64'he3edb627fee11900;
      56: out3 <= 64'he1d4a2c7f909c500;
      57: out3 <= 64'hdfc606f167829200;
      58: out3 <= 64'hddc29957c969ba00;
      59: out3 <= 64'hdbcb0ccd98294e00;
      60: out3 <= 64'hd9e010063d1f9600;
      61: out3 <= 64'hd8024d5975525800;
      62: out3 <= 64'hd6326a8838342e00;
      63: out3 <= 64'hd471088335fce800;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D17_24030(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hfcdc1341de44fd80;
      2: out3 <= 64'hf9ba1650f592f500;
      3: out3 <= 64'hf69bf7c8b8cf6300;
      4: out3 <= 64'hf383a3e1cb2cfa80;
      5: out3 <= 64'hf07303426f507280;
      6: out3 <= 64'hed6bf9d12a60fa00;
      7: out3 <= 64'hea70658a54e02300;
      8: out3 <= 64'he7821d5951569d00;
      9: out3 <= 64'he4a2eff61ea34000;
      10: out3 <= 64'he1d4a2c7f909c500;
      11: out3 <= 64'hdf18f0cdba002400;
      12: out3 <= 64'hdc71898ca32e7000;
      13: out3 <= 64'hd9e010063d1f9600;
      14: out3 <= 64'hd76619b5edc45400;
      15: out3 <= 64'hd5052d96e626c000;
      16: out3 <= 64'hd2bec33301886600;
      17: out3 <= 64'hd09441bb2aa0a200;
      18: out3 <= 64'hce86ff29d5d17e00;
      19: out3 <= 64'hcc983f7018f17e00;
      20: out3 <= 64'hcac933ade2bcba00;
      21: out3 <= 64'hc91af975cd238400;
      22: out3 <= 64'hc78e9a1cfe849e00;
      23: out3 <= 64'hc6250a1786711a00;
      24: out3 <= 64'hc4df28619ae57400;
      25: out3 <= 64'hc3bdbdf612f23600;
      26: out3 <= 64'hc2c17d5273a44c00;
      27: out3 <= 64'hc1eb0208db9e5200;
      28: out3 <= 64'hc13ad0601146a000;
      29: out3 <= 64'hc0b15501eeb5d200;
      30: out3 <= 64'hc04ee4b85db5b400;
      31: out3 <= 64'hc013bc390d250400;
      32: out3 <= 64'hc000000000000000;
      33: out3 <= 64'hc013bc390d250400;
      34: out3 <= 64'hc04ee4b85db5b400;
      35: out3 <= 64'hc0b15501eeb5d200;
      36: out3 <= 64'hc13ad0601146a000;
      37: out3 <= 64'hc1eb0208db9e5200;
      38: out3 <= 64'hc2c17d5273a44c00;
      39: out3 <= 64'hc3bdbdf612f23600;
      40: out3 <= 64'hc4df28619ae57400;
      41: out3 <= 64'hc6250a1786711a00;
      42: out3 <= 64'hc78e9a1cfe849e00;
      43: out3 <= 64'hc91af975cd238400;
      44: out3 <= 64'hcac933ade2bcba00;
      45: out3 <= 64'hcc983f7018f17e00;
      46: out3 <= 64'hce86ff29d5d17e00;
      47: out3 <= 64'hd09441bb2aa0a200;
      48: out3 <= 64'hd2bec33301886600;
      49: out3 <= 64'hd5052d96e626c000;
      50: out3 <= 64'hd76619b5edc45400;
      51: out3 <= 64'hd9e010063d1f9600;
      52: out3 <= 64'hdc71898ca32e7000;
      53: out3 <= 64'hdf18f0cdba002400;
      54: out3 <= 64'he1d4a2c7f909c500;
      55: out3 <= 64'he4a2eff61ea34000;
      56: out3 <= 64'he7821d5951569d00;
      57: out3 <= 64'hea70658a54e02300;
      58: out3 <= 64'hed6bf9d12a60fa00;
      59: out3 <= 64'hf07303426f507280;
      60: out3 <= 64'hf383a3e1cb2cfa80;
      61: out3 <= 64'hf69bf7c8b8cf6300;
      62: out3 <= 64'hf9ba1650f592f500;
      63: out3 <= 64'hfcdc1341de44fd80;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D7_24096(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3ffb10c1099a1a00;
      2: out3 <= 64'h3fec43c6f2dafc00;
      3: out3 <= 64'h3fd39b5a03107400;
      4: out3 <= 64'h3fb11b47a24a4c00;
      5: out3 <= 64'h3f84c8e1c33fa600;
      6: out3 <= 64'h3f4eaafe114a2e00;
      7: out3 <= 64'h3f0ec9f4e2975200;
      8: out3 <= 64'h3ec52f9feeb96000;
      9: out3 <= 64'h3e71e758c9cb1200;
      10: out3 <= 64'h3e14fdf72461ae00;
      11: out3 <= 64'h3dae81ced092c600;
      12: out3 <= 64'h3d3e82ad8c5bb400;
      13: out3 <= 64'h3cc511d891c22400;
      14: out3 <= 64'h3c424209ed0dca00;
      15: out3 <= 64'h3bb6276d99847800;
      16: out3 <= 64'h3b20d79e651a8c00;
      17: out3 <= 64'h3a8269a29b927400;
      18: out3 <= 64'h39daf5e8798ee600;
      19: out3 <= 64'h392a96426823ea00;
      20: out3 <= 64'h387165e3017b6200;
      21: out3 <= 64'h37af8158df2a5400;
      22: out3 <= 64'h36e5068a32dc7c00;
      23: out3 <= 64'h361214b02a040000;
      24: out3 <= 64'h3536cc521d434600;
      25: out3 <= 64'h34534f408c4f0400;
      26: out3 <= 64'h3367c08fe70e8200;
      27: out3 <= 64'h3274449324c7f600;
      28: out3 <= 64'h317900d62a2e8200;
      29: out3 <= 64'h30761c17ff2edc00;
      30: out3 <= 64'h2f6bbe44d55f5e00;
      31: out3 <= 64'h2e5a106fdfff2c00;
      32: out3 <= 64'h2d413cccfe779a00;
      33: out3 <= 64'h2c216eaa3a59be00;
      34: out3 <= 64'h2afad26919d94000;
      35: out3 <= 64'h29cd9577c7cbd200;
      36: out3 <= 64'h2899e64a123bac00;
      37: out3 <= 64'h275ff45240a17200;
      38: out3 <= 64'h261feff9c2e06a00;
      39: out3 <= 64'h24da0a99ba25be00;
      40: out3 <= 64'h238e76735cd19000;
      41: out3 <= 64'h223d66a836964600;
      42: out3 <= 64'h20e70f3245ffdc00;
      43: out3 <= 64'h1f8ba4dbf89aba00;
      44: out3 <= 64'h1e2b5d3806f63b00;
      45: out3 <= 64'h1cc66e9931c45e00;
      46: out3 <= 64'h1b5d1009e15cc000;
      47: out3 <= 64'h19ef7943a8ed8a00;
      48: out3 <= 64'h187de2a6aea96300;
      49: out3 <= 64'h17088530fa459f00;
      50: out3 <= 64'h158f9a75ab1fdd00;
      51: out3 <= 64'h14135c9417660100;
      52: out3 <= 64'h1294062ed59f0600;
      53: out3 <= 64'h1111d262b1f67700;
      54: out3 <= 64'hf8cfcbd90af8d80;
      55: out3 <= 64'he05c1353f27b180;
      56: out3 <= 64'hc7c5c1e34d30580;
      57: out3 <= 64'haf10a22459fe300;
      58: out3 <= 64'h964083747309d00;
      59: out3 <= 64'h7d59395aa5cc380;
      60: out3 <= 64'h645e9af0a6d0b00;
      61: out3 <= 64'h4b54824b3867d80;
      62: out3 <= 64'h323ecbe21bb0280;
      63: out3 <= 64'h192155f7a3667e0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D18_24162(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hfc135230c0fbe400;
      2: out3 <= 64'hf82a6c6a55a33c80;
      3: out3 <= 64'hf4491310d7a06780;
      4: out3 <= 64'hf07303426f507280;
      5: out3 <= 64'hecabef3d1e7eae00;
      6: out3 <= 64'he8f77acf05ba6100;
      7: out3 <= 64'he55937d492c03600;
      8: out3 <= 64'he1d4a2c7f909c500;
      9: out3 <= 64'hde6d1f6544ece200;
      10: out3 <= 64'hdb25f56645da4200;
      11: out3 <= 64'hd8024d5975525800;
      12: out3 <= 64'hd5052d96e626c000;
      13: out3 <= 64'hd23177562aaea200;
      14: out3 <= 64'hcf89e3e800d12400;
      15: out3 <= 64'hcd11021670517c00;
      16: out3 <= 64'hcac933ade2bcba00;
      17: out3 <= 64'hc8b4ab3194de5c00;
      18: out3 <= 64'hc6d569bd97dc1600;
      19: out3 <= 64'hc52d3d186c32ea00;
      20: out3 <= 64'hc3bdbdf612f23600;
      21: out3 <= 64'hc2884e6e41e91800;
      22: out3 <= 64'hc18e18a73634ee00;
      23: out3 <= 64'hc0d00db66decca00;
      24: out3 <= 64'hc04ee4b85db5b400;
      25: out3 <= 64'hc00b1a2002114600;
      26: out3 <= 64'hc004ef3ef665e600;
      27: out3 <= 64'hc03c6a068549ee00;
      28: out3 <= 64'hc0b15501eeb5d200;
      29: out3 <= 64'hc1633f89e9a1a600;
      30: out3 <= 64'hc2517e312f6d3a00;
      31: out3 <= 64'hc37b2b69a87d0400;
      32: out3 <= 64'hc4df28619ae57400;
      33: out3 <= 64'hc67c1e1806074800;
      34: out3 <= 64'hc8507ea720d5ac00;
      35: out3 <= 64'hca5a86c3bc55de00;
      36: out3 <= 64'hcc983f7018f17e00;
      37: out3 <= 64'hcf077fe08ba28200;
      38: out3 <= 64'hd1a5ef902000d400;
      39: out3 <= 64'hd471088335fce800;
      40: out3 <= 64'hd76619b5edc45400;
      41: out3 <= 64'hda8249b40a182c00;
      42: out3 <= 64'hddc29957c969ba00;
      43: out3 <= 64'he123e6ad10872a00;
      44: out3 <= 64'he4a2eff61ea34000;
      45: out3 <= 64'he83c56cee2331900;
      46: out3 <= 64'hebeca36be899ff00;
      47: out3 <= 64'hefb047f1c8025200;
      48: out3 <= 64'hf383a3e1cb2cfa80;
      49: out3 <= 64'hf763079892854480;
      50: out3 <= 64'hfb4ab7db4c798280;
      51: out3 <= 64'hff36f1701909c3e0;
      52: out3 <= 64'h323ecbe21bb0280;
      53: out3 <= 64'h70de171e7b0b540;
      54: out3 <= 64'haf10a22459fe300;
      55: out3 <= 64'hec9a7f2a2a18880;
      56: out3 <= 64'h1294062ed59f0600;
      57: out3 <= 64'h164c7ddd3f27c600;
      58: out3 <= 64'h19ef7943a8ed8a00;
      59: out3 <= 64'h1d79775b86e38900;
      60: out3 <= 64'h20e70f3245ffdc00;
      61: out3 <= 64'h2434f33267d6b200;
      62: out3 <= 64'h275ff45240a17200;
      63: out3 <= 64'h2a65052546ab2c00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D6_24228(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3ffec42d3725b600;
      2: out3 <= 64'h3ffb10c1099a1a00;
      3: out3 <= 64'h3ff4e5dffdeeba00;
      4: out3 <= 64'h3fec43c6f2dafc00;
      5: out3 <= 64'h3fe12acb1ce35a00;
      6: out3 <= 64'h3fd39b5a03107400;
      7: out3 <= 64'h3fc395f97ab61200;
      8: out3 <= 64'h3fb11b47a24a4c00;
      9: out3 <= 64'h3f9c2bfadb4cf600;
      10: out3 <= 64'h3f84c8e1c33fa600;
      11: out3 <= 64'h3f6af2e32bae8200;
      12: out3 <= 64'h3f4eaafe114a2e00;
      13: out3 <= 64'h3f2ff24992133600;
      14: out3 <= 64'h3f0ec9f4e2975200;
      15: out3 <= 64'h3eeb33474240ee00;
      16: out3 <= 64'h3ec52f9feeb96000;
      17: out3 <= 64'h3e9cc076165e5a00;
      18: out3 <= 64'h3e71e758c9cb1200;
      19: out3 <= 64'h3e44a5eeec75b400;
      20: out3 <= 64'h3e14fdf72461ae00;
      21: out3 <= 64'h3de2f147c8e78400;
      22: out3 <= 64'h3dae81ced092c600;
      23: out3 <= 64'h3d77b191be16e800;
      24: out3 <= 64'h3d3e82ad8c5bb400;
      25: out3 <= 64'h3d02f75699a21a00;
      26: out3 <= 64'h3cc511d891c22400;
      27: out3 <= 64'h3c84d4965782fc00;
      28: out3 <= 64'h3c424209ed0dca00;
      29: out3 <= 64'h3bfd5cc45b7c5600;
      30: out3 <= 64'h3bb6276d99847800;
      31: out3 <= 64'h3b6ca4c471413600;
      32: out3 <= 64'h3b20d79e651a8c00;
      33: out3 <= 64'h3ad2c2e793cd1600;
      34: out3 <= 64'h3a8269a29b927400;
      35: out3 <= 64'h3a2fcee87c6bb800;
      36: out3 <= 64'h39daf5e8798ee600;
      37: out3 <= 64'h3983e1e7f9f8b800;
      38: out3 <= 64'h392a96426823ea00;
      39: out3 <= 64'h38cf166910e73600;
      40: out3 <= 64'h387165e3017b6200;
      41: out3 <= 64'h3811884ce4aa9200;
      42: out3 <= 64'h37af8158df2a5400;
      43: out3 <= 64'h374b54ce6b21a400;
      44: out3 <= 64'h36e5068a32dc7c00;
      45: out3 <= 64'h367c9a7deaae2400;
      46: out3 <= 64'h361214b02a040000;
      47: out3 <= 64'h35a5793c43aa2200;
      48: out3 <= 64'h3536cc521d434600;
      49: out3 <= 64'h34c6123605f5c400;
      50: out3 <= 64'h34534f408c4f0400;
      51: out3 <= 64'h33de87de535f2800;
      52: out3 <= 64'h3367c08fe70e8200;
      53: out3 <= 64'h32eefde98fae8400;
      54: out3 <= 64'h3274449324c7f600;
      55: out3 <= 64'h31f79947df281a00;
      56: out3 <= 64'h317900d62a2e8200;
      57: out3 <= 64'h30f8801f745d7e00;
      58: out3 <= 64'h30761c17ff2edc00;
      59: out3 <= 64'h2ff1d9c6ae2ee200;
      60: out3 <= 64'h2f6bbe44d55f5e00;
      61: out3 <= 64'h2ee3cebe06e4c200;
      62: out3 <= 64'h2e5a106fdfff2c00;
      63: out3 <= 64'h2dce88a9d5515e00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D19_24294(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hfb4ab7db4c798280;
      2: out3 <= 64'hf69bf7c8b8cf6300;
      3: out3 <= 64'hf1fa3ecac0d84e80;
      4: out3 <= 64'hed6bf9d12a60fa00;
      5: out3 <= 64'he8f77acf05ba6100;
      6: out3 <= 64'he4a2eff61ea34000;
      7: out3 <= 64'he0745b2407654600;
      8: out3 <= 64'hdc71898ca32e7000;
      9: out3 <= 64'hd8a00badbf5e8e00;
      10: out3 <= 64'hd5052d96e626c000;
      11: out3 <= 64'hd1a5ef902000d400;
      12: out3 <= 64'hce86ff29d5d17e00;
      13: out3 <= 64'hcbacb0bf73b0fc00;
      14: out3 <= 64'hc91af975cd238400;
      15: out3 <= 64'hc6d569bd97dc1600;
      16: out3 <= 64'hc4df28619ae57400;
      17: out3 <= 64'hc33aee276e3ddc00;
      18: out3 <= 64'hc1eb0208db9e5200;
      19: out3 <= 64'hc0f1360b1d68ae00;
      20: out3 <= 64'hc04ee4b85db5b400;
      21: out3 <= 64'hc004ef3ef665e600;
      22: out3 <= 64'hc013bc390d250400;
      23: out3 <= 64'hc07b371e3cc05a00;
      24: out3 <= 64'hc13ad0601146a000;
      25: out3 <= 64'hc2517e312f6d3a00;
      26: out3 <= 64'hc3bdbdf612f23600;
      27: out3 <= 64'hc57d965d646d8c00;
      28: out3 <= 64'hc78e9a1cfe849e00;
      29: out3 <= 64'hc9edeb4fd5fc0000;
      30: out3 <= 64'hcc983f7018f17e00;
      31: out3 <= 64'hcf89e3e800d12400;
      32: out3 <= 64'hd2bec33301886600;
      33: out3 <= 64'hd6326a8838342e00;
      34: out3 <= 64'hd9e010063d1f9600;
      35: out3 <= 64'hddc29957c969ba00;
      36: out3 <= 64'he1d4a2c7f909c500;
      37: out3 <= 64'he61086bc57127600;
      38: out3 <= 64'hea70658a54e02300;
      39: out3 <= 64'heeee2d9d4e098900;
      40: out3 <= 64'hf383a3e1cb2cfa80;
      41: out3 <= 64'hf82a6c6a55a33c80;
      42: out3 <= 64'hfcdc1341de44fd80;
      43: out3 <= 64'h192155f7a3667e0;
      44: out3 <= 64'h645e9af0a6d0b00;
      45: out3 <= 64'haf10a22459fe300;
      46: out3 <= 64'hf8cfcbd90af8d80;
      47: out3 <= 64'h14135c9417660100;
      48: out3 <= 64'h187de2a6aea96300;
      49: out3 <= 64'h1cc66e9931c45e00;
      50: out3 <= 64'h20e70f3245ffdc00;
      51: out3 <= 64'h24da0a99ba25be00;
      52: out3 <= 64'h2899e64a123bac00;
      53: out3 <= 64'h2c216eaa3a59be00;
      54: out3 <= 64'h2f6bbe44d55f5e00;
      55: out3 <= 64'h3274449324c7f600;
      56: out3 <= 64'h3536cc521d434600;
      57: out3 <= 64'h37af8158df2a5400;
      58: out3 <= 64'h39daf5e8798ee600;
      59: out3 <= 64'h3bb6276d99847800;
      60: out3 <= 64'h3d3e82ad8c5bb400;
      61: out3 <= 64'h3e71e758c9cb1200;
      62: out3 <= 64'h3f4eaafe114a2e00;
      63: out3 <= 64'h3fd39b5a03107400;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



module D20_24426(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hfa824bfd5956f9c0;
      2: out3 <= 64'hf50ef5ddba601d00;
      3: out3 <= 64'hefb047f1c8025200;
      4: out3 <= 64'hea70658a54e02300;
      5: out3 <= 64'he55937d492c03600;
      6: out3 <= 64'he0745b2407654600;
      7: out3 <= 64'hdbcb0ccd98294e00;
      8: out3 <= 64'hd76619b5edc45400;
      9: out3 <= 64'hd34dcdb41f0f8600;
      10: out3 <= 64'hcf89e3e800d12400;
      11: out3 <= 64'hcc217821aca0d800;
      12: out3 <= 64'hc91af975cd238400;
      13: out3 <= 64'hc67c1e1806074800;
      14: out3 <= 64'hc449d892667b8800;
      15: out3 <= 64'hc2884e6e41e91800;
      16: out3 <= 64'hc13ad0601146a000;
      17: out3 <= 64'hc063d40524b30a00;
      18: out3 <= 64'hc004ef3ef665e600;
      19: out3 <= 64'hc01ed534e31ca600;
      20: out3 <= 64'hc0b15501eeb5d200;
      21: out3 <= 64'hc1bb5a11138a4c00;
      22: out3 <= 64'hc33aee276e3ddc00;
      23: out3 <= 64'hc52d3d186c32ea00;
      24: out3 <= 64'hc78e9a1cfe849e00;
      25: out3 <= 64'hca5a86c3bc55de00;
      26: out3 <= 64'hcd8bbb6cdb380a00;
      27: out3 <= 64'hd11c3141f91b3e00;
      28: out3 <= 64'hd5052d96e626c000;
      29: out3 <= 64'hd93f4e9df34c1a00;
      30: out3 <= 64'hddc29957c969ba00;
      31: out3 <= 64'he28688a4791c7700;
      32: out3 <= 64'he7821d5951569d00;
      33: out3 <= 64'hecabef3d1e7eae00;
      34: out3 <= 64'hf1fa3ecac0d84e80;
      35: out3 <= 64'hf763079892854480;
      36: out3 <= 64'hfcdc1341de44fd80;
      37: out3 <= 64'h25b0caeb28ab9a0;
      38: out3 <= 64'h7d59395aa5cc380;
      39: out3 <= 64'hd415012d8022880;
      40: out3 <= 64'h1294062ed59f0600;
      41: out3 <= 64'h17c3a9311dcce700;
      42: out3 <= 64'h1cc66e9931c45e00;
      43: out3 <= 64'h2192e09abb131e00;
      44: out3 <= 64'h261feff9c2e06a00;
      45: out3 <= 64'h2a65052546ab2c00;
      46: out3 <= 64'h2e5a106fdfff2c00;
      47: out3 <= 64'h31f79947df281a00;
      48: out3 <= 64'h3536cc521d434600;
      49: out3 <= 64'h3811884ce4aa9200;
      50: out3 <= 64'h3a8269a29b927400;
      51: out3 <= 64'h3c84d4965782fc00;
      52: out3 <= 64'h3e14fdf72461ae00;
      53: out3 <= 64'h3f2ff24992133600;
      54: out3 <= 64'h3fd39b5a03107400;
      55: out3 <= 64'h3ffec42d3725b600;
      56: out3 <= 64'h3fb11b47a24a4c00;
      57: out3 <= 64'h3eeb33474240ee00;
      58: out3 <= 64'h3dae81ced092c600;
      59: out3 <= 64'h3bfd5cc45b7c5600;
      60: out3 <= 64'h39daf5e8798ee600;
      61: out3 <= 64'h374b54ce6b21a400;
      62: out3 <= 64'h34534f408c4f0400;
      63: out3 <= 64'h30f8801f745d7e00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "distributed"
endmodule



// Latency: 12
// Gap: 1
module codeBlock22730(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i1_in;
   reg [5:0] i1;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(11, 1) shiftFIFO_27734(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a221;
   wire signed [63:0] a174;
   wire signed [63:0] a224;
   wire signed [63:0] a178;
   wire signed [63:0] a225;
   wire signed [63:0] a226;
   wire signed [63:0] a229;
   wire signed [63:0] a230;
   wire signed [63:0] a233;
   wire signed [63:0] a234;
   wire signed [63:0] a237;
   wire signed [63:0] a238;
   wire signed [63:0] a241;
   wire signed [63:0] a242;
   wire signed [63:0] a245;
   wire signed [63:0] a246;
   wire signed [63:0] a249;
   wire signed [63:0] a250;
   reg signed [63:0] tm494;
   reg signed [63:0] tm498;
   reg signed [63:0] tm510;
   reg signed [63:0] tm514;
   reg signed [63:0] tm526;
   reg signed [63:0] tm530;
   reg signed [63:0] tm542;
   reg signed [63:0] tm546;
   reg signed [63:0] tm558;
   reg signed [63:0] tm562;
   reg signed [63:0] tm574;
   reg signed [63:0] tm578;
   reg signed [63:0] tm590;
   reg signed [63:0] tm594;
   reg signed [63:0] tm606;
   reg signed [63:0] tm617;
   reg signed [63:0] tm495;
   reg signed [63:0] tm499;
   reg signed [63:0] tm511;
   reg signed [63:0] tm515;
   reg signed [63:0] tm527;
   reg signed [63:0] tm531;
   reg signed [63:0] tm543;
   reg signed [63:0] tm547;
   reg signed [63:0] tm559;
   reg signed [63:0] tm563;
   reg signed [63:0] tm575;
   reg signed [63:0] tm579;
   reg signed [63:0] tm591;
   reg signed [63:0] tm595;
   reg signed [63:0] tm607;
   reg signed [63:0] tm618;
   wire signed [63:0] tm26;
   wire signed [63:0] a179;
   wire signed [63:0] tm27;
   wire signed [63:0] a181;
   wire signed [63:0] tm28;
   wire signed [63:0] a185;
   wire signed [63:0] tm29;
   wire signed [63:0] a187;
   wire signed [63:0] tm30;
   wire signed [63:0] a191;
   wire signed [63:0] tm31;
   wire signed [63:0] a193;
   wire signed [63:0] tm32;
   wire signed [63:0] a197;
   wire signed [63:0] tm33;
   wire signed [63:0] a199;
   wire signed [63:0] tm34;
   wire signed [63:0] a203;
   wire signed [63:0] tm35;
   wire signed [63:0] a205;
   wire signed [63:0] tm36;
   wire signed [63:0] a209;
   wire signed [63:0] tm37;
   wire signed [63:0] a211;
   wire signed [63:0] tm38;
   wire signed [63:0] a215;
   wire signed [63:0] tm39;
   wire signed [63:0] a217;
   reg signed [63:0] tm496;
   reg signed [63:0] tm500;
   reg signed [63:0] tm512;
   reg signed [63:0] tm516;
   reg signed [63:0] tm528;
   reg signed [63:0] tm532;
   reg signed [63:0] tm544;
   reg signed [63:0] tm548;
   reg signed [63:0] tm560;
   reg signed [63:0] tm564;
   reg signed [63:0] tm576;
   reg signed [63:0] tm580;
   reg signed [63:0] tm592;
   reg signed [63:0] tm596;
   reg signed [63:0] tm608;
   reg signed [63:0] tm619;
   reg signed [63:0] tm80;
   reg signed [63:0] tm81;
   reg signed [63:0] tm84;
   reg signed [63:0] tm85;
   reg signed [63:0] tm88;
   reg signed [63:0] tm89;
   reg signed [63:0] tm92;
   reg signed [63:0] tm93;
   reg signed [63:0] tm96;
   reg signed [63:0] tm97;
   reg signed [63:0] tm100;
   reg signed [63:0] tm101;
   reg signed [63:0] tm104;
   reg signed [63:0] tm105;
   reg signed [63:0] tm497;
   reg signed [63:0] tm501;
   reg signed [63:0] tm513;
   reg signed [63:0] tm517;
   reg signed [63:0] tm529;
   reg signed [63:0] tm533;
   reg signed [63:0] tm545;
   reg signed [63:0] tm549;
   reg signed [63:0] tm561;
   reg signed [63:0] tm565;
   reg signed [63:0] tm577;
   reg signed [63:0] tm581;
   reg signed [63:0] tm593;
   reg signed [63:0] tm597;
   reg signed [63:0] tm609;
   reg signed [63:0] tm620;
   reg signed [63:0] tm610;
   reg signed [63:0] tm621;
   reg signed [63:0] tm611;
   reg signed [63:0] tm622;
   reg signed [63:0] tm612;
   reg signed [63:0] tm623;
   reg signed [63:0] tm613;
   reg signed [63:0] tm624;
   reg signed [63:0] tm614;
   reg signed [63:0] tm625;
   wire signed [63:0] a180;
   wire signed [63:0] a182;
   wire signed [63:0] a183;
   wire signed [63:0] a184;
   wire signed [63:0] a186;
   wire signed [63:0] a188;
   wire signed [63:0] a189;
   wire signed [63:0] a190;
   wire signed [63:0] a192;
   wire signed [63:0] a194;
   wire signed [63:0] a195;
   wire signed [63:0] a196;
   wire signed [63:0] a198;
   wire signed [63:0] a200;
   wire signed [63:0] a201;
   wire signed [63:0] a202;
   wire signed [63:0] a204;
   wire signed [63:0] a206;
   wire signed [63:0] a207;
   wire signed [63:0] a208;
   wire signed [63:0] a210;
   wire signed [63:0] a212;
   wire signed [63:0] a213;
   wire signed [63:0] a214;
   wire signed [63:0] a216;
   wire signed [63:0] a218;
   wire signed [63:0] a219;
   wire signed [63:0] a220;
   reg signed [63:0] tm615;
   reg signed [63:0] tm626;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm616;
   reg signed [63:0] tm627;


   assign a221 = X0;
   assign a174 = a221;
   assign a224 = X1;
   assign a178 = a224;
   assign a225 = X2;
   assign a226 = X3;
   assign a229 = X4;
   assign a230 = X5;
   assign a233 = X6;
   assign a234 = X7;
   assign a237 = X8;
   assign a238 = X9;
   assign a241 = X10;
   assign a242 = X11;
   assign a245 = X12;
   assign a246 = X13;
   assign a249 = X14;
   assign a250 = X15;
   assign a179 = tm26;
   assign a181 = tm27;
   assign a185 = tm28;
   assign a187 = tm29;
   assign a191 = tm30;
   assign a193 = tm31;
   assign a197 = tm32;
   assign a199 = tm33;
   assign a203 = tm34;
   assign a205 = tm35;
   assign a209 = tm36;
   assign a211 = tm37;
   assign a215 = tm38;
   assign a217 = tm39;
   assign Y0 = tm616;
   assign Y1 = tm627;

   D12_23436 instD12inst0_23436(.addr(i1[5:0]), .out(tm38), .clk(clk));

   D11_23568 instD11inst0_23568(.addr(i1[5:0]), .out(tm36), .clk(clk));

   D14_23634 instD14inst0_23634(.addr(i1[5:0]), .out(tm27), .clk(clk));

   D10_23700 instD10inst0_23700(.addr(i1[5:0]), .out(tm34), .clk(clk));

   D15_23766 instD15inst0_23766(.addr(i1[5:0]), .out(tm29), .clk(clk));

   D9_23832 instD9inst0_23832(.addr(i1[5:0]), .out(tm32), .clk(clk));

   D16_23898 instD16inst0_23898(.addr(i1[5:0]), .out(tm31), .clk(clk));

   D8_23964 instD8inst0_23964(.addr(i1[5:0]), .out(tm30), .clk(clk));

   D17_24030 instD17inst0_24030(.addr(i1[5:0]), .out(tm33), .clk(clk));

   D7_24096 instD7inst0_24096(.addr(i1[5:0]), .out(tm28), .clk(clk));

   D18_24162 instD18inst0_24162(.addr(i1[5:0]), .out(tm35), .clk(clk));

   D6_24228 instD6inst0_24228(.addr(i1[5:0]), .out(tm26), .clk(clk));

   D19_24294 instD19inst0_24294(.addr(i1[5:0]), .out(tm37), .clk(clk));

   D20_24426 instD20inst0_24426(.addr(i1[5:0]), .out(tm39), .clk(clk));

    multfix #(64, 6) m22829(.a(tm80), .b(tm497), .clk(clk), .q_sc(a180), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22851(.a(tm81), .b(tm501), .clk(clk), .q_sc(a182), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22869(.a(tm81), .b(tm497), .clk(clk), .q_sc(a183), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22880(.a(tm80), .b(tm501), .clk(clk), .q_sc(a184), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22909(.a(tm84), .b(tm513), .clk(clk), .q_sc(a186), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22931(.a(tm85), .b(tm517), .clk(clk), .q_sc(a188), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22949(.a(tm85), .b(tm513), .clk(clk), .q_sc(a189), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22960(.a(tm84), .b(tm517), .clk(clk), .q_sc(a190), .q_unsc(), .rst(reset));
    multfix #(64, 6) m22989(.a(tm88), .b(tm529), .clk(clk), .q_sc(a192), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23011(.a(tm89), .b(tm533), .clk(clk), .q_sc(a194), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23029(.a(tm89), .b(tm529), .clk(clk), .q_sc(a195), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23040(.a(tm88), .b(tm533), .clk(clk), .q_sc(a196), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23069(.a(tm92), .b(tm545), .clk(clk), .q_sc(a198), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23091(.a(tm93), .b(tm549), .clk(clk), .q_sc(a200), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23109(.a(tm93), .b(tm545), .clk(clk), .q_sc(a201), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23120(.a(tm92), .b(tm549), .clk(clk), .q_sc(a202), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23149(.a(tm96), .b(tm561), .clk(clk), .q_sc(a204), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23171(.a(tm97), .b(tm565), .clk(clk), .q_sc(a206), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23189(.a(tm97), .b(tm561), .clk(clk), .q_sc(a207), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23200(.a(tm96), .b(tm565), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23229(.a(tm100), .b(tm577), .clk(clk), .q_sc(a210), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23251(.a(tm101), .b(tm581), .clk(clk), .q_sc(a212), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23269(.a(tm101), .b(tm577), .clk(clk), .q_sc(a213), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23280(.a(tm100), .b(tm581), .clk(clk), .q_sc(a214), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23309(.a(tm104), .b(tm593), .clk(clk), .q_sc(a216), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23331(.a(tm105), .b(tm597), .clk(clk), .q_sc(a218), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23349(.a(tm105), .b(tm593), .clk(clk), .q_sc(a219), .q_unsc(), .rst(reset));
    multfix #(64, 6) m23360(.a(tm104), .b(tm597), .clk(clk), .q_sc(a220), .q_unsc(), .rst(reset));
    subfxp #(64, 1) sub22858(.a(a180), .b(a182), .clk(clk), .q(Y2));    // 10
    addfxp #(64, 1) add22887(.a(a183), .b(a184), .clk(clk), .q(Y3));    // 10
    subfxp #(64, 1) sub22938(.a(a186), .b(a188), .clk(clk), .q(Y4));    // 10
    addfxp #(64, 1) add22967(.a(a189), .b(a190), .clk(clk), .q(Y5));    // 10
    subfxp #(64, 1) sub23018(.a(a192), .b(a194), .clk(clk), .q(Y6));    // 10
    addfxp #(64, 1) add23047(.a(a195), .b(a196), .clk(clk), .q(Y7));    // 10
    subfxp #(64, 1) sub23098(.a(a198), .b(a200), .clk(clk), .q(Y8));    // 10
    addfxp #(64, 1) add23127(.a(a201), .b(a202), .clk(clk), .q(Y9));    // 10
    subfxp #(64, 1) sub23178(.a(a204), .b(a206), .clk(clk), .q(Y10));    // 10
    addfxp #(64, 1) add23207(.a(a207), .b(a208), .clk(clk), .q(Y11));    // 10
    subfxp #(64, 1) sub23258(.a(a210), .b(a212), .clk(clk), .q(Y12));    // 10
    addfxp #(64, 1) add23287(.a(a213), .b(a214), .clk(clk), .q(Y13));    // 10
    subfxp #(64, 1) sub23338(.a(a216), .b(a218), .clk(clk), .q(Y14));    // 10
    addfxp #(64, 1) add23367(.a(a219), .b(a220), .clk(clk), .q(Y15));    // 10


   always @(posedge clk) begin
      if (reset == 1) begin
         tm80 <= 0;
         tm497 <= 0;
         tm81 <= 0;
         tm501 <= 0;
         tm81 <= 0;
         tm497 <= 0;
         tm80 <= 0;
         tm501 <= 0;
         tm84 <= 0;
         tm513 <= 0;
         tm85 <= 0;
         tm517 <= 0;
         tm85 <= 0;
         tm513 <= 0;
         tm84 <= 0;
         tm517 <= 0;
         tm88 <= 0;
         tm529 <= 0;
         tm89 <= 0;
         tm533 <= 0;
         tm89 <= 0;
         tm529 <= 0;
         tm88 <= 0;
         tm533 <= 0;
         tm92 <= 0;
         tm545 <= 0;
         tm93 <= 0;
         tm549 <= 0;
         tm93 <= 0;
         tm545 <= 0;
         tm92 <= 0;
         tm549 <= 0;
         tm96 <= 0;
         tm561 <= 0;
         tm97 <= 0;
         tm565 <= 0;
         tm97 <= 0;
         tm561 <= 0;
         tm96 <= 0;
         tm565 <= 0;
         tm100 <= 0;
         tm577 <= 0;
         tm101 <= 0;
         tm581 <= 0;
         tm101 <= 0;
         tm577 <= 0;
         tm100 <= 0;
         tm581 <= 0;
         tm104 <= 0;
         tm593 <= 0;
         tm105 <= 0;
         tm597 <= 0;
         tm105 <= 0;
         tm593 <= 0;
         tm104 <= 0;
         tm597 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm494 <= a225;
         tm498 <= a226;
         tm510 <= a229;
         tm514 <= a230;
         tm526 <= a233;
         tm530 <= a234;
         tm542 <= a237;
         tm546 <= a238;
         tm558 <= a241;
         tm562 <= a242;
         tm574 <= a245;
         tm578 <= a246;
         tm590 <= a249;
         tm594 <= a250;
         tm606 <= a174;
         tm617 <= a178;
         tm495 <= tm494;
         tm499 <= tm498;
         tm511 <= tm510;
         tm515 <= tm514;
         tm527 <= tm526;
         tm531 <= tm530;
         tm543 <= tm542;
         tm547 <= tm546;
         tm559 <= tm558;
         tm563 <= tm562;
         tm575 <= tm574;
         tm579 <= tm578;
         tm591 <= tm590;
         tm595 <= tm594;
         tm607 <= tm606;
         tm618 <= tm617;
         tm496 <= tm495;
         tm500 <= tm499;
         tm512 <= tm511;
         tm516 <= tm515;
         tm528 <= tm527;
         tm532 <= tm531;
         tm544 <= tm543;
         tm548 <= tm547;
         tm560 <= tm559;
         tm564 <= tm563;
         tm576 <= tm575;
         tm580 <= tm579;
         tm592 <= tm591;
         tm596 <= tm595;
         tm608 <= tm607;
         tm619 <= tm618;
         tm80 <= a179;
         tm81 <= a181;
         tm84 <= a185;
         tm85 <= a187;
         tm88 <= a191;
         tm89 <= a193;
         tm92 <= a197;
         tm93 <= a199;
         tm96 <= a203;
         tm97 <= a205;
         tm100 <= a209;
         tm101 <= a211;
         tm104 <= a215;
         tm105 <= a217;
         tm497 <= tm496;
         tm501 <= tm500;
         tm513 <= tm512;
         tm517 <= tm516;
         tm529 <= tm528;
         tm533 <= tm532;
         tm545 <= tm544;
         tm549 <= tm548;
         tm561 <= tm560;
         tm565 <= tm564;
         tm577 <= tm576;
         tm581 <= tm580;
         tm593 <= tm592;
         tm597 <= tm596;
         tm609 <= tm608;
         tm620 <= tm619;
         tm610 <= tm609;
         tm621 <= tm620;
         tm611 <= tm610;
         tm622 <= tm621;
         tm612 <= tm611;
         tm623 <= tm622;
         tm613 <= tm612;
         tm624 <= tm623;
         tm614 <= tm613;
         tm625 <= tm624;
         tm615 <= tm614;
         tm626 <= tm625;
         tm616 <= tm615;
         tm627 <= tm626;
      end
   end
endmodule

// Latency: 11
// Gap: 1
module codeBlock24431(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(10, 1) shiftFIFO_27737(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a45;
   wire signed [63:0] a46;
   wire signed [63:0] a47;
   wire signed [63:0] a48;
   wire signed [63:0] a53;
   wire signed [63:0] a54;
   wire signed [63:0] a55;
   wire signed [63:0] a56;
   wire signed [63:0] a61;
   wire signed [63:0] a62;
   wire signed [63:0] a63;
   wire signed [63:0] a64;
   wire signed [63:0] a69;
   wire signed [63:0] a70;
   wire signed [63:0] a71;
   wire signed [63:0] a72;
   wire signed [63:0] t333;
   wire signed [63:0] t334;
   wire signed [63:0] t335;
   wire signed [63:0] t336;
   wire signed [63:0] t337;
   wire signed [63:0] t338;
   wire signed [63:0] t339;
   wire signed [63:0] t340;
   wire signed [63:0] t343;
   wire signed [63:0] t344;
   wire signed [63:0] t345;
   wire signed [63:0] t346;
   wire signed [63:0] t347;
   wire signed [63:0] t348;
   wire signed [63:0] t349;
   wire signed [63:0] t350;
   wire signed [63:0] t353;
   wire signed [63:0] t354;
   wire signed [63:0] t355;
   wire signed [63:0] t356;
   wire signed [63:0] t357;
   wire signed [63:0] t358;
   wire signed [63:0] t359;
   wire signed [63:0] t360;
   wire signed [63:0] t369;
   wire signed [63:0] t370;
   wire signed [63:0] t371;
   wire signed [63:0] t372;
   wire signed [63:0] t361;
   wire signed [63:0] t362;
   wire signed [63:0] t363;
   wire signed [63:0] t364;
   wire signed [63:0] t365;
   wire signed [63:0] t366;
   wire signed [63:0] t367;
   wire signed [63:0] t368;
   reg signed [63:0] tm628;
   reg signed [63:0] tm635;
   reg signed [63:0] tm656;
   reg signed [63:0] tm663;
   reg signed [63:0] tm629;
   reg signed [63:0] tm636;
   reg signed [63:0] tm657;
   reg signed [63:0] tm664;
   reg signed [63:0] tm684;
   reg signed [63:0] tm691;
   reg signed [63:0] tm698;
   reg signed [63:0] tm705;
   reg signed [63:0] tm712;
   reg signed [63:0] tm719;
   reg signed [63:0] tm726;
   reg signed [63:0] tm733;
   reg signed [63:0] tm630;
   reg signed [63:0] tm637;
   reg signed [63:0] tm658;
   reg signed [63:0] tm665;
   reg signed [63:0] tm685;
   reg signed [63:0] tm692;
   reg signed [63:0] tm699;
   reg signed [63:0] tm706;
   reg signed [63:0] tm713;
   reg signed [63:0] tm720;
   reg signed [63:0] tm727;
   reg signed [63:0] tm734;
   reg signed [63:0] tm631;
   reg signed [63:0] tm638;
   reg signed [63:0] tm659;
   reg signed [63:0] tm666;
   reg signed [63:0] tm686;
   reg signed [63:0] tm693;
   reg signed [63:0] tm700;
   reg signed [63:0] tm707;
   reg signed [63:0] tm714;
   reg signed [63:0] tm721;
   reg signed [63:0] tm728;
   reg signed [63:0] tm735;
   wire signed [63:0] a41;
   wire signed [63:0] a42;
   wire signed [63:0] a43;
   wire signed [63:0] a44;
   reg signed [63:0] tm632;
   reg signed [63:0] tm639;
   reg signed [63:0] tm660;
   reg signed [63:0] tm667;
   reg signed [63:0] tm687;
   reg signed [63:0] tm694;
   reg signed [63:0] tm701;
   reg signed [63:0] tm708;
   reg signed [63:0] tm715;
   reg signed [63:0] tm722;
   reg signed [63:0] tm729;
   reg signed [63:0] tm736;
   wire signed [63:0] t341;
   wire signed [63:0] t342;
   wire signed [63:0] t351;
   wire signed [63:0] t352;
   reg signed [63:0] tm633;
   reg signed [63:0] tm640;
   reg signed [63:0] tm661;
   reg signed [63:0] tm668;
   reg signed [63:0] tm688;
   reg signed [63:0] tm695;
   reg signed [63:0] tm702;
   reg signed [63:0] tm709;
   reg signed [63:0] tm716;
   reg signed [63:0] tm723;
   reg signed [63:0] tm730;
   reg signed [63:0] tm737;
   wire signed [63:0] t373;
   wire signed [63:0] t374;
   wire signed [63:0] t375;
   wire signed [63:0] t376;
   reg signed [63:0] tm634;
   reg signed [63:0] tm641;
   reg signed [63:0] tm662;
   reg signed [63:0] tm669;
   reg signed [63:0] tm689;
   reg signed [63:0] tm696;
   reg signed [63:0] tm703;
   reg signed [63:0] tm710;
   reg signed [63:0] tm717;
   reg signed [63:0] tm724;
   reg signed [63:0] tm731;
   reg signed [63:0] tm738;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] t377;
   wire signed [63:0] t378;
   wire signed [63:0] t379;
   wire signed [63:0] t380;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] t381;
   wire signed [63:0] t382;
   wire signed [63:0] t383;
   wire signed [63:0] t384;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm690;
   reg signed [63:0] tm697;
   reg signed [63:0] tm704;
   reg signed [63:0] tm711;
   reg signed [63:0] tm718;
   reg signed [63:0] tm725;
   reg signed [63:0] tm732;
   reg signed [63:0] tm739;

   wire signed [63:0] tm40;
   assign tm40 = 64'h2d413cccfe779a00;

   assign a45 = X0;
   assign a46 = X8;
   assign a47 = X1;
   assign a48 = X9;
   assign a53 = X2;
   assign a54 = X10;
   assign a55 = X3;
   assign a56 = X11;
   assign a61 = X4;
   assign a62 = X12;
   assign a63 = X5;
   assign a64 = X13;
   assign a69 = X6;
   assign a70 = X14;
   assign a71 = X7;
   assign a72 = X15;
   assign Y0 = tm690;
   assign Y1 = tm697;
   assign Y8 = tm704;
   assign Y9 = tm711;
   assign Y4 = tm718;
   assign Y5 = tm725;
   assign Y12 = tm732;
   assign Y13 = tm739;
   assign Y2 = t377;
   assign Y3 = t378;
   assign Y10 = t379;
   assign Y11 = t380;
   assign Y6 = t381;
   assign Y7 = t382;
   assign Y14 = t383;
   assign Y15 = t384;

    addfxp #(64, 1) add24443(.a(a45), .b(a46), .clk(clk), .q(t333));    // 0
    addfxp #(64, 1) add24458(.a(a47), .b(a48), .clk(clk), .q(t334));    // 0
    subfxp #(64, 1) sub24473(.a(a45), .b(a46), .clk(clk), .q(t335));    // 0
    subfxp #(64, 1) sub24488(.a(a47), .b(a48), .clk(clk), .q(t336));    // 0
    addfxp #(64, 1) add24503(.a(a53), .b(a54), .clk(clk), .q(t337));    // 0
    addfxp #(64, 1) add24518(.a(a55), .b(a56), .clk(clk), .q(t338));    // 0
    subfxp #(64, 1) sub24533(.a(a53), .b(a54), .clk(clk), .q(t339));    // 0
    subfxp #(64, 1) sub24548(.a(a55), .b(a56), .clk(clk), .q(t340));    // 0
    addfxp #(64, 1) add24591(.a(a61), .b(a62), .clk(clk), .q(t343));    // 0
    addfxp #(64, 1) add24606(.a(a63), .b(a64), .clk(clk), .q(t344));    // 0
    subfxp #(64, 1) sub24621(.a(a61), .b(a62), .clk(clk), .q(t345));    // 0
    subfxp #(64, 1) sub24636(.a(a63), .b(a64), .clk(clk), .q(t346));    // 0
    addfxp #(64, 1) add24651(.a(a69), .b(a70), .clk(clk), .q(t347));    // 0
    addfxp #(64, 1) add24666(.a(a71), .b(a72), .clk(clk), .q(t348));    // 0
    subfxp #(64, 1) sub24681(.a(a69), .b(a70), .clk(clk), .q(t349));    // 0
    subfxp #(64, 1) sub24696(.a(a71), .b(a72), .clk(clk), .q(t350));    // 0
    addfxp #(64, 1) add24731(.a(t333), .b(t343), .clk(clk), .q(t353));    // 1
    addfxp #(64, 1) add24738(.a(t334), .b(t344), .clk(clk), .q(t354));    // 1
    subfxp #(64, 1) sub24745(.a(t333), .b(t343), .clk(clk), .q(t355));    // 1
    subfxp #(64, 1) sub24752(.a(t334), .b(t344), .clk(clk), .q(t356));    // 1
    addfxp #(64, 1) add24759(.a(t337), .b(t347), .clk(clk), .q(t357));    // 1
    addfxp #(64, 1) add24766(.a(t338), .b(t348), .clk(clk), .q(t358));    // 1
    subfxp #(64, 1) sub24773(.a(t337), .b(t347), .clk(clk), .q(t359));    // 1
    subfxp #(64, 1) sub24780(.a(t338), .b(t348), .clk(clk), .q(t360));    // 1
    addfxp #(64, 1) add24875(.a(t335), .b(t346), .clk(clk), .q(t369));    // 1
    subfxp #(64, 1) sub24882(.a(t336), .b(t345), .clk(clk), .q(t370));    // 1
    subfxp #(64, 1) sub24889(.a(t335), .b(t346), .clk(clk), .q(t371));    // 1
    addfxp #(64, 1) add24896(.a(t336), .b(t345), .clk(clk), .q(t372));    // 1
    addfxp #(64, 1) add24787(.a(t353), .b(t357), .clk(clk), .q(t361));    // 2
    addfxp #(64, 1) add24794(.a(t354), .b(t358), .clk(clk), .q(t362));    // 2
    subfxp #(64, 1) sub24801(.a(t353), .b(t357), .clk(clk), .q(t363));    // 2
    subfxp #(64, 1) sub24808(.a(t354), .b(t358), .clk(clk), .q(t364));    // 2
    addfxp #(64, 1) add24831(.a(t355), .b(t360), .clk(clk), .q(t365));    // 2
    subfxp #(64, 1) sub24838(.a(t356), .b(t359), .clk(clk), .q(t366));    // 2
    subfxp #(64, 1) sub24845(.a(t355), .b(t360), .clk(clk), .q(t367));    // 2
    addfxp #(64, 1) add24852(.a(t356), .b(t359), .clk(clk), .q(t368));    // 2
    multfix #(64, 6) m24555(.a(tm40), .b(t339), .clk(clk), .q_sc(a41), .q_unsc(), .rst(reset));
    multfix #(64, 6) m24562(.a(tm40), .b(t340), .clk(clk), .q_sc(a42), .q_unsc(), .rst(reset));
    multfix #(64, 6) m24703(.a(tm40), .b(t350), .clk(clk), .q_sc(a43), .q_unsc(), .rst(reset));
    multfix #(64, 6) m24710(.a(tm40), .b(t349), .clk(clk), .q_sc(a44), .q_unsc(), .rst(reset));
    addfxp #(64, 1) add24569(.a(a41), .b(a42), .clk(clk), .q(t341));    // 7
    subfxp #(64, 1) sub24576(.a(a42), .b(a41), .clk(clk), .q(t342));    // 7
    subfxp #(64, 1) sub24717(.a(a43), .b(a44), .clk(clk), .q(t351));    // 7
    addfxp #(64, 1) add24724(.a(a44), .b(a43), .clk(clk), .q(t352));    // 7
    addfxp #(64, 1) add24903(.a(t341), .b(t351), .clk(clk), .q(t373));    // 8
    subfxp #(64, 1) sub24910(.a(t342), .b(t352), .clk(clk), .q(t374));    // 8
    subfxp #(64, 1) sub24917(.a(t341), .b(t351), .clk(clk), .q(t375));    // 8
    addfxp #(64, 1) add24924(.a(t342), .b(t352), .clk(clk), .q(t376));    // 8
    addfxp #(64, 1) add24931(.a(tm634), .b(t373), .clk(clk), .q(t377));    // 9
    addfxp #(64, 1) add24938(.a(tm641), .b(t374), .clk(clk), .q(t378));    // 9
    subfxp #(64, 1) sub24945(.a(tm634), .b(t373), .clk(clk), .q(t379));    // 9
    subfxp #(64, 1) sub24952(.a(tm641), .b(t374), .clk(clk), .q(t380));    // 9
    addfxp #(64, 1) add24975(.a(tm662), .b(t376), .clk(clk), .q(t381));    // 9
    subfxp #(64, 1) sub24982(.a(tm669), .b(t375), .clk(clk), .q(t382));    // 9
    subfxp #(64, 1) sub24989(.a(tm662), .b(t376), .clk(clk), .q(t383));    // 9
    addfxp #(64, 1) add24996(.a(tm669), .b(t375), .clk(clk), .q(t384));    // 9


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm628 <= t369;
         tm635 <= t370;
         tm656 <= t371;
         tm663 <= t372;
         tm629 <= tm628;
         tm636 <= tm635;
         tm657 <= tm656;
         tm664 <= tm663;
         tm684 <= t361;
         tm691 <= t362;
         tm698 <= t363;
         tm705 <= t364;
         tm712 <= t365;
         tm719 <= t366;
         tm726 <= t367;
         tm733 <= t368;
         tm630 <= tm629;
         tm637 <= tm636;
         tm658 <= tm657;
         tm665 <= tm664;
         tm685 <= tm684;
         tm692 <= tm691;
         tm699 <= tm698;
         tm706 <= tm705;
         tm713 <= tm712;
         tm720 <= tm719;
         tm727 <= tm726;
         tm734 <= tm733;
         tm631 <= tm630;
         tm638 <= tm637;
         tm659 <= tm658;
         tm666 <= tm665;
         tm686 <= tm685;
         tm693 <= tm692;
         tm700 <= tm699;
         tm707 <= tm706;
         tm714 <= tm713;
         tm721 <= tm720;
         tm728 <= tm727;
         tm735 <= tm734;
         tm632 <= tm631;
         tm639 <= tm638;
         tm660 <= tm659;
         tm667 <= tm666;
         tm687 <= tm686;
         tm694 <= tm693;
         tm701 <= tm700;
         tm708 <= tm707;
         tm715 <= tm714;
         tm722 <= tm721;
         tm729 <= tm728;
         tm736 <= tm735;
         tm633 <= tm632;
         tm640 <= tm639;
         tm661 <= tm660;
         tm668 <= tm667;
         tm688 <= tm687;
         tm695 <= tm694;
         tm702 <= tm701;
         tm709 <= tm708;
         tm716 <= tm715;
         tm723 <= tm722;
         tm730 <= tm729;
         tm737 <= tm736;
         tm634 <= tm633;
         tm641 <= tm640;
         tm662 <= tm661;
         tm669 <= tm668;
         tm689 <= tm688;
         tm696 <= tm695;
         tm703 <= tm702;
         tm710 <= tm709;
         tm717 <= tm716;
         tm724 <= tm723;
         tm731 <= tm730;
         tm738 <= tm737;
         tm690 <= tm689;
         tm697 <= tm696;
         tm704 <= tm703;
         tm711 <= tm710;
         tm718 <= tm717;
         tm725 <= tm724;
         tm732 <= tm731;
         tm739 <= tm738;
      end
   end
endmodule

// Latency: 63
// Gap: 64
module rc25020(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];

   perm25018 instPerm27738(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 63
// Gap: 64
module perm25018(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inBank0[1] = addr0[4] ^ addr0[1];
   assign inBank0[2] = addr0[5] ^ addr0[2];
   assign inAddr0[0] = addr0[6];
   assign inAddr0[1] = addr0[7];
   assign inAddr0[2] = addr0[8];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign inAddr0[5] = addr0[2];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inBank1[1] = addr1[4] ^ addr1[1];
   assign inBank1[2] = addr1[5] ^ addr1[2];
   assign inAddr1[0] = addr1[6];
   assign inAddr1[1] = addr1[7];
   assign inAddr1[2] = addr1[8];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign inAddr1[5] = addr1[2];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];

   assign inBank2[0] = addr2[3] ^ addr2[0];
   assign inBank2[1] = addr2[4] ^ addr2[1];
   assign inBank2[2] = addr2[5] ^ addr2[2];
   assign inAddr2[0] = addr2[6];
   assign inAddr2[1] = addr2[7];
   assign inAddr2[2] = addr2[8];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign inAddr2[5] = addr2[2];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];

   assign inBank3[0] = addr3[3] ^ addr3[0];
   assign inBank3[1] = addr3[4] ^ addr3[1];
   assign inBank3[2] = addr3[5] ^ addr3[2];
   assign inAddr3[0] = addr3[6];
   assign inAddr3[1] = addr3[7];
   assign inAddr3[2] = addr3[8];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign inAddr3[5] = addr3[2];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];

   assign inBank4[0] = addr4[3] ^ addr4[0];
   assign inBank4[1] = addr4[4] ^ addr4[1];
   assign inBank4[2] = addr4[5] ^ addr4[2];
   assign inAddr4[0] = addr4[6];
   assign inAddr4[1] = addr4[7];
   assign inAddr4[2] = addr4[8];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign inAddr4[5] = addr4[2];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];

   assign inBank5[0] = addr5[3] ^ addr5[0];
   assign inBank5[1] = addr5[4] ^ addr5[1];
   assign inBank5[2] = addr5[5] ^ addr5[2];
   assign inAddr5[0] = addr5[6];
   assign inAddr5[1] = addr5[7];
   assign inAddr5[2] = addr5[8];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign inAddr5[5] = addr5[2];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];

   assign inBank6[0] = addr6[3] ^ addr6[0];
   assign inBank6[1] = addr6[4] ^ addr6[1];
   assign inBank6[2] = addr6[5] ^ addr6[2];
   assign inAddr6[0] = addr6[6];
   assign inAddr6[1] = addr6[7];
   assign inAddr6[2] = addr6[8];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign inAddr6[5] = addr6[2];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];

   assign inBank7[0] = addr7[3] ^ addr7[0];
   assign inBank7[1] = addr7[4] ^ addr7[1];
   assign inBank7[2] = addr7[5] ^ addr7[2];
   assign inAddr7[0] = addr7[6];
   assign inAddr7[1] = addr7[7];
   assign inAddr7[2] = addr7[8];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign inAddr7[5] = addr7[2];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];

   nextReg #(57, 6) nextReg_27743(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_27746(.X(next0), .Y(next_out), .clk(clk));


   memArray512_25018 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 56)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 60)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 56) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 56)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[1];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[0];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_25018(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(64, 6) nextReg_27751(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule


						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
