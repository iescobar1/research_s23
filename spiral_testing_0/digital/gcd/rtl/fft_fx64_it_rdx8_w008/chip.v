/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 274 cycles
//   Latency: 337 cycles

//   Resources required:
//     1 multipliers (5 x 3 bit)
//     32 multipliers (64 x 64 bit)
//     66 adders (64 x 64 bit)
//     7 adders (9 x 7 bit)
//     16 RAMs (128 words, 128 bits per word)
//     14 ROMs (512 words, 64 bits per word)

// Generated on Fri Feb 24 10:12:56 UTC 2023

// Latency: 337 clock cycles
// Throughput: 1 transform every 274 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 274 cycles.  This means that
// 274 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 337 cycles.  This means that
// the 'next_out' will be asserted 337 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.




// Latency: 337
// Gap: 274
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [63:0] t0_0;
   wire [63:0] t0_1;
   wire [63:0] t0_2;
   wire [63:0] t0_3;
   wire [63:0] t0_4;
   wire [63:0] t0_5;
   wire [63:0] t0_6;
   wire [63:0] t0_7;
   wire [63:0] t0_8;
   wire [63:0] t0_9;
   wire [63:0] t0_10;
   wire [63:0] t0_11;
   wire [63:0] t0_12;
   wire [63:0] t0_13;
   wire [63:0] t0_14;
   wire [63:0] t0_15;
   wire next_0;
   wire [63:0] t1_0;
   wire [63:0] t1_1;
   wire [63:0] t1_2;
   wire [63:0] t1_3;
   wire [63:0] t1_4;
   wire [63:0] t1_5;
   wire [63:0] t1_6;
   wire [63:0] t1_7;
   wire [63:0] t1_8;
   wire [63:0] t1_9;
   wire [63:0] t1_10;
   wire [63:0] t1_11;
   wire [63:0] t1_12;
   wire [63:0] t1_13;
   wire [63:0] t1_14;
   wire [63:0] t1_15;
   wire next_1;
   wire [63:0] t2_0;
   wire [63:0] t2_1;
   wire [63:0] t2_2;
   wire [63:0] t2_3;
   wire [63:0] t2_4;
   wire [63:0] t2_5;
   wire [63:0] t2_6;
   wire [63:0] t2_7;
   wire [63:0] t2_8;
   wire [63:0] t2_9;
   wire [63:0] t2_10;
   wire [63:0] t2_11;
   wire [63:0] t2_12;
   wire [63:0] t2_13;
   wire [63:0] t2_14;
   wire [63:0] t2_15;
   wire next_2;
   assign t0_0 = X0;
   assign Y0 = t2_0;
   assign t0_1 = X1;
   assign Y1 = t2_1;
   assign t0_2 = X2;
   assign Y2 = t2_2;
   assign t0_3 = X3;
   assign Y3 = t2_3;
   assign t0_4 = X4;
   assign Y4 = t2_4;
   assign t0_5 = X5;
   assign Y5 = t2_5;
   assign t0_6 = X6;
   assign Y6 = t2_6;
   assign t0_7 = X7;
   assign Y7 = t2_7;
   assign t0_8 = X8;
   assign Y8 = t2_8;
   assign t0_9 = X9;
   assign Y9 = t2_9;
   assign t0_10 = X10;
   assign Y10 = t2_10;
   assign t0_11 = X11;
   assign Y11 = t2_11;
   assign t0_12 = X12;
   assign Y12 = t2_12;
   assign t0_13 = X13;
   assign Y13 = t2_13;
   assign t0_14 = X14;
   assign Y14 = t2_14;
   assign t0_15 = X15;
   assign Y15 = t2_15;
   assign next_0 = next;
   assign next_out = next_2;

// latency=63, gap=64
   rc75464 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=274, gap=274
   ICompose_77874 IComposeInst79453(.next(next_1), .clk(clk), .reset(reset), .next_out(next_2),
       .X0(t1_0), .Y0(t2_0),
       .X1(t1_1), .Y1(t2_1),
       .X2(t1_2), .Y2(t2_2),
       .X3(t1_3), .Y3(t2_3),
       .X4(t1_4), .Y4(t2_4),
       .X5(t1_5), .Y5(t2_5),
       .X6(t1_6), .Y6(t2_6),
       .X7(t1_7), .Y7(t2_7),
       .X8(t1_8), .Y8(t2_8),
       .X9(t1_9), .Y9(t2_9),
       .X10(t1_10), .Y10(t2_10),
       .X11(t1_11), .Y11(t2_11),
       .X12(t1_12), .Y12(t2_12),
       .X13(t1_13), .Y13(t2_13),
       .X14(t1_14), .Y14(t2_14),
       .X15(t1_15), .Y15(t2_15));


endmodule

// Latency: 63
// Gap: 64
module rc75464(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];

   perm75462 instPerm79454(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 63
// Gap: 64
module perm75462(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inBank0[2] = addr0[8] ^ addr0[2];
   assign inAddr0[0] = addr0[3];
   assign inAddr0[1] = addr0[4];
   assign inAddr0[2] = addr0[5];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign inAddr0[5] = addr0[2];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inBank1[2] = addr1[8] ^ addr1[2];
   assign inAddr1[0] = addr1[3];
   assign inAddr1[1] = addr1[4];
   assign inAddr1[2] = addr1[5];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign inAddr1[5] = addr1[2];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inBank2[2] = addr2[8] ^ addr2[2];
   assign inAddr2[0] = addr2[3];
   assign inAddr2[1] = addr2[4];
   assign inAddr2[2] = addr2[5];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign inAddr2[5] = addr2[2];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inBank3[2] = addr3[8] ^ addr3[2];
   assign inAddr3[0] = addr3[3];
   assign inAddr3[1] = addr3[4];
   assign inAddr3[2] = addr3[5];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign inAddr3[5] = addr3[2];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[7] ^ addr4[1];
   assign inBank4[2] = addr4[8] ^ addr4[2];
   assign inAddr4[0] = addr4[3];
   assign inAddr4[1] = addr4[4];
   assign inAddr4[2] = addr4[5];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign inAddr4[5] = addr4[2];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[7] ^ addr5[1];
   assign inBank5[2] = addr5[8] ^ addr5[2];
   assign inAddr5[0] = addr5[3];
   assign inAddr5[1] = addr5[4];
   assign inAddr5[2] = addr5[5];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign inAddr5[5] = addr5[2];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[7] ^ addr6[1];
   assign inBank6[2] = addr6[8] ^ addr6[2];
   assign inAddr6[0] = addr6[3];
   assign inAddr6[1] = addr6[4];
   assign inAddr6[2] = addr6[5];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign inAddr6[5] = addr6[2];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[7] ^ addr7[1];
   assign inBank7[2] = addr7[8] ^ addr7[2];
   assign inAddr7[0] = addr7[3];
   assign inAddr7[1] = addr7[4];
   assign inAddr7[2] = addr7[5];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign inAddr7[5] = addr7[2];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];

   nextReg #(57, 6) nextReg_79459(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_79462(.X(next0), .Y(next_out), .clk(clk));


   memArray512_75462 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 56)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 60)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 56) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 56)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[5];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[4];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[3];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_75462(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(64, 6) nextReg_79467(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 274
// Gap: 274
module ICompose_77874(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   reg next_out;
   input clk, reset, next;

   reg [6:0] cycle_count;
   reg [6:0] count;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   reg [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   reg int_next;
   reg state;
   wire [63:0] t0; 
   reg [63:0] s0;
   wire [63:0] t1; 
   reg [63:0] s1;
   wire [63:0] t2; 
   reg [63:0] s2;
   wire [63:0] t3; 
   reg [63:0] s3;
   wire [63:0] t4; 
   reg [63:0] s4;
   wire [63:0] t5; 
   reg [63:0] s5;
   wire [63:0] t6; 
   reg [63:0] s6;
   wire [63:0] t7; 
   reg [63:0] s7;
   wire [63:0] t8; 
   reg [63:0] s8;
   wire [63:0] t9; 
   reg [63:0] s9;
   wire [63:0] t10; 
   reg [63:0] s10;
   wire [63:0] t11; 
   reg [63:0] s11;
   wire [63:0] t12; 
   reg [63:0] s12;
   wire [63:0] t13; 
   reg [63:0] s13;
   wire [63:0] t14; 
   reg [63:0] s14;
   wire [63:0] t15; 
   reg [63:0] s15;

   reg [1:0] iri_state;
   wire int_next_out;
   reg [2:0] i1;

   statementList77872 instList79472 (.clk(clk), .reset(reset), .next(int_next), .next_out(int_next_out),
      .i1_in(i1),
    .X0(s0), .Y0(t0),
    .X1(s1), .Y1(t1),
    .X2(s2), .Y2(t2),
    .X3(s3), .Y3(t3),
    .X4(s4), .Y4(t4),
    .X5(s5), .Y5(t5),
    .X6(s6), .Y6(t6),
    .X7(s7), .Y7(t7),
    .X8(s8), .Y8(t8),
    .X9(s9), .Y9(t9),
    .X10(s10), .Y10(t10),
    .X11(s11), .Y11(t11),
    .X12(s12), .Y12(t12),
    .X13(s13), .Y13(t13),
    .X14(s14), .Y14(t14),
    .X15(s15), .Y15(t15));

   always @(posedge clk) begin
      if (reset == 1) begin
         int_next <= 0;
         i1 <= 2;
         cycle_count <= 0;
         next_out <= 0;
         iri_state <= 0;
         Y0 <= 0;
         Y1 <= 0;
         Y2 <= 0;
         Y3 <= 0;
         Y4 <= 0;
         Y5 <= 0;
         Y6 <= 0;
         Y7 <= 0;
         Y8 <= 0;
         Y9 <= 0;
         Y10 <= 0;
         Y11 <= 0;
         Y12 <= 0;
         Y13 <= 0;
         Y14 <= 0;
         Y15 <= 0;
      end
      else begin
         Y0 <= t0;
         Y1 <= t1;
         Y2 <= t2;
         Y3 <= t3;
         Y4 <= t4;
         Y5 <= t5;
         Y6 <= t6;
         Y7 <= t7;
         Y8 <= t8;
         Y9 <= t9;
         Y10 <= t10;
         Y11 <= t11;
         Y12 <= t12;
         Y13 <= t13;
         Y14 <= t14;
         Y15 <= t15;
         next_out <= 0;
         case (iri_state)
            0: begin
               i1 <= 2;
               cycle_count <= 0;
               if (next == 1) begin
                  int_next <= 1;
                  iri_state <= 1;
                  
               end
               else begin
                  int_next <= 0;
                  iri_state <= 0;
               end
            end
            1: begin
               int_next <= 0;
               cycle_count <= cycle_count + 1;
               i1 <= i1;
               if (cycle_count < 89)
                  iri_state <= 1;
               else
                  iri_state <= 2;
            end
            2: begin
               cycle_count <= 0;
               i1 <= i1 - 1;
               if (i1 > 0) begin
                  iri_state <= 1;
                  int_next <= 1;
               end
               else begin
                  iri_state <= 0;
                  next_out <= 1;
                  int_next <= 0;
               end
            end
         endcase               
      end
   end

   always @(posedge clk) begin
      if (reset == 1) begin
         state <= 0;
         count <= 0;
         s0 <= 0;
         s1 <= 0;
         s2 <= 0;
         s3 <= 0;
         s4 <= 0;
         s5 <= 0;
         s6 <= 0;
         s7 <= 0;
         s8 <= 0;
         s9 <= 0;
         s10 <= 0;
         s11 <= 0;
         s12 <= 0;
         s13 <= 0;
         s14 <= 0;
         s15 <= 0;
      end      
      else begin
         case (state)
            0: begin
               count <= 0;
               if (next == 1) begin
                  state <= 1;
                  count <= 0;
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  s4 <= X4; 
                  s5 <= X5; 
                  s6 <= X6; 
                  s7 <= X7; 
                  s8 <= X8; 
                  s9 <= X9; 
                  s10 <= X10; 
                  s11 <= X11; 
                  s12 <= X12; 
                  s13 <= X13; 
                  s14 <= X14; 
                  s15 <= X15; 
               end
               else begin
                  state <= 0;
                  count <= 0;
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  s4 <= t4; 
                  s5 <= t5; 
                  s6 <= t6; 
                  s7 <= t7; 
                  s8 <= t8; 
                  s9 <= t9; 
                  s10 <= t10; 
                  s11 <= t11; 
                  s12 <= t12; 
                  s13 <= t13; 
                  s14 <= t14; 
                  s15 <= t15; 
               end               
            end
            1: begin
               count <= count + 1;
               if (count < 64) begin
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  s4 <= X4; 
                  s5 <= X5; 
                  s6 <= X6; 
                  s7 <= X7; 
                  s8 <= X8; 
                  s9 <= X9; 
                  s10 <= X10; 
                  s11 <= X11; 
                  s12 <= X12; 
                  s13 <= X13; 
                  s14 <= X14; 
                  s15 <= X15; 
                  state <= 1;                    
               end
               else begin
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  s4 <= t4; 
                  s5 <= t5; 
                  s6 <= t6; 
                  s7 <= t7; 
                  s8 <= t8; 
                  s9 <= t9; 
                  s10 <= t10; 
                  s11 <= t11; 
                  s12 <= t12; 
                  s13 <= t13; 
                  s14 <= t14; 
                  s15 <= t15; 
                  state <= 0;
               end
            end
         endcase               
      end
   end
endmodule

// Latency: 90
// Gap: 64
// module_name_is:statementList77872
module statementList77872(clk, reset, next, next_out,
   i1_in,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [2:0] i1_in;
   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [63:0] t0_0;
   wire [63:0] t0_1;
   wire [63:0] t0_2;
   wire [63:0] t0_3;
   wire [63:0] t0_4;
   wire [63:0] t0_5;
   wire [63:0] t0_6;
   wire [63:0] t0_7;
   wire [63:0] t0_8;
   wire [63:0] t0_9;
   wire [63:0] t0_10;
   wire [63:0] t0_11;
   wire [63:0] t0_12;
   wire [63:0] t0_13;
   wire [63:0] t0_14;
   wire [63:0] t0_15;
   wire next_0;
   wire [63:0] t1_0;
   wire [63:0] t1_1;
   wire [63:0] t1_2;
   wire [63:0] t1_3;
   wire [63:0] t1_4;
   wire [63:0] t1_5;
   wire [63:0] t1_6;
   wire [63:0] t1_7;
   wire [63:0] t1_8;
   wire [63:0] t1_9;
   wire [63:0] t1_10;
   wire [63:0] t1_11;
   wire [63:0] t1_12;
   wire [63:0] t1_13;
   wire [63:0] t1_14;
   wire [63:0] t1_15;
   wire next_1;
   wire [63:0] t2_0;
   wire [63:0] t2_1;
   wire [63:0] t2_2;
   wire [63:0] t2_3;
   wire [63:0] t2_4;
   wire [63:0] t2_5;
   wire [63:0] t2_6;
   wire [63:0] t2_7;
   wire [63:0] t2_8;
   wire [63:0] t2_9;
   wire [63:0] t2_10;
   wire [63:0] t2_11;
   wire [63:0] t2_12;
   wire [63:0] t2_13;
   wire [63:0] t2_14;
   wire [63:0] t2_15;
   wire next_2;
   wire [63:0] t3_0;
   wire [63:0] t3_1;
   wire [63:0] t3_2;
   wire [63:0] t3_3;
   wire [63:0] t3_4;
   wire [63:0] t3_5;
   wire [63:0] t3_6;
   wire [63:0] t3_7;
   wire [63:0] t3_8;
   wire [63:0] t3_9;
   wire [63:0] t3_10;
   wire [63:0] t3_11;
   wire [63:0] t3_12;
   wire [63:0] t3_13;
   wire [63:0] t3_14;
   wire [63:0] t3_15;
   wire next_3;
   wire [2:0] i1;
   wire [2:0] i1_0;
   assign t0_0 = X0;
   assign Y0 = t3_0;
   assign t0_1 = X1;
   assign Y1 = t3_1;
   assign t0_2 = X2;
   assign Y2 = t3_2;
   assign t0_3 = X3;
   assign Y3 = t3_3;
   assign t0_4 = X4;
   assign Y4 = t3_4;
   assign t0_5 = X5;
   assign Y5 = t3_5;
   assign t0_6 = X6;
   assign Y6 = t3_6;
   assign t0_7 = X7;
   assign Y7 = t3_7;
   assign t0_8 = X8;
   assign Y8 = t3_8;
   assign t0_9 = X9;
   assign Y9 = t3_9;
   assign t0_10 = X10;
   assign Y10 = t3_10;
   assign t0_11 = X11;
   assign Y11 = t3_11;
   assign t0_12 = X12;
   assign Y12 = t3_12;
   assign t0_13 = X13;
   assign Y13 = t3_13;
   assign t0_14 = X14;
   assign Y14 = t3_14;
   assign t0_15 = X15;
   assign Y15 = t3_15;
   assign next_0 = next;
   assign next_out = next_3;

   assign i1_0 = i1_in;

// latency=16, gap=64
   DirSum_77279 DirSumInst79475(.next(next_0), .clk(clk), .reset(reset), .next_out(next_1),
.i1(i1_0),
       .X0(t0_0), .Y0(t1_0),
       .X1(t0_1), .Y1(t1_1),
       .X2(t0_2), .Y2(t1_2),
       .X3(t0_3), .Y3(t1_3),
       .X4(t0_4), .Y4(t1_4),
       .X5(t0_5), .Y5(t1_5),
       .X6(t0_6), .Y6(t1_6),
       .X7(t0_7), .Y7(t1_7),
       .X8(t0_8), .Y8(t1_8),
       .X9(t0_9), .Y9(t1_9),
       .X10(t0_10), .Y10(t1_10),
       .X11(t0_11), .Y11(t1_11),
       .X12(t0_12), .Y12(t1_12),
       .X13(t0_13), .Y13(t1_13),
       .X14(t0_14), .Y14(t1_14),
       .X15(t0_15), .Y15(t1_15));


// latency=11, gap=64
   codeBlock77281 codeBlockIsnt79476(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=63, gap=64
   rc77870 instrc79477(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15));


endmodule

// Latency: 16
// Gap: 64
module DirSum_77279(clk, reset, next, next_out,
      i1,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   input [2:0] i1;
   reg [5:0] i2;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 63)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock75466 codeBlockIsnt79478(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D5_76763(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3ffec42d3725b600;
      2: out3 <= 64'h3ffb10c1099a1a00;
      3: out3 <= 64'h3ff4e5dffdeeba00;
      4: out3 <= 64'h3fec43c6f2dafc00;
      5: out3 <= 64'h3fe12acb1ce35a00;
      6: out3 <= 64'h3fd39b5a03107400;
      7: out3 <= 64'h3fc395f97ab61200;
      8: out3 <= 64'h3fb11b47a24a4c00;
      9: out3 <= 64'h3f9c2bfadb4cf600;
      10: out3 <= 64'h3f84c8e1c33fa600;
      11: out3 <= 64'h3f6af2e32bae8200;
      12: out3 <= 64'h3f4eaafe114a2e00;
      13: out3 <= 64'h3f2ff24992133600;
      14: out3 <= 64'h3f0ec9f4e2975200;
      15: out3 <= 64'h3eeb33474240ee00;
      16: out3 <= 64'h3ec52f9feeb96000;
      17: out3 <= 64'h3e9cc076165e5a00;
      18: out3 <= 64'h3e71e758c9cb1200;
      19: out3 <= 64'h3e44a5eeec75b400;
      20: out3 <= 64'h3e14fdf72461ae00;
      21: out3 <= 64'h3de2f147c8e78400;
      22: out3 <= 64'h3dae81ced092c600;
      23: out3 <= 64'h3d77b191be16e800;
      24: out3 <= 64'h3d3e82ad8c5bb400;
      25: out3 <= 64'h3d02f75699a21a00;
      26: out3 <= 64'h3cc511d891c22400;
      27: out3 <= 64'h3c84d4965782fc00;
      28: out3 <= 64'h3c424209ed0dca00;
      29: out3 <= 64'h3bfd5cc45b7c5600;
      30: out3 <= 64'h3bb6276d99847800;
      31: out3 <= 64'h3b6ca4c471413600;
      32: out3 <= 64'h3b20d79e651a8c00;
      33: out3 <= 64'h3ad2c2e793cd1600;
      34: out3 <= 64'h3a8269a29b927400;
      35: out3 <= 64'h3a2fcee87c6bb800;
      36: out3 <= 64'h39daf5e8798ee600;
      37: out3 <= 64'h3983e1e7f9f8b800;
      38: out3 <= 64'h392a96426823ea00;
      39: out3 <= 64'h38cf166910e73600;
      40: out3 <= 64'h387165e3017b6200;
      41: out3 <= 64'h3811884ce4aa9200;
      42: out3 <= 64'h37af8158df2a5400;
      43: out3 <= 64'h374b54ce6b21a400;
      44: out3 <= 64'h36e5068a32dc7c00;
      45: out3 <= 64'h367c9a7deaae2400;
      46: out3 <= 64'h361214b02a040000;
      47: out3 <= 64'h35a5793c43aa2200;
      48: out3 <= 64'h3536cc521d434600;
      49: out3 <= 64'h34c6123605f5c400;
      50: out3 <= 64'h34534f408c4f0400;
      51: out3 <= 64'h33de87de535f2800;
      52: out3 <= 64'h3367c08fe70e8200;
      53: out3 <= 64'h32eefde98fae8400;
      54: out3 <= 64'h3274449324c7f600;
      55: out3 <= 64'h31f79947df281a00;
      56: out3 <= 64'h317900d62a2e8200;
      57: out3 <= 64'h30f8801f745d7e00;
      58: out3 <= 64'h30761c17ff2edc00;
      59: out3 <= 64'h2ff1d9c6ae2ee200;
      60: out3 <= 64'h2f6bbe44d55f5e00;
      61: out3 <= 64'h2ee3cebe06e4c200;
      62: out3 <= 64'h2e5a106fdfff2c00;
      63: out3 <= 64'h2dce88a9d5515e00;
      64: out3 <= 64'h4000000000000000;
      65: out3 <= 64'h3ffb10c1099a1a00;
      66: out3 <= 64'h3fec43c6f2dafc00;
      67: out3 <= 64'h3fd39b5a03107400;
      68: out3 <= 64'h3fb11b47a24a4c00;
      69: out3 <= 64'h3f84c8e1c33fa600;
      70: out3 <= 64'h3f4eaafe114a2e00;
      71: out3 <= 64'h3f0ec9f4e2975200;
      72: out3 <= 64'h3ec52f9feeb96000;
      73: out3 <= 64'h3e71e758c9cb1200;
      74: out3 <= 64'h3e14fdf72461ae00;
      75: out3 <= 64'h3dae81ced092c600;
      76: out3 <= 64'h3d3e82ad8c5bb400;
      77: out3 <= 64'h3cc511d891c22400;
      78: out3 <= 64'h3c424209ed0dca00;
      79: out3 <= 64'h3bb6276d99847800;
      80: out3 <= 64'h3b20d79e651a8c00;
      81: out3 <= 64'h3a8269a29b927400;
      82: out3 <= 64'h39daf5e8798ee600;
      83: out3 <= 64'h392a96426823ea00;
      84: out3 <= 64'h387165e3017b6200;
      85: out3 <= 64'h37af8158df2a5400;
      86: out3 <= 64'h36e5068a32dc7c00;
      87: out3 <= 64'h361214b02a040000;
      88: out3 <= 64'h3536cc521d434600;
      89: out3 <= 64'h34534f408c4f0400;
      90: out3 <= 64'h3367c08fe70e8200;
      91: out3 <= 64'h3274449324c7f600;
      92: out3 <= 64'h317900d62a2e8200;
      93: out3 <= 64'h30761c17ff2edc00;
      94: out3 <= 64'h2f6bbe44d55f5e00;
      95: out3 <= 64'h2e5a106fdfff2c00;
      96: out3 <= 64'h2d413cccfe779a00;
      97: out3 <= 64'h2c216eaa3a59be00;
      98: out3 <= 64'h2afad26919d94000;
      99: out3 <= 64'h29cd9577c7cbd200;
      100: out3 <= 64'h2899e64a123bac00;
      101: out3 <= 64'h275ff45240a17200;
      102: out3 <= 64'h261feff9c2e06a00;
      103: out3 <= 64'h24da0a99ba25be00;
      104: out3 <= 64'h238e76735cd19000;
      105: out3 <= 64'h223d66a836964600;
      106: out3 <= 64'h20e70f3245ffdc00;
      107: out3 <= 64'h1f8ba4dbf89aba00;
      108: out3 <= 64'h1e2b5d3806f63b00;
      109: out3 <= 64'h1cc66e9931c45e00;
      110: out3 <= 64'h1b5d1009e15cc000;
      111: out3 <= 64'h19ef7943a8ed8a00;
      112: out3 <= 64'h187de2a6aea96300;
      113: out3 <= 64'h17088530fa459f00;
      114: out3 <= 64'h158f9a75ab1fdd00;
      115: out3 <= 64'h14135c9417660100;
      116: out3 <= 64'h1294062ed59f0600;
      117: out3 <= 64'h1111d262b1f67700;
      118: out3 <= 64'hf8cfcbd90af8d80;
      119: out3 <= 64'he05c1353f27b180;
      120: out3 <= 64'hc7c5c1e34d30580;
      121: out3 <= 64'haf10a22459fe300;
      122: out3 <= 64'h964083747309d00;
      123: out3 <= 64'h7d59395aa5cc380;
      124: out3 <= 64'h645e9af0a6d0b00;
      125: out3 <= 64'h4b54824b3867d80;
      126: out3 <= 64'h323ecbe21bb0280;
      127: out3 <= 64'h192155f7a3667e0;
      128: out3 <= 64'h4000000000000000;
      129: out3 <= 64'h3ff4e5dffdeeba00;
      130: out3 <= 64'h3fd39b5a03107400;
      131: out3 <= 64'h3f9c2bfadb4cf600;
      132: out3 <= 64'h3f4eaafe114a2e00;
      133: out3 <= 64'h3eeb33474240ee00;
      134: out3 <= 64'h3e71e758c9cb1200;
      135: out3 <= 64'h3de2f147c8e78400;
      136: out3 <= 64'h3d3e82ad8c5bb400;
      137: out3 <= 64'h3c84d4965782fc00;
      138: out3 <= 64'h3bb6276d99847800;
      139: out3 <= 64'h3ad2c2e793cd1600;
      140: out3 <= 64'h39daf5e8798ee600;
      141: out3 <= 64'h38cf166910e73600;
      142: out3 <= 64'h37af8158df2a5400;
      143: out3 <= 64'h367c9a7deaae2400;
      144: out3 <= 64'h3536cc521d434600;
      145: out3 <= 64'h33de87de535f2800;
      146: out3 <= 64'h3274449324c7f600;
      147: out3 <= 64'h30f8801f745d7e00;
      148: out3 <= 64'h2f6bbe44d55f5e00;
      149: out3 <= 64'h2dce88a9d5515e00;
      150: out3 <= 64'h2c216eaa3a59be00;
      151: out3 <= 64'h2a65052546ab2c00;
      152: out3 <= 64'h2899e64a123bac00;
      153: out3 <= 64'h26c0b1620cb3e600;
      154: out3 <= 64'h24da0a99ba25be00;
      155: out3 <= 64'h22e69ac7bdb69200;
      156: out3 <= 64'h20e70f3245ffdc00;
      157: out3 <= 64'h1edc1952ef78d600;
      158: out3 <= 64'h1cc66e9931c45e00;
      159: out3 <= 64'h1aa6c82b6d3fca00;
      160: out3 <= 64'h187de2a6aea96300;
      161: out3 <= 64'h164c7ddd3f27c600;
      162: out3 <= 64'h14135c9417660100;
      163: out3 <= 64'h11d3443f4cdb3e00;
      164: out3 <= 64'hf8cfcbd90af8d80;
      165: out3 <= 64'hd415012d8022880;
      166: out3 <= 64'haf10a22459fe300;
      167: out3 <= 64'h89cf8676d7abb80;
      168: out3 <= 64'h645e9af0a6d0b00;
      169: out3 <= 64'h3ecadcf3f041c00;
      170: out3 <= 64'h192155f7a3667e0;
      171: out3 <= 64'hff36f1701909c3e0;
      172: out3 <= 64'hfcdc1341de44fd80;
      173: out3 <= 64'hfa824bfd5956f9c0;
      174: out3 <= 64'hf82a6c6a55a33c80;
      175: out3 <= 64'hf5d544a76b60d300;
      176: out3 <= 64'hf383a3e1cb2cfa80;
      177: out3 <= 64'hf136580d5d5e7780;
      178: out3 <= 64'heeee2d9d4e098900;
      179: out3 <= 64'hecabef3d1e7eae00;
      180: out3 <= 64'hea70658a54e02300;
      181: out3 <= 64'he83c56cee2331900;
      182: out3 <= 64'he61086bc57127600;
      183: out3 <= 64'he3edb627fee11900;
      184: out3 <= 64'he1d4a2c7f909c500;
      185: out3 <= 64'hdfc606f167829200;
      186: out3 <= 64'hddc29957c969ba00;
      187: out3 <= 64'hdbcb0ccd98294e00;
      188: out3 <= 64'hd9e010063d1f9600;
      189: out3 <= 64'hd8024d5975525800;
      190: out3 <= 64'hd6326a8838342e00;
      191: out3 <= 64'hd471088335fce800;
      192: out3 <= 64'h4000000000000000;
      193: out3 <= 64'h3fec43c6f2dafc00;
      194: out3 <= 64'h3fb11b47a24a4c00;
      195: out3 <= 64'h3f4eaafe114a2e00;
      196: out3 <= 64'h3ec52f9feeb96000;
      197: out3 <= 64'h3e14fdf72461ae00;
      198: out3 <= 64'h3d3e82ad8c5bb400;
      199: out3 <= 64'h3c424209ed0dca00;
      200: out3 <= 64'h3b20d79e651a8c00;
      201: out3 <= 64'h39daf5e8798ee600;
      202: out3 <= 64'h387165e3017b6200;
      203: out3 <= 64'h36e5068a32dc7c00;
      204: out3 <= 64'h3536cc521d434600;
      205: out3 <= 64'h3367c08fe70e8200;
      206: out3 <= 64'h317900d62a2e8200;
      207: out3 <= 64'h2f6bbe44d55f5e00;
      208: out3 <= 64'h2d413cccfe779a00;
      209: out3 <= 64'h2afad26919d94000;
      210: out3 <= 64'h2899e64a123bac00;
      211: out3 <= 64'h261feff9c2e06a00;
      212: out3 <= 64'h238e76735cd19000;
      213: out3 <= 64'h20e70f3245ffdc00;
      214: out3 <= 64'h1e2b5d3806f63b00;
      215: out3 <= 64'h1b5d1009e15cc000;
      216: out3 <= 64'h187de2a6aea96300;
      217: out3 <= 64'h158f9a75ab1fdd00;
      218: out3 <= 64'h1294062ed59f0600;
      219: out3 <= 64'hf8cfcbd90af8d80;
      220: out3 <= 64'hc7c5c1e34d30580;
      221: out3 <= 64'h964083747309d00;
      222: out3 <= 64'h645e9af0a6d0b00;
      223: out3 <= 64'h323ecbe21bb0280;
      224: out3 <= 64'h0;
      225: out3 <= 64'hfcdc1341de44fd80;
      226: out3 <= 64'hf9ba1650f592f500;
      227: out3 <= 64'hf69bf7c8b8cf6300;
      228: out3 <= 64'hf383a3e1cb2cfa80;
      229: out3 <= 64'hf07303426f507280;
      230: out3 <= 64'hed6bf9d12a60fa00;
      231: out3 <= 64'hea70658a54e02300;
      232: out3 <= 64'he7821d5951569d00;
      233: out3 <= 64'he4a2eff61ea34000;
      234: out3 <= 64'he1d4a2c7f909c500;
      235: out3 <= 64'hdf18f0cdba002400;
      236: out3 <= 64'hdc71898ca32e7000;
      237: out3 <= 64'hd9e010063d1f9600;
      238: out3 <= 64'hd76619b5edc45400;
      239: out3 <= 64'hd5052d96e626c000;
      240: out3 <= 64'hd2bec33301886600;
      241: out3 <= 64'hd09441bb2aa0a200;
      242: out3 <= 64'hce86ff29d5d17e00;
      243: out3 <= 64'hcc983f7018f17e00;
      244: out3 <= 64'hcac933ade2bcba00;
      245: out3 <= 64'hc91af975cd238400;
      246: out3 <= 64'hc78e9a1cfe849e00;
      247: out3 <= 64'hc6250a1786711a00;
      248: out3 <= 64'hc4df28619ae57400;
      249: out3 <= 64'hc3bdbdf612f23600;
      250: out3 <= 64'hc2c17d5273a44c00;
      251: out3 <= 64'hc1eb0208db9e5200;
      252: out3 <= 64'hc13ad0601146a000;
      253: out3 <= 64'hc0b15501eeb5d200;
      254: out3 <= 64'hc04ee4b85db5b400;
      255: out3 <= 64'hc013bc390d250400;
      256: out3 <= 64'h4000000000000000;
      257: out3 <= 64'h3fe12acb1ce35a00;
      258: out3 <= 64'h3f84c8e1c33fa600;
      259: out3 <= 64'h3eeb33474240ee00;
      260: out3 <= 64'h3e14fdf72461ae00;
      261: out3 <= 64'h3d02f75699a21a00;
      262: out3 <= 64'h3bb6276d99847800;
      263: out3 <= 64'h3a2fcee87c6bb800;
      264: out3 <= 64'h387165e3017b6200;
      265: out3 <= 64'h367c9a7deaae2400;
      266: out3 <= 64'h34534f408c4f0400;
      267: out3 <= 64'h31f79947df281a00;
      268: out3 <= 64'h2f6bbe44d55f5e00;
      269: out3 <= 64'h2cb2324be0f07a00;
      270: out3 <= 64'h29cd9577c7cbd200;
      271: out3 <= 64'h26c0b1620cb3e600;
      272: out3 <= 64'h238e76735cd19000;
      273: out3 <= 64'h2039f90e987d6e00;
      274: out3 <= 64'h1cc66e9931c45e00;
      275: out3 <= 64'h19372a63bc93d700;
      276: out3 <= 64'h158f9a75ab1fdd00;
      277: out3 <= 64'h11d3443f4cdb3e00;
      278: out3 <= 64'he05c1353f27b180;
      279: out3 <= 64'ha2abb58949f2d00;
      280: out3 <= 64'h645e9af0a6d0b00;
      281: out3 <= 64'h25b0caeb28ab9a0;
      282: out3 <= 64'hfe6deaa085c99820;
      283: out3 <= 64'hfa824bfd5956f9c0;
      284: out3 <= 64'hf69bf7c8b8cf6300;
      285: out3 <= 64'hf2beafed27fdd780;
      286: out3 <= 64'heeee2d9d4e098900;
      287: out3 <= 64'heb2e1dbd87189600;
      288: out3 <= 64'he7821d5951569d00;
      289: out3 <= 64'he3edb627fee11900;
      290: out3 <= 64'he0745b2407654600;
      291: out3 <= 64'hdd19653842496e00;
      292: out3 <= 64'hd9e010063d1f9600;
      293: out3 <= 64'hd6cb76c8c9ed8e00;
      294: out3 <= 64'hd3de9155c5a64200;
      295: out3 <= 64'hd11c3141f91b3e00;
      296: out3 <= 64'hce86ff29d5d17e00;
      297: out3 <= 64'hcc217821aca0d800;
      298: out3 <= 64'hc9edeb4fd5fc0000;
      299: out3 <= 64'hc7ee77b31b556e00;
      300: out3 <= 64'hc6250a1786711a00;
      301: out3 <= 64'hc4935b3b8ebeca00;
      302: out3 <= 64'hc33aee276e3ddc00;
      303: out3 <= 64'hc21d0eb837187c00;
      304: out3 <= 64'hc13ad0601146a000;
      305: out3 <= 64'hc0950d1cd4517e00;
      306: out3 <= 64'hc02c64a5fcef8c00;
      307: out3 <= 64'hc0013bd2c8da4a00;
      308: out3 <= 64'hc013bc390d250400;
      309: out3 <= 64'hc063d40524b30a00;
      310: out3 <= 64'hc0f1360b1d68ae00;
      311: out3 <= 64'hc1bb5a11138a4c00;
      312: out3 <= 64'hc2c17d5273a44c00;
      313: out3 <= 64'hc402a33ba483aa00;
      314: out3 <= 64'hc57d965d646d8c00;
      315: out3 <= 64'hc730e996ef18ca00;
      316: out3 <= 64'hc91af975cd238400;
      317: out3 <= 64'hcb39edc9fa0a3c00;
      318: out3 <= 64'hcd8bbb6cdb380a00;
      319: out3 <= 64'hd00e263951d11e00;
      320: out3 <= 64'h4000000000000000;
      321: out3 <= 64'h3fd39b5a03107400;
      322: out3 <= 64'h3f4eaafe114a2e00;
      323: out3 <= 64'h3e71e758c9cb1200;
      324: out3 <= 64'h3d3e82ad8c5bb400;
      325: out3 <= 64'h3bb6276d99847800;
      326: out3 <= 64'h39daf5e8798ee600;
      327: out3 <= 64'h37af8158df2a5400;
      328: out3 <= 64'h3536cc521d434600;
      329: out3 <= 64'h3274449324c7f600;
      330: out3 <= 64'h2f6bbe44d55f5e00;
      331: out3 <= 64'h2c216eaa3a59be00;
      332: out3 <= 64'h2899e64a123bac00;
      333: out3 <= 64'h24da0a99ba25be00;
      334: out3 <= 64'h20e70f3245ffdc00;
      335: out3 <= 64'h1cc66e9931c45e00;
      336: out3 <= 64'h187de2a6aea96300;
      337: out3 <= 64'h14135c9417660100;
      338: out3 <= 64'hf8cfcbd90af8d80;
      339: out3 <= 64'haf10a22459fe300;
      340: out3 <= 64'h645e9af0a6d0b00;
      341: out3 <= 64'h192155f7a3667e0;
      342: out3 <= 64'hfcdc1341de44fd80;
      343: out3 <= 64'hf82a6c6a55a33c80;
      344: out3 <= 64'hf383a3e1cb2cfa80;
      345: out3 <= 64'heeee2d9d4e098900;
      346: out3 <= 64'hea70658a54e02300;
      347: out3 <= 64'he61086bc57127600;
      348: out3 <= 64'he1d4a2c7f909c500;
      349: out3 <= 64'hddc29957c969ba00;
      350: out3 <= 64'hd9e010063d1f9600;
      351: out3 <= 64'hd6326a8838342e00;
      352: out3 <= 64'hd2bec33301886600;
      353: out3 <= 64'hcf89e3e800d12400;
      354: out3 <= 64'hcc983f7018f17e00;
      355: out3 <= 64'hc9edeb4fd5fc0000;
      356: out3 <= 64'hc78e9a1cfe849e00;
      357: out3 <= 64'hc57d965d646d8c00;
      358: out3 <= 64'hc3bdbdf612f23600;
      359: out3 <= 64'hc2517e312f6d3a00;
      360: out3 <= 64'hc13ad0601146a000;
      361: out3 <= 64'hc07b371e3cc05a00;
      362: out3 <= 64'hc013bc390d250400;
      363: out3 <= 64'hc004ef3ef665e600;
      364: out3 <= 64'hc04ee4b85db5b400;
      365: out3 <= 64'hc0f1360b1d68ae00;
      366: out3 <= 64'hc1eb0208db9e5200;
      367: out3 <= 64'hc33aee276e3ddc00;
      368: out3 <= 64'hc4df28619ae57400;
      369: out3 <= 64'hc6d569bd97dc1600;
      370: out3 <= 64'hc91af975cd238400;
      371: out3 <= 64'hcbacb0bf73b0fc00;
      372: out3 <= 64'hce86ff29d5d17e00;
      373: out3 <= 64'hd1a5ef902000d400;
      374: out3 <= 64'hd5052d96e626c000;
      375: out3 <= 64'hd8a00badbf5e8e00;
      376: out3 <= 64'hdc71898ca32e7000;
      377: out3 <= 64'he0745b2407654600;
      378: out3 <= 64'he4a2eff61ea34000;
      379: out3 <= 64'he8f77acf05ba6100;
      380: out3 <= 64'hed6bf9d12a60fa00;
      381: out3 <= 64'hf1fa3ecac0d84e80;
      382: out3 <= 64'hf69bf7c8b8cf6300;
      383: out3 <= 64'hfb4ab7db4c798280;
      384: out3 <= 64'h4000000000000000;
      385: out3 <= 64'h3fc395f97ab61200;
      386: out3 <= 64'h3f0ec9f4e2975200;
      387: out3 <= 64'h3de2f147c8e78400;
      388: out3 <= 64'h3c424209ed0dca00;
      389: out3 <= 64'h3a2fcee87c6bb800;
      390: out3 <= 64'h37af8158df2a5400;
      391: out3 <= 64'h34c6123605f5c400;
      392: out3 <= 64'h317900d62a2e8200;
      393: out3 <= 64'h2dce88a9d5515e00;
      394: out3 <= 64'h29cd9577c7cbd200;
      395: out3 <= 64'h257db64bf5e7d400;
      396: out3 <= 64'h20e70f3245ffdc00;
      397: out3 <= 64'h1c1249d8011ee700;
      398: out3 <= 64'h17088530fa459f00;
      399: out3 <= 64'h11d3443f4cdb3e00;
      400: out3 <= 64'hc7c5c1e34d30580;
      401: out3 <= 64'h70de171e7b0b540;
      402: out3 <= 64'h192155f7a3667e0;
      403: out3 <= 64'hfc135230c0fbe400;
      404: out3 <= 64'hf69bf7c8b8cf6300;
      405: out3 <= 64'hf136580d5d5e7780;
      406: out3 <= 64'hebeca36be899ff00;
      407: out3 <= 64'he6c8d59c436c2900;
      408: out3 <= 64'he1d4a2c7f909c500;
      409: out3 <= 64'hdd19653842496e00;
      410: out3 <= 64'hd8a00badbf5e8e00;
      411: out3 <= 64'hd471088335fce800;
      412: out3 <= 64'hd09441bb2aa0a200;
      413: out3 <= 64'hcd11021670517c00;
      414: out3 <= 64'hc9edeb4fd5fc0000;
      415: out3 <= 64'hc730e996ef18ca00;
      416: out3 <= 64'hc4df28619ae57400;
      417: out3 <= 64'hc2fd08a9665de600;
      418: out3 <= 64'hc18e18a73634ee00;
      419: out3 <= 64'hc0950d1cd4517e00;
      420: out3 <= 64'hc013bc390d250400;
      421: out3 <= 64'hc00b1a2002114600;
      422: out3 <= 64'hc07b371e3cc05a00;
      423: out3 <= 64'hc1633f89e9a1a600;
      424: out3 <= 64'hc2c17d5273a44c00;
      425: out3 <= 64'hc4935b3b8ebeca00;
      426: out3 <= 64'hc6d569bd97dc1600;
      427: out3 <= 64'hc98365821551dc00;
      428: out3 <= 64'hcc983f7018f17e00;
      429: out3 <= 64'hd00e263951d11e00;
      430: out3 <= 64'hd3de9155c5a64200;
      431: out3 <= 64'hd8024d5975525800;
      432: out3 <= 64'hdc71898ca32e7000;
      433: out3 <= 64'he123e6ad10872a00;
      434: out3 <= 64'he61086bc57127600;
      435: out3 <= 64'heb2e1dbd87189600;
      436: out3 <= 64'hf07303426f507280;
      437: out3 <= 64'hf5d544a76b60d300;
      438: out3 <= 64'hfb4ab7db4c798280;
      439: out3 <= 64'hc90e8fe6f63c20;
      440: out3 <= 64'h645e9af0a6d0b00;
      441: out3 <= 64'hbb6ecef285f9880;
      442: out3 <= 64'h1111d262b1f67700;
      443: out3 <= 64'h164c7ddd3f27c600;
      444: out3 <= 64'h1b5d1009e15cc000;
      445: out3 <= 64'h2039f90e987d6e00;
      446: out3 <= 64'h24da0a99ba25be00;
      447: out3 <= 64'h2934893736127200;
      448: out3 <= 64'h4000000000000000;
      449: out3 <= 64'h3fb11b47a24a4c00;
      450: out3 <= 64'h3ec52f9feeb96000;
      451: out3 <= 64'h3d3e82ad8c5bb400;
      452: out3 <= 64'h3b20d79e651a8c00;
      453: out3 <= 64'h387165e3017b6200;
      454: out3 <= 64'h3536cc521d434600;
      455: out3 <= 64'h317900d62a2e8200;
      456: out3 <= 64'h2d413cccfe779a00;
      457: out3 <= 64'h2899e64a123bac00;
      458: out3 <= 64'h238e76735cd19000;
      459: out3 <= 64'h1e2b5d3806f63b00;
      460: out3 <= 64'h187de2a6aea96300;
      461: out3 <= 64'h1294062ed59f0600;
      462: out3 <= 64'hc7c5c1e34d30580;
      463: out3 <= 64'h645e9af0a6d0b00;
      464: out3 <= 64'h0;
      465: out3 <= 64'hf9ba1650f592f500;
      466: out3 <= 64'hf383a3e1cb2cfa80;
      467: out3 <= 64'hed6bf9d12a60fa00;
      468: out3 <= 64'he7821d5951569d00;
      469: out3 <= 64'he1d4a2c7f909c500;
      470: out3 <= 64'hdc71898ca32e7000;
      471: out3 <= 64'hd76619b5edc45400;
      472: out3 <= 64'hd2bec33301886600;
      473: out3 <= 64'hce86ff29d5d17e00;
      474: out3 <= 64'hcac933ade2bcba00;
      475: out3 <= 64'hc78e9a1cfe849e00;
      476: out3 <= 64'hc4df28619ae57400;
      477: out3 <= 64'hc2c17d5273a44c00;
      478: out3 <= 64'hc13ad0601146a000;
      479: out3 <= 64'hc04ee4b85db5b400;
      480: out3 <= 64'hc000000000000000;
      481: out3 <= 64'hc04ee4b85db5b400;
      482: out3 <= 64'hc13ad0601146a000;
      483: out3 <= 64'hc2c17d5273a44c00;
      484: out3 <= 64'hc4df28619ae57400;
      485: out3 <= 64'hc78e9a1cfe849e00;
      486: out3 <= 64'hcac933ade2bcba00;
      487: out3 <= 64'hce86ff29d5d17e00;
      488: out3 <= 64'hd2bec33301886600;
      489: out3 <= 64'hd76619b5edc45400;
      490: out3 <= 64'hdc71898ca32e7000;
      491: out3 <= 64'he1d4a2c7f909c500;
      492: out3 <= 64'he7821d5951569d00;
      493: out3 <= 64'hed6bf9d12a60fa00;
      494: out3 <= 64'hf383a3e1cb2cfa80;
      495: out3 <= 64'hf9ba1650f592f500;
      496: out3 <= 64'h0;
      497: out3 <= 64'h645e9af0a6d0b00;
      498: out3 <= 64'hc7c5c1e34d30580;
      499: out3 <= 64'h1294062ed59f0600;
      500: out3 <= 64'h187de2a6aea96300;
      501: out3 <= 64'h1e2b5d3806f63b00;
      502: out3 <= 64'h238e76735cd19000;
      503: out3 <= 64'h2899e64a123bac00;
      504: out3 <= 64'h2d413cccfe779a00;
      505: out3 <= 64'h317900d62a2e8200;
      506: out3 <= 64'h3536cc521d434600;
      507: out3 <= 64'h387165e3017b6200;
      508: out3 <= 64'h3b20d79e651a8c00;
      509: out3 <= 64'h3d3e82ad8c5bb400;
      510: out3 <= 64'h3ec52f9feeb96000;
      511: out3 <= 64'h3fb11b47a24a4c00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_77277(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hff36f1701909c3e0;
      2: out3 <= 64'hfe6deaa085c99820;
      3: out3 <= 64'hfda4f3514d754660;
      4: out3 <= 64'hfcdc1341de44fd80;
      5: out3 <= 64'hfc135230c0fbe400;
      6: out3 <= 64'hfb4ab7db4c798280;
      7: out3 <= 64'hfa824bfd5956f9c0;
      8: out3 <= 64'hf9ba1650f592f500;
      9: out3 <= 64'hf8f21e8e184f4ac0;
      10: out3 <= 64'hf82a6c6a55a33c80;
      11: out3 <= 64'hf763079892854480;
      12: out3 <= 64'hf69bf7c8b8cf6300;
      13: out3 <= 64'hf5d544a76b60d300;
      14: out3 <= 64'hf50ef5ddba601d00;
      15: out3 <= 64'hf4491310d7a06780;
      16: out3 <= 64'hf383a3e1cb2cfa80;
      17: out3 <= 64'hf2beafed27fdd780;
      18: out3 <= 64'hf1fa3ecac0d84e80;
      19: out3 <= 64'hf136580d5d5e7780;
      20: out3 <= 64'hf07303426f507280;
      21: out3 <= 64'hefb047f1c8025200;
      22: out3 <= 64'heeee2d9d4e098900;
      23: out3 <= 64'hee2cbbc0b324c200;
      24: out3 <= 64'hed6bf9d12a60fa00;
      25: out3 <= 64'hecabef3d1e7eae00;
      26: out3 <= 64'hebeca36be899ff00;
      27: out3 <= 64'heb2e1dbd87189600;
      28: out3 <= 64'hea70658a54e02300;
      29: out3 <= 64'he9b38222c0d83a00;
      30: out3 <= 64'he8f77acf05ba6100;
      31: out3 <= 64'he83c56cee2331900;
      32: out3 <= 64'he7821d5951569d00;
      33: out3 <= 64'he6c8d59c436c2900;
      34: out3 <= 64'he61086bc57127600;
      35: out3 <= 64'he55937d492c03600;
      36: out3 <= 64'he4a2eff61ea34000;
      37: out3 <= 64'he3edb627fee11900;
      38: out3 <= 64'he3399166ce3ba200;
      39: out3 <= 64'he28688a4791c7700;
      40: out3 <= 64'he1d4a2c7f909c500;
      41: out3 <= 64'he123e6ad10872a00;
      42: out3 <= 64'he0745b2407654600;
      43: out3 <= 64'hdfc606f167829200;
      44: out3 <= 64'hdf18f0cdba002400;
      45: out3 <= 64'hde6d1f6544ece200;
      46: out3 <= 64'hddc29957c969ba00;
      47: out3 <= 64'hdd19653842496e00;
      48: out3 <= 64'hdc71898ca32e7000;
      49: out3 <= 64'hdbcb0ccd98294e00;
      50: out3 <= 64'hdb25f56645da4200;
      51: out3 <= 64'hda8249b40a182c00;
      52: out3 <= 64'hd9e010063d1f9600;
      53: out3 <= 64'hd93f4e9df34c1a00;
      54: out3 <= 64'hd8a00badbf5e8e00;
      55: out3 <= 64'hd8024d5975525800;
      56: out3 <= 64'hd76619b5edc45400;
      57: out3 <= 64'hd6cb76c8c9ed8e00;
      58: out3 <= 64'hd6326a8838342e00;
      59: out3 <= 64'hd59afadab954d400;
      60: out3 <= 64'hd5052d96e626c000;
      61: out3 <= 64'hd471088335fce800;
      62: out3 <= 64'hd3de9155c5a64200;
      63: out3 <= 64'hd34dcdb41f0f8600;
      64: out3 <= 64'h0;
      65: out3 <= 64'hfe6deaa085c99820;
      66: out3 <= 64'hfcdc1341de44fd80;
      67: out3 <= 64'hfb4ab7db4c798280;
      68: out3 <= 64'hf9ba1650f592f500;
      69: out3 <= 64'hf82a6c6a55a33c80;
      70: out3 <= 64'hf69bf7c8b8cf6300;
      71: out3 <= 64'hf50ef5ddba601d00;
      72: out3 <= 64'hf383a3e1cb2cfa80;
      73: out3 <= 64'hf1fa3ecac0d84e80;
      74: out3 <= 64'hf07303426f507280;
      75: out3 <= 64'heeee2d9d4e098900;
      76: out3 <= 64'hed6bf9d12a60fa00;
      77: out3 <= 64'hebeca36be899ff00;
      78: out3 <= 64'hea70658a54e02300;
      79: out3 <= 64'he8f77acf05ba6100;
      80: out3 <= 64'he7821d5951569d00;
      81: out3 <= 64'he61086bc57127600;
      82: out3 <= 64'he4a2eff61ea34000;
      83: out3 <= 64'he3399166ce3ba200;
      84: out3 <= 64'he1d4a2c7f909c500;
      85: out3 <= 64'he0745b2407654600;
      86: out3 <= 64'hdf18f0cdba002400;
      87: out3 <= 64'hddc29957c969ba00;
      88: out3 <= 64'hdc71898ca32e7000;
      89: out3 <= 64'hdb25f56645da4200;
      90: out3 <= 64'hd9e010063d1f9600;
      91: out3 <= 64'hd8a00badbf5e8e00;
      92: out3 <= 64'hd76619b5edc45400;
      93: out3 <= 64'hd6326a8838342e00;
      94: out3 <= 64'hd5052d96e626c000;
      95: out3 <= 64'hd3de9155c5a64200;
      96: out3 <= 64'hd2bec33301886600;
      97: out3 <= 64'hd1a5ef902000d400;
      98: out3 <= 64'hd09441bb2aa0a200;
      99: out3 <= 64'hcf89e3e800d12400;
      100: out3 <= 64'hce86ff29d5d17e00;
      101: out3 <= 64'hcd8bbb6cdb380a00;
      102: out3 <= 64'hcc983f7018f17e00;
      103: out3 <= 64'hcbacb0bf73b0fc00;
      104: out3 <= 64'hcac933ade2bcba00;
      105: out3 <= 64'hc9edeb4fd5fc0000;
      106: out3 <= 64'hc91af975cd238400;
      107: out3 <= 64'hc8507ea720d5ac00;
      108: out3 <= 64'hc78e9a1cfe849e00;
      109: out3 <= 64'hc6d569bd97dc1600;
      110: out3 <= 64'hc6250a1786711a00;
      111: out3 <= 64'hc57d965d646d8c00;
      112: out3 <= 64'hc4df28619ae57400;
      113: out3 <= 64'hc449d892667b8800;
      114: out3 <= 64'hc3bdbdf612f23600;
      115: out3 <= 64'hc33aee276e3ddc00;
      116: out3 <= 64'hc2c17d5273a44c00;
      117: out3 <= 64'hc2517e312f6d3a00;
      118: out3 <= 64'hc1eb0208db9e5200;
      119: out3 <= 64'hc18e18a73634ee00;
      120: out3 <= 64'hc13ad0601146a000;
      121: out3 <= 64'hc0f1360b1d68ae00;
      122: out3 <= 64'hc0b15501eeb5d200;
      123: out3 <= 64'hc07b371e3cc05a00;
      124: out3 <= 64'hc04ee4b85db5b400;
      125: out3 <= 64'hc02c64a5fcef8c00;
      126: out3 <= 64'hc013bc390d250400;
      127: out3 <= 64'hc004ef3ef665e600;
      128: out3 <= 64'h0;
      129: out3 <= 64'hfda4f3514d754660;
      130: out3 <= 64'hfb4ab7db4c798280;
      131: out3 <= 64'hf8f21e8e184f4ac0;
      132: out3 <= 64'hf69bf7c8b8cf6300;
      133: out3 <= 64'hf4491310d7a06780;
      134: out3 <= 64'hf1fa3ecac0d84e80;
      135: out3 <= 64'hefb047f1c8025200;
      136: out3 <= 64'hed6bf9d12a60fa00;
      137: out3 <= 64'heb2e1dbd87189600;
      138: out3 <= 64'he8f77acf05ba6100;
      139: out3 <= 64'he6c8d59c436c2900;
      140: out3 <= 64'he4a2eff61ea34000;
      141: out3 <= 64'he28688a4791c7700;
      142: out3 <= 64'he0745b2407654600;
      143: out3 <= 64'hde6d1f6544ece200;
      144: out3 <= 64'hdc71898ca32e7000;
      145: out3 <= 64'hda8249b40a182c00;
      146: out3 <= 64'hd8a00badbf5e8e00;
      147: out3 <= 64'hd6cb76c8c9ed8e00;
      148: out3 <= 64'hd5052d96e626c000;
      149: out3 <= 64'hd34dcdb41f0f8600;
      150: out3 <= 64'hd1a5ef902000d400;
      151: out3 <= 64'hd00e263951d11e00;
      152: out3 <= 64'hce86ff29d5d17e00;
      153: out3 <= 64'hcd11021670517c00;
      154: out3 <= 64'hcbacb0bf73b0fc00;
      155: out3 <= 64'hca5a86c3bc55de00;
      156: out3 <= 64'hc91af975cd238400;
      157: out3 <= 64'hc7ee77b31b556e00;
      158: out3 <= 64'hc6d569bd97dc1600;
      159: out3 <= 64'hc5d0311783944800;
      160: out3 <= 64'hc4df28619ae57400;
      161: out3 <= 64'hc402a33ba483aa00;
      162: out3 <= 64'hc33aee276e3ddc00;
      163: out3 <= 64'hc2884e6e41e91800;
      164: out3 <= 64'hc1eb0208db9e5200;
      165: out3 <= 64'hc1633f89e9a1a600;
      166: out3 <= 64'hc0f1360b1d68ae00;
      167: out3 <= 64'hc0950d1cd4517e00;
      168: out3 <= 64'hc04ee4b85db5b400;
      169: out3 <= 64'hc01ed534e31ca600;
      170: out3 <= 64'hc004ef3ef665e600;
      171: out3 <= 64'hc0013bd2c8da4a00;
      172: out3 <= 64'hc013bc390d250400;
      173: out3 <= 64'hc03c6a068549ee00;
      174: out3 <= 64'hc07b371e3cc05a00;
      175: out3 <= 64'hc0d00db66decca00;
      176: out3 <= 64'hc13ad0601146a000;
      177: out3 <= 64'hc1bb5a11138a4c00;
      178: out3 <= 64'hc2517e312f6d3a00;
      179: out3 <= 64'hc2fd08a9665de600;
      180: out3 <= 64'hc3bdbdf612f23600;
      181: out3 <= 64'hc4935b3b8ebeca00;
      182: out3 <= 64'hc57d965d646d8c00;
      183: out3 <= 64'hc67c1e1806074800;
      184: out3 <= 64'hc78e9a1cfe849e00;
      185: out3 <= 64'hc8b4ab3194de5c00;
      186: out3 <= 64'hc9edeb4fd5fc0000;
      187: out3 <= 64'hcb39edc9fa0a3c00;
      188: out3 <= 64'hcc983f7018f17e00;
      189: out3 <= 64'hce0866b820d7e600;
      190: out3 <= 64'hcf89e3e800d12400;
      191: out3 <= 64'hd11c3141f91b3e00;
      192: out3 <= 64'h0;
      193: out3 <= 64'hfcdc1341de44fd80;
      194: out3 <= 64'hf9ba1650f592f500;
      195: out3 <= 64'hf69bf7c8b8cf6300;
      196: out3 <= 64'hf383a3e1cb2cfa80;
      197: out3 <= 64'hf07303426f507280;
      198: out3 <= 64'hed6bf9d12a60fa00;
      199: out3 <= 64'hea70658a54e02300;
      200: out3 <= 64'he7821d5951569d00;
      201: out3 <= 64'he4a2eff61ea34000;
      202: out3 <= 64'he1d4a2c7f909c500;
      203: out3 <= 64'hdf18f0cdba002400;
      204: out3 <= 64'hdc71898ca32e7000;
      205: out3 <= 64'hd9e010063d1f9600;
      206: out3 <= 64'hd76619b5edc45400;
      207: out3 <= 64'hd5052d96e626c000;
      208: out3 <= 64'hd2bec33301886600;
      209: out3 <= 64'hd09441bb2aa0a200;
      210: out3 <= 64'hce86ff29d5d17e00;
      211: out3 <= 64'hcc983f7018f17e00;
      212: out3 <= 64'hcac933ade2bcba00;
      213: out3 <= 64'hc91af975cd238400;
      214: out3 <= 64'hc78e9a1cfe849e00;
      215: out3 <= 64'hc6250a1786711a00;
      216: out3 <= 64'hc4df28619ae57400;
      217: out3 <= 64'hc3bdbdf612f23600;
      218: out3 <= 64'hc2c17d5273a44c00;
      219: out3 <= 64'hc1eb0208db9e5200;
      220: out3 <= 64'hc13ad0601146a000;
      221: out3 <= 64'hc0b15501eeb5d200;
      222: out3 <= 64'hc04ee4b85db5b400;
      223: out3 <= 64'hc013bc390d250400;
      224: out3 <= 64'hc000000000000000;
      225: out3 <= 64'hc013bc390d250400;
      226: out3 <= 64'hc04ee4b85db5b400;
      227: out3 <= 64'hc0b15501eeb5d200;
      228: out3 <= 64'hc13ad0601146a000;
      229: out3 <= 64'hc1eb0208db9e5200;
      230: out3 <= 64'hc2c17d5273a44c00;
      231: out3 <= 64'hc3bdbdf612f23600;
      232: out3 <= 64'hc4df28619ae57400;
      233: out3 <= 64'hc6250a1786711a00;
      234: out3 <= 64'hc78e9a1cfe849e00;
      235: out3 <= 64'hc91af975cd238400;
      236: out3 <= 64'hcac933ade2bcba00;
      237: out3 <= 64'hcc983f7018f17e00;
      238: out3 <= 64'hce86ff29d5d17e00;
      239: out3 <= 64'hd09441bb2aa0a200;
      240: out3 <= 64'hd2bec33301886600;
      241: out3 <= 64'hd5052d96e626c000;
      242: out3 <= 64'hd76619b5edc45400;
      243: out3 <= 64'hd9e010063d1f9600;
      244: out3 <= 64'hdc71898ca32e7000;
      245: out3 <= 64'hdf18f0cdba002400;
      246: out3 <= 64'he1d4a2c7f909c500;
      247: out3 <= 64'he4a2eff61ea34000;
      248: out3 <= 64'he7821d5951569d00;
      249: out3 <= 64'hea70658a54e02300;
      250: out3 <= 64'hed6bf9d12a60fa00;
      251: out3 <= 64'hf07303426f507280;
      252: out3 <= 64'hf383a3e1cb2cfa80;
      253: out3 <= 64'hf69bf7c8b8cf6300;
      254: out3 <= 64'hf9ba1650f592f500;
      255: out3 <= 64'hfcdc1341de44fd80;
      256: out3 <= 64'h0;
      257: out3 <= 64'hfc135230c0fbe400;
      258: out3 <= 64'hf82a6c6a55a33c80;
      259: out3 <= 64'hf4491310d7a06780;
      260: out3 <= 64'hf07303426f507280;
      261: out3 <= 64'hecabef3d1e7eae00;
      262: out3 <= 64'he8f77acf05ba6100;
      263: out3 <= 64'he55937d492c03600;
      264: out3 <= 64'he1d4a2c7f909c500;
      265: out3 <= 64'hde6d1f6544ece200;
      266: out3 <= 64'hdb25f56645da4200;
      267: out3 <= 64'hd8024d5975525800;
      268: out3 <= 64'hd5052d96e626c000;
      269: out3 <= 64'hd23177562aaea200;
      270: out3 <= 64'hcf89e3e800d12400;
      271: out3 <= 64'hcd11021670517c00;
      272: out3 <= 64'hcac933ade2bcba00;
      273: out3 <= 64'hc8b4ab3194de5c00;
      274: out3 <= 64'hc6d569bd97dc1600;
      275: out3 <= 64'hc52d3d186c32ea00;
      276: out3 <= 64'hc3bdbdf612f23600;
      277: out3 <= 64'hc2884e6e41e91800;
      278: out3 <= 64'hc18e18a73634ee00;
      279: out3 <= 64'hc0d00db66decca00;
      280: out3 <= 64'hc04ee4b85db5b400;
      281: out3 <= 64'hc00b1a2002114600;
      282: out3 <= 64'hc004ef3ef665e600;
      283: out3 <= 64'hc03c6a068549ee00;
      284: out3 <= 64'hc0b15501eeb5d200;
      285: out3 <= 64'hc1633f89e9a1a600;
      286: out3 <= 64'hc2517e312f6d3a00;
      287: out3 <= 64'hc37b2b69a87d0400;
      288: out3 <= 64'hc4df28619ae57400;
      289: out3 <= 64'hc67c1e1806074800;
      290: out3 <= 64'hc8507ea720d5ac00;
      291: out3 <= 64'hca5a86c3bc55de00;
      292: out3 <= 64'hcc983f7018f17e00;
      293: out3 <= 64'hcf077fe08ba28200;
      294: out3 <= 64'hd1a5ef902000d400;
      295: out3 <= 64'hd471088335fce800;
      296: out3 <= 64'hd76619b5edc45400;
      297: out3 <= 64'hda8249b40a182c00;
      298: out3 <= 64'hddc29957c969ba00;
      299: out3 <= 64'he123e6ad10872a00;
      300: out3 <= 64'he4a2eff61ea34000;
      301: out3 <= 64'he83c56cee2331900;
      302: out3 <= 64'hebeca36be899ff00;
      303: out3 <= 64'hefb047f1c8025200;
      304: out3 <= 64'hf383a3e1cb2cfa80;
      305: out3 <= 64'hf763079892854480;
      306: out3 <= 64'hfb4ab7db4c798280;
      307: out3 <= 64'hff36f1701909c3e0;
      308: out3 <= 64'h323ecbe21bb0280;
      309: out3 <= 64'h70de171e7b0b540;
      310: out3 <= 64'haf10a22459fe300;
      311: out3 <= 64'hec9a7f2a2a18880;
      312: out3 <= 64'h1294062ed59f0600;
      313: out3 <= 64'h164c7ddd3f27c600;
      314: out3 <= 64'h19ef7943a8ed8a00;
      315: out3 <= 64'h1d79775b86e38900;
      316: out3 <= 64'h20e70f3245ffdc00;
      317: out3 <= 64'h2434f33267d6b200;
      318: out3 <= 64'h275ff45240a17200;
      319: out3 <= 64'h2a65052546ab2c00;
      320: out3 <= 64'h0;
      321: out3 <= 64'hfb4ab7db4c798280;
      322: out3 <= 64'hf69bf7c8b8cf6300;
      323: out3 <= 64'hf1fa3ecac0d84e80;
      324: out3 <= 64'hed6bf9d12a60fa00;
      325: out3 <= 64'he8f77acf05ba6100;
      326: out3 <= 64'he4a2eff61ea34000;
      327: out3 <= 64'he0745b2407654600;
      328: out3 <= 64'hdc71898ca32e7000;
      329: out3 <= 64'hd8a00badbf5e8e00;
      330: out3 <= 64'hd5052d96e626c000;
      331: out3 <= 64'hd1a5ef902000d400;
      332: out3 <= 64'hce86ff29d5d17e00;
      333: out3 <= 64'hcbacb0bf73b0fc00;
      334: out3 <= 64'hc91af975cd238400;
      335: out3 <= 64'hc6d569bd97dc1600;
      336: out3 <= 64'hc4df28619ae57400;
      337: out3 <= 64'hc33aee276e3ddc00;
      338: out3 <= 64'hc1eb0208db9e5200;
      339: out3 <= 64'hc0f1360b1d68ae00;
      340: out3 <= 64'hc04ee4b85db5b400;
      341: out3 <= 64'hc004ef3ef665e600;
      342: out3 <= 64'hc013bc390d250400;
      343: out3 <= 64'hc07b371e3cc05a00;
      344: out3 <= 64'hc13ad0601146a000;
      345: out3 <= 64'hc2517e312f6d3a00;
      346: out3 <= 64'hc3bdbdf612f23600;
      347: out3 <= 64'hc57d965d646d8c00;
      348: out3 <= 64'hc78e9a1cfe849e00;
      349: out3 <= 64'hc9edeb4fd5fc0000;
      350: out3 <= 64'hcc983f7018f17e00;
      351: out3 <= 64'hcf89e3e800d12400;
      352: out3 <= 64'hd2bec33301886600;
      353: out3 <= 64'hd6326a8838342e00;
      354: out3 <= 64'hd9e010063d1f9600;
      355: out3 <= 64'hddc29957c969ba00;
      356: out3 <= 64'he1d4a2c7f909c500;
      357: out3 <= 64'he61086bc57127600;
      358: out3 <= 64'hea70658a54e02300;
      359: out3 <= 64'heeee2d9d4e098900;
      360: out3 <= 64'hf383a3e1cb2cfa80;
      361: out3 <= 64'hf82a6c6a55a33c80;
      362: out3 <= 64'hfcdc1341de44fd80;
      363: out3 <= 64'h192155f7a3667e0;
      364: out3 <= 64'h645e9af0a6d0b00;
      365: out3 <= 64'haf10a22459fe300;
      366: out3 <= 64'hf8cfcbd90af8d80;
      367: out3 <= 64'h14135c9417660100;
      368: out3 <= 64'h187de2a6aea96300;
      369: out3 <= 64'h1cc66e9931c45e00;
      370: out3 <= 64'h20e70f3245ffdc00;
      371: out3 <= 64'h24da0a99ba25be00;
      372: out3 <= 64'h2899e64a123bac00;
      373: out3 <= 64'h2c216eaa3a59be00;
      374: out3 <= 64'h2f6bbe44d55f5e00;
      375: out3 <= 64'h3274449324c7f600;
      376: out3 <= 64'h3536cc521d434600;
      377: out3 <= 64'h37af8158df2a5400;
      378: out3 <= 64'h39daf5e8798ee600;
      379: out3 <= 64'h3bb6276d99847800;
      380: out3 <= 64'h3d3e82ad8c5bb400;
      381: out3 <= 64'h3e71e758c9cb1200;
      382: out3 <= 64'h3f4eaafe114a2e00;
      383: out3 <= 64'h3fd39b5a03107400;
      384: out3 <= 64'h0;
      385: out3 <= 64'hfa824bfd5956f9c0;
      386: out3 <= 64'hf50ef5ddba601d00;
      387: out3 <= 64'hefb047f1c8025200;
      388: out3 <= 64'hea70658a54e02300;
      389: out3 <= 64'he55937d492c03600;
      390: out3 <= 64'he0745b2407654600;
      391: out3 <= 64'hdbcb0ccd98294e00;
      392: out3 <= 64'hd76619b5edc45400;
      393: out3 <= 64'hd34dcdb41f0f8600;
      394: out3 <= 64'hcf89e3e800d12400;
      395: out3 <= 64'hcc217821aca0d800;
      396: out3 <= 64'hc91af975cd238400;
      397: out3 <= 64'hc67c1e1806074800;
      398: out3 <= 64'hc449d892667b8800;
      399: out3 <= 64'hc2884e6e41e91800;
      400: out3 <= 64'hc13ad0601146a000;
      401: out3 <= 64'hc063d40524b30a00;
      402: out3 <= 64'hc004ef3ef665e600;
      403: out3 <= 64'hc01ed534e31ca600;
      404: out3 <= 64'hc0b15501eeb5d200;
      405: out3 <= 64'hc1bb5a11138a4c00;
      406: out3 <= 64'hc33aee276e3ddc00;
      407: out3 <= 64'hc52d3d186c32ea00;
      408: out3 <= 64'hc78e9a1cfe849e00;
      409: out3 <= 64'hca5a86c3bc55de00;
      410: out3 <= 64'hcd8bbb6cdb380a00;
      411: out3 <= 64'hd11c3141f91b3e00;
      412: out3 <= 64'hd5052d96e626c000;
      413: out3 <= 64'hd93f4e9df34c1a00;
      414: out3 <= 64'hddc29957c969ba00;
      415: out3 <= 64'he28688a4791c7700;
      416: out3 <= 64'he7821d5951569d00;
      417: out3 <= 64'hecabef3d1e7eae00;
      418: out3 <= 64'hf1fa3ecac0d84e80;
      419: out3 <= 64'hf763079892854480;
      420: out3 <= 64'hfcdc1341de44fd80;
      421: out3 <= 64'h25b0caeb28ab9a0;
      422: out3 <= 64'h7d59395aa5cc380;
      423: out3 <= 64'hd415012d8022880;
      424: out3 <= 64'h1294062ed59f0600;
      425: out3 <= 64'h17c3a9311dcce700;
      426: out3 <= 64'h1cc66e9931c45e00;
      427: out3 <= 64'h2192e09abb131e00;
      428: out3 <= 64'h261feff9c2e06a00;
      429: out3 <= 64'h2a65052546ab2c00;
      430: out3 <= 64'h2e5a106fdfff2c00;
      431: out3 <= 64'h31f79947df281a00;
      432: out3 <= 64'h3536cc521d434600;
      433: out3 <= 64'h3811884ce4aa9200;
      434: out3 <= 64'h3a8269a29b927400;
      435: out3 <= 64'h3c84d4965782fc00;
      436: out3 <= 64'h3e14fdf72461ae00;
      437: out3 <= 64'h3f2ff24992133600;
      438: out3 <= 64'h3fd39b5a03107400;
      439: out3 <= 64'h3ffec42d3725b600;
      440: out3 <= 64'h3fb11b47a24a4c00;
      441: out3 <= 64'h3eeb33474240ee00;
      442: out3 <= 64'h3dae81ced092c600;
      443: out3 <= 64'h3bfd5cc45b7c5600;
      444: out3 <= 64'h39daf5e8798ee600;
      445: out3 <= 64'h374b54ce6b21a400;
      446: out3 <= 64'h34534f408c4f0400;
      447: out3 <= 64'h30f8801f745d7e00;
      448: out3 <= 64'h0;
      449: out3 <= 64'hf9ba1650f592f500;
      450: out3 <= 64'hf383a3e1cb2cfa80;
      451: out3 <= 64'hed6bf9d12a60fa00;
      452: out3 <= 64'he7821d5951569d00;
      453: out3 <= 64'he1d4a2c7f909c500;
      454: out3 <= 64'hdc71898ca32e7000;
      455: out3 <= 64'hd76619b5edc45400;
      456: out3 <= 64'hd2bec33301886600;
      457: out3 <= 64'hce86ff29d5d17e00;
      458: out3 <= 64'hcac933ade2bcba00;
      459: out3 <= 64'hc78e9a1cfe849e00;
      460: out3 <= 64'hc4df28619ae57400;
      461: out3 <= 64'hc2c17d5273a44c00;
      462: out3 <= 64'hc13ad0601146a000;
      463: out3 <= 64'hc04ee4b85db5b400;
      464: out3 <= 64'hc000000000000000;
      465: out3 <= 64'hc04ee4b85db5b400;
      466: out3 <= 64'hc13ad0601146a000;
      467: out3 <= 64'hc2c17d5273a44c00;
      468: out3 <= 64'hc4df28619ae57400;
      469: out3 <= 64'hc78e9a1cfe849e00;
      470: out3 <= 64'hcac933ade2bcba00;
      471: out3 <= 64'hce86ff29d5d17e00;
      472: out3 <= 64'hd2bec33301886600;
      473: out3 <= 64'hd76619b5edc45400;
      474: out3 <= 64'hdc71898ca32e7000;
      475: out3 <= 64'he1d4a2c7f909c500;
      476: out3 <= 64'he7821d5951569d00;
      477: out3 <= 64'hed6bf9d12a60fa00;
      478: out3 <= 64'hf383a3e1cb2cfa80;
      479: out3 <= 64'hf9ba1650f592f500;
      480: out3 <= 64'h0;
      481: out3 <= 64'h645e9af0a6d0b00;
      482: out3 <= 64'hc7c5c1e34d30580;
      483: out3 <= 64'h1294062ed59f0600;
      484: out3 <= 64'h187de2a6aea96300;
      485: out3 <= 64'h1e2b5d3806f63b00;
      486: out3 <= 64'h238e76735cd19000;
      487: out3 <= 64'h2899e64a123bac00;
      488: out3 <= 64'h2d413cccfe779a00;
      489: out3 <= 64'h317900d62a2e8200;
      490: out3 <= 64'h3536cc521d434600;
      491: out3 <= 64'h387165e3017b6200;
      492: out3 <= 64'h3b20d79e651a8c00;
      493: out3 <= 64'h3d3e82ad8c5bb400;
      494: out3 <= 64'h3ec52f9feeb96000;
      495: out3 <= 64'h3fb11b47a24a4c00;
      496: out3 <= 64'h4000000000000000;
      497: out3 <= 64'h3fb11b47a24a4c00;
      498: out3 <= 64'h3ec52f9feeb96000;
      499: out3 <= 64'h3d3e82ad8c5bb400;
      500: out3 <= 64'h3b20d79e651a8c00;
      501: out3 <= 64'h387165e3017b6200;
      502: out3 <= 64'h3536cc521d434600;
      503: out3 <= 64'h317900d62a2e8200;
      504: out3 <= 64'h2d413cccfe779a00;
      505: out3 <= 64'h2899e64a123bac00;
      506: out3 <= 64'h238e76735cd19000;
      507: out3 <= 64'h1e2b5d3806f63b00;
      508: out3 <= 64'h187de2a6aea96300;
      509: out3 <= 64'h1294062ed59f0600;
      510: out3 <= 64'hc7c5c1e34d30580;
      511: out3 <= 64'h645e9af0a6d0b00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 16
// Gap: 1
module codeBlock75466(clk, reset, next_in, next_out,
   i2_in,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i2_in;
   reg [5:0] i2;
   input [2:0] i1_in;
   reg [2:0] i1;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(15, 1) shiftFIFO_79481(.X(next), .Y(next_out), .clk(clk));


   wire  [8:0] a385;
   wire signed [63:0] a460;
   wire signed [63:0] a461;
   wire signed [63:0] a464;
   wire signed [63:0] a465;
   wire signed [63:0] a468;
   wire signed [63:0] a469;
   wire signed [63:0] a472;
   wire signed [63:0] a473;
   wire signed [63:0] a476;
   wire signed [63:0] a477;
   wire signed [63:0] a480;
   wire signed [63:0] a481;
   wire signed [63:0] a484;
   wire signed [63:0] a485;
   wire  [9:0] a387;
   wire  [9:0] a400;
   wire  [9:0] a410;
   wire  [9:0] a420;
   wire  [9:0] a430;
   wire  [9:0] a440;
   wire  [9:0] a450;
   reg signed [63:0] tm65;
   reg signed [63:0] tm73;
   reg signed [63:0] tm98;
   reg signed [63:0] tm106;
   reg signed [63:0] tm131;
   reg signed [63:0] tm139;
   reg signed [63:0] tm164;
   reg signed [63:0] tm172;
   reg signed [63:0] tm197;
   reg signed [63:0] tm205;
   reg signed [63:0] tm230;
   reg signed [63:0] tm238;
   reg signed [63:0] tm263;
   reg signed [63:0] tm271;
   reg signed [63:0] tm295;
   reg signed [63:0] tm310;
   wire  [4:0] a388;
   wire  [5:0] a389;
   wire  [8:0] a390;
   reg  [9:0] tm64;
   reg signed [63:0] tm66;
   reg signed [63:0] tm74;
   reg  [9:0] tm97;
   reg signed [63:0] tm99;
   reg signed [63:0] tm107;
   reg  [9:0] tm130;
   reg signed [63:0] tm132;
   reg signed [63:0] tm140;
   reg  [9:0] tm163;
   reg signed [63:0] tm165;
   reg signed [63:0] tm173;
   reg  [9:0] tm196;
   reg signed [63:0] tm198;
   reg signed [63:0] tm206;
   reg  [9:0] tm229;
   reg signed [63:0] tm231;
   reg signed [63:0] tm239;
   reg  [9:0] tm262;
   reg signed [63:0] tm264;
   reg signed [63:0] tm272;
   reg signed [63:0] tm296;
   reg signed [63:0] tm311;
   reg  [9:0] a391;
   wire  [8:0] a392;
   reg  [9:0] a401;
   wire  [8:0] a402;
   reg  [9:0] a411;
   wire  [8:0] a412;
   reg  [9:0] a421;
   wire  [8:0] a422;
   reg  [9:0] a431;
   wire  [8:0] a432;
   reg  [9:0] a441;
   wire  [8:0] a442;
   reg  [9:0] a451;
   wire  [8:0] a452;
   reg signed [63:0] tm67;
   reg signed [63:0] tm75;
   reg signed [63:0] tm100;
   reg signed [63:0] tm108;
   reg signed [63:0] tm133;
   reg signed [63:0] tm141;
   reg signed [63:0] tm166;
   reg signed [63:0] tm174;
   reg signed [63:0] tm199;
   reg signed [63:0] tm207;
   reg signed [63:0] tm232;
   reg signed [63:0] tm240;
   reg signed [63:0] tm265;
   reg signed [63:0] tm273;
   reg signed [63:0] tm297;
   reg signed [63:0] tm312;
   wire  [9:0] a393;
   wire  [9:0] a403;
   wire  [9:0] a413;
   wire  [9:0] a423;
   wire  [9:0] a433;
   wire  [9:0] a443;
   wire  [9:0] a453;
   reg signed [63:0] tm68;
   reg signed [63:0] tm76;
   reg signed [63:0] tm101;
   reg signed [63:0] tm109;
   reg signed [63:0] tm134;
   reg signed [63:0] tm142;
   reg signed [63:0] tm167;
   reg signed [63:0] tm175;
   reg signed [63:0] tm200;
   reg signed [63:0] tm208;
   reg signed [63:0] tm233;
   reg signed [63:0] tm241;
   reg signed [63:0] tm266;
   reg signed [63:0] tm274;
   reg signed [63:0] tm298;
   reg signed [63:0] tm313;
   reg signed [63:0] tm69;
   reg signed [63:0] tm77;
   reg signed [63:0] tm102;
   reg signed [63:0] tm110;
   reg signed [63:0] tm135;
   reg signed [63:0] tm143;
   reg signed [63:0] tm168;
   reg signed [63:0] tm176;
   reg signed [63:0] tm201;
   reg signed [63:0] tm209;
   reg signed [63:0] tm234;
   reg signed [63:0] tm242;
   reg signed [63:0] tm267;
   reg signed [63:0] tm275;
   reg signed [63:0] tm299;
   reg signed [63:0] tm314;
   reg signed [63:0] tm70;
   reg signed [63:0] tm78;
   reg signed [63:0] tm103;
   reg signed [63:0] tm111;
   reg signed [63:0] tm136;
   reg signed [63:0] tm144;
   reg signed [63:0] tm169;
   reg signed [63:0] tm177;
   reg signed [63:0] tm202;
   reg signed [63:0] tm210;
   reg signed [63:0] tm235;
   reg signed [63:0] tm243;
   reg signed [63:0] tm268;
   reg signed [63:0] tm276;
   reg signed [63:0] tm300;
   reg signed [63:0] tm315;
   wire signed [63:0] tm6;
   wire signed [63:0] a394;
   wire signed [63:0] tm7;
   wire signed [63:0] a396;
   wire signed [63:0] tm10;
   wire signed [63:0] a404;
   wire signed [63:0] tm11;
   wire signed [63:0] a406;
   wire signed [63:0] tm14;
   wire signed [63:0] a414;
   wire signed [63:0] tm15;
   wire signed [63:0] a416;
   wire signed [63:0] tm18;
   wire signed [63:0] a424;
   wire signed [63:0] tm19;
   wire signed [63:0] a426;
   wire signed [63:0] tm22;
   wire signed [63:0] a434;
   wire signed [63:0] tm23;
   wire signed [63:0] a436;
   wire signed [63:0] tm26;
   wire signed [63:0] a444;
   wire signed [63:0] tm27;
   wire signed [63:0] a446;
   wire signed [63:0] tm30;
   wire signed [63:0] a454;
   wire signed [63:0] tm31;
   wire signed [63:0] a456;
   reg signed [63:0] tm71;
   reg signed [63:0] tm79;
   reg signed [63:0] tm104;
   reg signed [63:0] tm112;
   reg signed [63:0] tm137;
   reg signed [63:0] tm145;
   reg signed [63:0] tm170;
   reg signed [63:0] tm178;
   reg signed [63:0] tm203;
   reg signed [63:0] tm211;
   reg signed [63:0] tm236;
   reg signed [63:0] tm244;
   reg signed [63:0] tm269;
   reg signed [63:0] tm277;
   reg signed [63:0] tm301;
   reg signed [63:0] tm316;
   reg signed [63:0] tm36;
   reg signed [63:0] tm37;
   reg signed [63:0] tm40;
   reg signed [63:0] tm41;
   reg signed [63:0] tm44;
   reg signed [63:0] tm45;
   reg signed [63:0] tm48;
   reg signed [63:0] tm49;
   reg signed [63:0] tm52;
   reg signed [63:0] tm53;
   reg signed [63:0] tm56;
   reg signed [63:0] tm57;
   reg signed [63:0] tm60;
   reg signed [63:0] tm61;
   reg signed [63:0] tm72;
   reg signed [63:0] tm80;
   reg signed [63:0] tm105;
   reg signed [63:0] tm113;
   reg signed [63:0] tm138;
   reg signed [63:0] tm146;
   reg signed [63:0] tm171;
   reg signed [63:0] tm179;
   reg signed [63:0] tm204;
   reg signed [63:0] tm212;
   reg signed [63:0] tm237;
   reg signed [63:0] tm245;
   reg signed [63:0] tm270;
   reg signed [63:0] tm278;
   reg signed [63:0] tm302;
   reg signed [63:0] tm317;
   reg signed [63:0] tm303;
   reg signed [63:0] tm318;
   reg signed [63:0] tm304;
   reg signed [63:0] tm319;
   reg signed [63:0] tm305;
   reg signed [63:0] tm320;
   reg signed [63:0] tm306;
   reg signed [63:0] tm321;
   reg signed [63:0] tm307;
   reg signed [63:0] tm322;
   wire signed [63:0] a395;
   wire signed [63:0] a397;
   wire signed [63:0] a398;
   wire signed [63:0] a399;
   wire signed [63:0] a405;
   wire signed [63:0] a407;
   wire signed [63:0] a408;
   wire signed [63:0] a409;
   wire signed [63:0] a415;
   wire signed [63:0] a417;
   wire signed [63:0] a418;
   wire signed [63:0] a419;
   wire signed [63:0] a425;
   wire signed [63:0] a427;
   wire signed [63:0] a428;
   wire signed [63:0] a429;
   wire signed [63:0] a435;
   wire signed [63:0] a437;
   wire signed [63:0] a438;
   wire signed [63:0] a439;
   wire signed [63:0] a445;
   wire signed [63:0] a447;
   wire signed [63:0] a448;
   wire signed [63:0] a449;
   wire signed [63:0] a455;
   wire signed [63:0] a457;
   wire signed [63:0] a458;
   wire signed [63:0] a459;
   reg signed [63:0] tm308;
   reg signed [63:0] tm323;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm309;
   reg signed [63:0] tm324;

   wire [0:0] tm1;
   assign tm1 = 1'h1;
   wire [4:0] tm2;
   assign tm2 = 5'h3;
   wire [5:0] tm3;
   assign tm3 = 6'h3f;
   wire [2:0] tm4;
   assign tm4 = 3'h7;
   wire [6:0] tm5;
   assign tm5 = 7'h40;
   wire [1:0] tm8;
   assign tm8 = 2'h2;
   wire [1:0] tm12;
   assign tm12 = 2'h3;
   wire [2:0] tm16;
   assign tm16 = 3'h4;
   wire [2:0] tm20;
   assign tm20 = 3'h5;
   wire [2:0] tm24;
   assign tm24 = 3'h6;

   assign a385 = i2 << 3;
   assign a460 = X2;
   assign a461 = X3;
   assign a464 = X4;
   assign a465 = X5;
   assign a468 = X6;
   assign a469 = X7;
   assign a472 = X8;
   assign a473 = X9;
   assign a476 = X10;
   assign a477 = X11;
   assign a480 = X12;
   assign a481 = X13;
   assign a484 = X14;
   assign a485 = X15;
   assign a389 = tm3 << a388;
   assign a390 = {a389, tm4[2:0]};
   assign a392 = {a391[2:0], a391[8:3]};
   assign a402 = {a401[2:0], a401[8:3]};
   assign a412 = {a411[2:0], a411[8:3]};
   assign a422 = {a421[2:0], a421[8:3]};
   assign a432 = {a431[2:0], a431[8:3]};
   assign a442 = {a441[2:0], a441[8:3]};
   assign a452 = {a451[2:0], a451[8:3]};
   assign a394 = tm6;
   assign a396 = tm7;
   assign a404 = tm10;
   assign a406 = tm11;
   assign a414 = tm14;
   assign a416 = tm15;
   assign a424 = tm18;
   assign a426 = tm19;
   assign a434 = tm22;
   assign a436 = tm23;
   assign a444 = tm26;
   assign a446 = tm27;
   assign a454 = tm30;
   assign a456 = tm31;
   assign Y0 = tm309;
   assign Y1 = tm324;

   D5_76763 instD5inst0_76763(.addr(a393[8:0]), .out(tm6), .clk(clk));

   D5_76763 instD5inst1_76763(.addr(a403[8:0]), .out(tm10), .clk(clk));

   D5_76763 instD5inst2_76763(.addr(a413[8:0]), .out(tm14), .clk(clk));

   D5_76763 instD5inst3_76763(.addr(a423[8:0]), .out(tm18), .clk(clk));

   D5_76763 instD5inst4_76763(.addr(a433[8:0]), .out(tm22), .clk(clk));

   D5_76763 instD5inst5_76763(.addr(a443[8:0]), .out(tm26), .clk(clk));

   D5_76763 instD5inst6_76763(.addr(a453[8:0]), .out(tm30), .clk(clk));

   D6_77277 instD6inst0_77277(.addr(a393[8:0]), .out(tm7), .clk(clk));

   D6_77277 instD6inst1_77277(.addr(a403[8:0]), .out(tm11), .clk(clk));

   D6_77277 instD6inst2_77277(.addr(a413[8:0]), .out(tm15), .clk(clk));

   D6_77277 instD6inst3_77277(.addr(a423[8:0]), .out(tm19), .clk(clk));

   D6_77277 instD6inst4_77277(.addr(a433[8:0]), .out(tm23), .clk(clk));

   D6_77277 instD6inst5_77277(.addr(a443[8:0]), .out(tm27), .clk(clk));

   D6_77277 instD6inst6_77277(.addr(a453[8:0]), .out(tm31), .clk(clk));

    addfxp #(10, 1) add75485(.a({1'b0, a385}), .b({9'b0, tm1}), .clk(clk), .q(a387));    // 0
    addfxp #(10, 1) add75611(.a({1'b0, a385}), .b({8'b0, tm8}), .clk(clk), .q(a400));    // 0
    addfxp #(10, 1) add75718(.a({1'b0, a385}), .b({8'b0, tm12}), .clk(clk), .q(a410));    // 0
    addfxp #(10, 1) add75825(.a({1'b0, a385}), .b({7'b0, tm16}), .clk(clk), .q(a420));    // 0
    addfxp #(10, 1) add75932(.a({1'b0, a385}), .b({7'b0, tm20}), .clk(clk), .q(a430));    // 0
    addfxp #(10, 1) add76039(.a({1'b0, a385}), .b({7'b0, tm24}), .clk(clk), .q(a440));    // 0
    addfxp #(10, 1) add76146(.a({1'b0, a385}), .b({7'b0, tm4}), .clk(clk), .q(a450));    // 0
    multfix #(5, 2) m75492(.a(tm2), .b({2'b0, i1}), .clk(clk), .q_unsc(a388), .q_sc(), .rst(reset));
    subfxp #(10, 1) sub75524(.a({1'b0, a392}), .b({3'b0, tm5}), .clk(clk), .q(a393));    // 3
    subfxp #(10, 1) sub75631(.a({1'b0, a402}), .b({3'b0, tm5}), .clk(clk), .q(a403));    // 3
    subfxp #(10, 1) sub75738(.a({1'b0, a412}), .b({3'b0, tm5}), .clk(clk), .q(a413));    // 3
    subfxp #(10, 1) sub75845(.a({1'b0, a422}), .b({3'b0, tm5}), .clk(clk), .q(a423));    // 3
    subfxp #(10, 1) sub75952(.a({1'b0, a432}), .b({3'b0, tm5}), .clk(clk), .q(a433));    // 3
    subfxp #(10, 1) sub76059(.a({1'b0, a442}), .b({3'b0, tm5}), .clk(clk), .q(a443));    // 3
    subfxp #(10, 1) sub76166(.a({1'b0, a452}), .b({3'b0, tm5}), .clk(clk), .q(a453));    // 3
    multfix #(64, 6) m75546(.a(tm36), .b(tm72), .clk(clk), .q_sc(a395), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75568(.a(tm37), .b(tm80), .clk(clk), .q_sc(a397), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75586(.a(tm37), .b(tm72), .clk(clk), .q_sc(a398), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75597(.a(tm36), .b(tm80), .clk(clk), .q_sc(a399), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75653(.a(tm40), .b(tm105), .clk(clk), .q_sc(a405), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75675(.a(tm41), .b(tm113), .clk(clk), .q_sc(a407), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75693(.a(tm41), .b(tm105), .clk(clk), .q_sc(a408), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75704(.a(tm40), .b(tm113), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75760(.a(tm44), .b(tm138), .clk(clk), .q_sc(a415), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75782(.a(tm45), .b(tm146), .clk(clk), .q_sc(a417), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75800(.a(tm45), .b(tm138), .clk(clk), .q_sc(a418), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75811(.a(tm44), .b(tm146), .clk(clk), .q_sc(a419), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75867(.a(tm48), .b(tm171), .clk(clk), .q_sc(a425), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75889(.a(tm49), .b(tm179), .clk(clk), .q_sc(a427), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75907(.a(tm49), .b(tm171), .clk(clk), .q_sc(a428), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75918(.a(tm48), .b(tm179), .clk(clk), .q_sc(a429), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75974(.a(tm52), .b(tm204), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(64, 6) m75996(.a(tm53), .b(tm212), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76014(.a(tm53), .b(tm204), .clk(clk), .q_sc(a438), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76025(.a(tm52), .b(tm212), .clk(clk), .q_sc(a439), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76081(.a(tm56), .b(tm237), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76103(.a(tm57), .b(tm245), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76121(.a(tm57), .b(tm237), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76132(.a(tm56), .b(tm245), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76188(.a(tm60), .b(tm270), .clk(clk), .q_sc(a455), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76210(.a(tm61), .b(tm278), .clk(clk), .q_sc(a457), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76228(.a(tm61), .b(tm270), .clk(clk), .q_sc(a458), .q_unsc(), .rst(reset));
    multfix #(64, 6) m76239(.a(tm60), .b(tm278), .clk(clk), .q_sc(a459), .q_unsc(), .rst(reset));
    subfxp #(64, 1) sub75575(.a(a395), .b(a397), .clk(clk), .q(Y2));    // 14
    addfxp #(64, 1) add75604(.a(a398), .b(a399), .clk(clk), .q(Y3));    // 14
    subfxp #(64, 1) sub75682(.a(a405), .b(a407), .clk(clk), .q(Y4));    // 14
    addfxp #(64, 1) add75711(.a(a408), .b(a409), .clk(clk), .q(Y5));    // 14
    subfxp #(64, 1) sub75789(.a(a415), .b(a417), .clk(clk), .q(Y6));    // 14
    addfxp #(64, 1) add75818(.a(a418), .b(a419), .clk(clk), .q(Y7));    // 14
    subfxp #(64, 1) sub75896(.a(a425), .b(a427), .clk(clk), .q(Y8));    // 14
    addfxp #(64, 1) add75925(.a(a428), .b(a429), .clk(clk), .q(Y9));    // 14
    subfxp #(64, 1) sub76003(.a(a435), .b(a437), .clk(clk), .q(Y10));    // 14
    addfxp #(64, 1) add76032(.a(a438), .b(a439), .clk(clk), .q(Y11));    // 14
    subfxp #(64, 1) sub76110(.a(a445), .b(a447), .clk(clk), .q(Y12));    // 14
    addfxp #(64, 1) add76139(.a(a448), .b(a449), .clk(clk), .q(Y13));    // 14
    subfxp #(64, 1) sub76217(.a(a455), .b(a457), .clk(clk), .q(Y14));    // 14
    addfxp #(64, 1) add76246(.a(a458), .b(a459), .clk(clk), .q(Y15));    // 14


   always @(posedge clk) begin
      if (reset == 1) begin
         tm36 <= 0;
         tm72 <= 0;
         tm37 <= 0;
         tm80 <= 0;
         tm37 <= 0;
         tm72 <= 0;
         tm36 <= 0;
         tm80 <= 0;
         tm40 <= 0;
         tm105 <= 0;
         tm41 <= 0;
         tm113 <= 0;
         tm41 <= 0;
         tm105 <= 0;
         tm40 <= 0;
         tm113 <= 0;
         tm44 <= 0;
         tm138 <= 0;
         tm45 <= 0;
         tm146 <= 0;
         tm45 <= 0;
         tm138 <= 0;
         tm44 <= 0;
         tm146 <= 0;
         tm48 <= 0;
         tm171 <= 0;
         tm49 <= 0;
         tm179 <= 0;
         tm49 <= 0;
         tm171 <= 0;
         tm48 <= 0;
         tm179 <= 0;
         tm52 <= 0;
         tm204 <= 0;
         tm53 <= 0;
         tm212 <= 0;
         tm53 <= 0;
         tm204 <= 0;
         tm52 <= 0;
         tm212 <= 0;
         tm56 <= 0;
         tm237 <= 0;
         tm57 <= 0;
         tm245 <= 0;
         tm57 <= 0;
         tm237 <= 0;
         tm56 <= 0;
         tm245 <= 0;
         tm60 <= 0;
         tm270 <= 0;
         tm61 <= 0;
         tm278 <= 0;
         tm61 <= 0;
         tm270 <= 0;
         tm60 <= 0;
         tm278 <= 0;
      end
      else begin
         i2 <= i2_in;
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm65 <= a460;
         tm73 <= a461;
         tm98 <= a464;
         tm106 <= a465;
         tm131 <= a468;
         tm139 <= a469;
         tm164 <= a472;
         tm172 <= a473;
         tm197 <= a476;
         tm205 <= a477;
         tm230 <= a480;
         tm238 <= a481;
         tm263 <= a484;
         tm271 <= a485;
         tm295 <= X0;
         tm310 <= X1;
         tm64 <= a387;
         tm66 <= tm65;
         tm74 <= tm73;
         tm97 <= a400;
         tm99 <= tm98;
         tm107 <= tm106;
         tm130 <= a410;
         tm132 <= tm131;
         tm140 <= tm139;
         tm163 <= a420;
         tm165 <= tm164;
         tm173 <= tm172;
         tm196 <= a430;
         tm198 <= tm197;
         tm206 <= tm205;
         tm229 <= a440;
         tm231 <= tm230;
         tm239 <= tm238;
         tm262 <= a450;
         tm264 <= tm263;
         tm272 <= tm271;
         tm296 <= tm295;
         tm311 <= tm310;
         a391 <= (tm64 & a390);
         a401 <= (tm97 & a390);
         a411 <= (tm130 & a390);
         a421 <= (tm163 & a390);
         a431 <= (tm196 & a390);
         a441 <= (tm229 & a390);
         a451 <= (tm262 & a390);
         tm67 <= tm66;
         tm75 <= tm74;
         tm100 <= tm99;
         tm108 <= tm107;
         tm133 <= tm132;
         tm141 <= tm140;
         tm166 <= tm165;
         tm174 <= tm173;
         tm199 <= tm198;
         tm207 <= tm206;
         tm232 <= tm231;
         tm240 <= tm239;
         tm265 <= tm264;
         tm273 <= tm272;
         tm297 <= tm296;
         tm312 <= tm311;
         tm68 <= tm67;
         tm76 <= tm75;
         tm101 <= tm100;
         tm109 <= tm108;
         tm134 <= tm133;
         tm142 <= tm141;
         tm167 <= tm166;
         tm175 <= tm174;
         tm200 <= tm199;
         tm208 <= tm207;
         tm233 <= tm232;
         tm241 <= tm240;
         tm266 <= tm265;
         tm274 <= tm273;
         tm298 <= tm297;
         tm313 <= tm312;
         tm69 <= tm68;
         tm77 <= tm76;
         tm102 <= tm101;
         tm110 <= tm109;
         tm135 <= tm134;
         tm143 <= tm142;
         tm168 <= tm167;
         tm176 <= tm175;
         tm201 <= tm200;
         tm209 <= tm208;
         tm234 <= tm233;
         tm242 <= tm241;
         tm267 <= tm266;
         tm275 <= tm274;
         tm299 <= tm298;
         tm314 <= tm313;
         tm70 <= tm69;
         tm78 <= tm77;
         tm103 <= tm102;
         tm111 <= tm110;
         tm136 <= tm135;
         tm144 <= tm143;
         tm169 <= tm168;
         tm177 <= tm176;
         tm202 <= tm201;
         tm210 <= tm209;
         tm235 <= tm234;
         tm243 <= tm242;
         tm268 <= tm267;
         tm276 <= tm275;
         tm300 <= tm299;
         tm315 <= tm314;
         tm71 <= tm70;
         tm79 <= tm78;
         tm104 <= tm103;
         tm112 <= tm111;
         tm137 <= tm136;
         tm145 <= tm144;
         tm170 <= tm169;
         tm178 <= tm177;
         tm203 <= tm202;
         tm211 <= tm210;
         tm236 <= tm235;
         tm244 <= tm243;
         tm269 <= tm268;
         tm277 <= tm276;
         tm301 <= tm300;
         tm316 <= tm315;
         tm36 <= a394;
         tm37 <= a396;
         tm40 <= a404;
         tm41 <= a406;
         tm44 <= a414;
         tm45 <= a416;
         tm48 <= a424;
         tm49 <= a426;
         tm52 <= a434;
         tm53 <= a436;
         tm56 <= a444;
         tm57 <= a446;
         tm60 <= a454;
         tm61 <= a456;
         tm72 <= tm71;
         tm80 <= tm79;
         tm105 <= tm104;
         tm113 <= tm112;
         tm138 <= tm137;
         tm146 <= tm145;
         tm171 <= tm170;
         tm179 <= tm178;
         tm204 <= tm203;
         tm212 <= tm211;
         tm237 <= tm236;
         tm245 <= tm244;
         tm270 <= tm269;
         tm278 <= tm277;
         tm302 <= tm301;
         tm317 <= tm316;
         tm303 <= tm302;
         tm318 <= tm317;
         tm304 <= tm303;
         tm319 <= tm318;
         tm305 <= tm304;
         tm320 <= tm319;
         tm306 <= tm305;
         tm321 <= tm320;
         tm307 <= tm306;
         tm322 <= tm321;
         tm308 <= tm307;
         tm323 <= tm322;
         tm309 <= tm308;
         tm324 <= tm323;
      end
   end
endmodule

// Latency: 11
// Gap: 1
module codeBlock77281(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(10, 1) shiftFIFO_79484(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a45;
   wire signed [63:0] a46;
   wire signed [63:0] a47;
   wire signed [63:0] a48;
   wire signed [63:0] a53;
   wire signed [63:0] a54;
   wire signed [63:0] a55;
   wire signed [63:0] a56;
   wire signed [63:0] a61;
   wire signed [63:0] a62;
   wire signed [63:0] a63;
   wire signed [63:0] a64;
   wire signed [63:0] a69;
   wire signed [63:0] a70;
   wire signed [63:0] a71;
   wire signed [63:0] a72;
   wire signed [63:0] t333;
   wire signed [63:0] t334;
   wire signed [63:0] t335;
   wire signed [63:0] t336;
   wire signed [63:0] t337;
   wire signed [63:0] t338;
   wire signed [63:0] t339;
   wire signed [63:0] t340;
   wire signed [63:0] t343;
   wire signed [63:0] t344;
   wire signed [63:0] t345;
   wire signed [63:0] t346;
   wire signed [63:0] t347;
   wire signed [63:0] t348;
   wire signed [63:0] t349;
   wire signed [63:0] t350;
   wire signed [63:0] t353;
   wire signed [63:0] t354;
   wire signed [63:0] t355;
   wire signed [63:0] t356;
   wire signed [63:0] t357;
   wire signed [63:0] t358;
   wire signed [63:0] t359;
   wire signed [63:0] t360;
   wire signed [63:0] t369;
   wire signed [63:0] t370;
   wire signed [63:0] t371;
   wire signed [63:0] t372;
   wire signed [63:0] t361;
   wire signed [63:0] t362;
   wire signed [63:0] t363;
   wire signed [63:0] t364;
   wire signed [63:0] t365;
   wire signed [63:0] t366;
   wire signed [63:0] t367;
   wire signed [63:0] t368;
   reg signed [63:0] tm325;
   reg signed [63:0] tm332;
   reg signed [63:0] tm353;
   reg signed [63:0] tm360;
   reg signed [63:0] tm326;
   reg signed [63:0] tm333;
   reg signed [63:0] tm354;
   reg signed [63:0] tm361;
   reg signed [63:0] tm381;
   reg signed [63:0] tm388;
   reg signed [63:0] tm395;
   reg signed [63:0] tm402;
   reg signed [63:0] tm409;
   reg signed [63:0] tm416;
   reg signed [63:0] tm423;
   reg signed [63:0] tm430;
   reg signed [63:0] tm327;
   reg signed [63:0] tm334;
   reg signed [63:0] tm355;
   reg signed [63:0] tm362;
   reg signed [63:0] tm382;
   reg signed [63:0] tm389;
   reg signed [63:0] tm396;
   reg signed [63:0] tm403;
   reg signed [63:0] tm410;
   reg signed [63:0] tm417;
   reg signed [63:0] tm424;
   reg signed [63:0] tm431;
   reg signed [63:0] tm328;
   reg signed [63:0] tm335;
   reg signed [63:0] tm356;
   reg signed [63:0] tm363;
   reg signed [63:0] tm383;
   reg signed [63:0] tm390;
   reg signed [63:0] tm397;
   reg signed [63:0] tm404;
   reg signed [63:0] tm411;
   reg signed [63:0] tm418;
   reg signed [63:0] tm425;
   reg signed [63:0] tm432;
   wire signed [63:0] a41;
   wire signed [63:0] a42;
   wire signed [63:0] a43;
   wire signed [63:0] a44;
   reg signed [63:0] tm329;
   reg signed [63:0] tm336;
   reg signed [63:0] tm357;
   reg signed [63:0] tm364;
   reg signed [63:0] tm384;
   reg signed [63:0] tm391;
   reg signed [63:0] tm398;
   reg signed [63:0] tm405;
   reg signed [63:0] tm412;
   reg signed [63:0] tm419;
   reg signed [63:0] tm426;
   reg signed [63:0] tm433;
   wire signed [63:0] t341;
   wire signed [63:0] t342;
   wire signed [63:0] t351;
   wire signed [63:0] t352;
   reg signed [63:0] tm330;
   reg signed [63:0] tm337;
   reg signed [63:0] tm358;
   reg signed [63:0] tm365;
   reg signed [63:0] tm385;
   reg signed [63:0] tm392;
   reg signed [63:0] tm399;
   reg signed [63:0] tm406;
   reg signed [63:0] tm413;
   reg signed [63:0] tm420;
   reg signed [63:0] tm427;
   reg signed [63:0] tm434;
   wire signed [63:0] t373;
   wire signed [63:0] t374;
   wire signed [63:0] t375;
   wire signed [63:0] t376;
   reg signed [63:0] tm331;
   reg signed [63:0] tm338;
   reg signed [63:0] tm359;
   reg signed [63:0] tm366;
   reg signed [63:0] tm386;
   reg signed [63:0] tm393;
   reg signed [63:0] tm400;
   reg signed [63:0] tm407;
   reg signed [63:0] tm414;
   reg signed [63:0] tm421;
   reg signed [63:0] tm428;
   reg signed [63:0] tm435;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] t377;
   wire signed [63:0] t378;
   wire signed [63:0] t379;
   wire signed [63:0] t380;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] t381;
   wire signed [63:0] t382;
   wire signed [63:0] t383;
   wire signed [63:0] t384;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   reg signed [63:0] tm387;
   reg signed [63:0] tm394;
   reg signed [63:0] tm401;
   reg signed [63:0] tm408;
   reg signed [63:0] tm415;
   reg signed [63:0] tm422;
   reg signed [63:0] tm429;
   reg signed [63:0] tm436;

   wire signed [63:0] tm32;
   assign tm32 = 64'h2d413cccfe779a00;

   assign a45 = X0;
   assign a46 = X8;
   assign a47 = X1;
   assign a48 = X9;
   assign a53 = X2;
   assign a54 = X10;
   assign a55 = X3;
   assign a56 = X11;
   assign a61 = X4;
   assign a62 = X12;
   assign a63 = X5;
   assign a64 = X13;
   assign a69 = X6;
   assign a70 = X14;
   assign a71 = X7;
   assign a72 = X15;
   assign Y0 = tm387;
   assign Y1 = tm394;
   assign Y8 = tm401;
   assign Y9 = tm408;
   assign Y4 = tm415;
   assign Y5 = tm422;
   assign Y12 = tm429;
   assign Y13 = tm436;
   assign Y2 = t377;
   assign Y3 = t378;
   assign Y10 = t379;
   assign Y11 = t380;
   assign Y6 = t381;
   assign Y7 = t382;
   assign Y14 = t383;
   assign Y15 = t384;

    addfxp #(64, 1) add77293(.a(a45), .b(a46), .clk(clk), .q(t333));    // 0
    addfxp #(64, 1) add77308(.a(a47), .b(a48), .clk(clk), .q(t334));    // 0
    subfxp #(64, 1) sub77323(.a(a45), .b(a46), .clk(clk), .q(t335));    // 0
    subfxp #(64, 1) sub77338(.a(a47), .b(a48), .clk(clk), .q(t336));    // 0
    addfxp #(64, 1) add77353(.a(a53), .b(a54), .clk(clk), .q(t337));    // 0
    addfxp #(64, 1) add77368(.a(a55), .b(a56), .clk(clk), .q(t338));    // 0
    subfxp #(64, 1) sub77383(.a(a53), .b(a54), .clk(clk), .q(t339));    // 0
    subfxp #(64, 1) sub77398(.a(a55), .b(a56), .clk(clk), .q(t340));    // 0
    addfxp #(64, 1) add77441(.a(a61), .b(a62), .clk(clk), .q(t343));    // 0
    addfxp #(64, 1) add77456(.a(a63), .b(a64), .clk(clk), .q(t344));    // 0
    subfxp #(64, 1) sub77471(.a(a61), .b(a62), .clk(clk), .q(t345));    // 0
    subfxp #(64, 1) sub77486(.a(a63), .b(a64), .clk(clk), .q(t346));    // 0
    addfxp #(64, 1) add77501(.a(a69), .b(a70), .clk(clk), .q(t347));    // 0
    addfxp #(64, 1) add77516(.a(a71), .b(a72), .clk(clk), .q(t348));    // 0
    subfxp #(64, 1) sub77531(.a(a69), .b(a70), .clk(clk), .q(t349));    // 0
    subfxp #(64, 1) sub77546(.a(a71), .b(a72), .clk(clk), .q(t350));    // 0
    addfxp #(64, 1) add77581(.a(t333), .b(t343), .clk(clk), .q(t353));    // 1
    addfxp #(64, 1) add77588(.a(t334), .b(t344), .clk(clk), .q(t354));    // 1
    subfxp #(64, 1) sub77595(.a(t333), .b(t343), .clk(clk), .q(t355));    // 1
    subfxp #(64, 1) sub77602(.a(t334), .b(t344), .clk(clk), .q(t356));    // 1
    addfxp #(64, 1) add77609(.a(t337), .b(t347), .clk(clk), .q(t357));    // 1
    addfxp #(64, 1) add77616(.a(t338), .b(t348), .clk(clk), .q(t358));    // 1
    subfxp #(64, 1) sub77623(.a(t337), .b(t347), .clk(clk), .q(t359));    // 1
    subfxp #(64, 1) sub77630(.a(t338), .b(t348), .clk(clk), .q(t360));    // 1
    addfxp #(64, 1) add77725(.a(t335), .b(t346), .clk(clk), .q(t369));    // 1
    subfxp #(64, 1) sub77732(.a(t336), .b(t345), .clk(clk), .q(t370));    // 1
    subfxp #(64, 1) sub77739(.a(t335), .b(t346), .clk(clk), .q(t371));    // 1
    addfxp #(64, 1) add77746(.a(t336), .b(t345), .clk(clk), .q(t372));    // 1
    addfxp #(64, 1) add77637(.a(t353), .b(t357), .clk(clk), .q(t361));    // 2
    addfxp #(64, 1) add77644(.a(t354), .b(t358), .clk(clk), .q(t362));    // 2
    subfxp #(64, 1) sub77651(.a(t353), .b(t357), .clk(clk), .q(t363));    // 2
    subfxp #(64, 1) sub77658(.a(t354), .b(t358), .clk(clk), .q(t364));    // 2
    addfxp #(64, 1) add77681(.a(t355), .b(t360), .clk(clk), .q(t365));    // 2
    subfxp #(64, 1) sub77688(.a(t356), .b(t359), .clk(clk), .q(t366));    // 2
    subfxp #(64, 1) sub77695(.a(t355), .b(t360), .clk(clk), .q(t367));    // 2
    addfxp #(64, 1) add77702(.a(t356), .b(t359), .clk(clk), .q(t368));    // 2
    multfix #(64, 6) m77405(.a(tm32), .b(t339), .clk(clk), .q_sc(a41), .q_unsc(), .rst(reset));
    multfix #(64, 6) m77412(.a(tm32), .b(t340), .clk(clk), .q_sc(a42), .q_unsc(), .rst(reset));
    multfix #(64, 6) m77553(.a(tm32), .b(t350), .clk(clk), .q_sc(a43), .q_unsc(), .rst(reset));
    multfix #(64, 6) m77560(.a(tm32), .b(t349), .clk(clk), .q_sc(a44), .q_unsc(), .rst(reset));
    addfxp #(64, 1) add77419(.a(a41), .b(a42), .clk(clk), .q(t341));    // 7
    subfxp #(64, 1) sub77426(.a(a42), .b(a41), .clk(clk), .q(t342));    // 7
    subfxp #(64, 1) sub77567(.a(a43), .b(a44), .clk(clk), .q(t351));    // 7
    addfxp #(64, 1) add77574(.a(a44), .b(a43), .clk(clk), .q(t352));    // 7
    addfxp #(64, 1) add77753(.a(t341), .b(t351), .clk(clk), .q(t373));    // 8
    subfxp #(64, 1) sub77760(.a(t342), .b(t352), .clk(clk), .q(t374));    // 8
    subfxp #(64, 1) sub77767(.a(t341), .b(t351), .clk(clk), .q(t375));    // 8
    addfxp #(64, 1) add77774(.a(t342), .b(t352), .clk(clk), .q(t376));    // 8
    addfxp #(64, 1) add77781(.a(tm331), .b(t373), .clk(clk), .q(t377));    // 9
    addfxp #(64, 1) add77788(.a(tm338), .b(t374), .clk(clk), .q(t378));    // 9
    subfxp #(64, 1) sub77795(.a(tm331), .b(t373), .clk(clk), .q(t379));    // 9
    subfxp #(64, 1) sub77802(.a(tm338), .b(t374), .clk(clk), .q(t380));    // 9
    addfxp #(64, 1) add77825(.a(tm359), .b(t376), .clk(clk), .q(t381));    // 9
    subfxp #(64, 1) sub77832(.a(tm366), .b(t375), .clk(clk), .q(t382));    // 9
    subfxp #(64, 1) sub77839(.a(tm359), .b(t376), .clk(clk), .q(t383));    // 9
    addfxp #(64, 1) add77846(.a(tm366), .b(t375), .clk(clk), .q(t384));    // 9


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm325 <= t369;
         tm332 <= t370;
         tm353 <= t371;
         tm360 <= t372;
         tm326 <= tm325;
         tm333 <= tm332;
         tm354 <= tm353;
         tm361 <= tm360;
         tm381 <= t361;
         tm388 <= t362;
         tm395 <= t363;
         tm402 <= t364;
         tm409 <= t365;
         tm416 <= t366;
         tm423 <= t367;
         tm430 <= t368;
         tm327 <= tm326;
         tm334 <= tm333;
         tm355 <= tm354;
         tm362 <= tm361;
         tm382 <= tm381;
         tm389 <= tm388;
         tm396 <= tm395;
         tm403 <= tm402;
         tm410 <= tm409;
         tm417 <= tm416;
         tm424 <= tm423;
         tm431 <= tm430;
         tm328 <= tm327;
         tm335 <= tm334;
         tm356 <= tm355;
         tm363 <= tm362;
         tm383 <= tm382;
         tm390 <= tm389;
         tm397 <= tm396;
         tm404 <= tm403;
         tm411 <= tm410;
         tm418 <= tm417;
         tm425 <= tm424;
         tm432 <= tm431;
         tm329 <= tm328;
         tm336 <= tm335;
         tm357 <= tm356;
         tm364 <= tm363;
         tm384 <= tm383;
         tm391 <= tm390;
         tm398 <= tm397;
         tm405 <= tm404;
         tm412 <= tm411;
         tm419 <= tm418;
         tm426 <= tm425;
         tm433 <= tm432;
         tm330 <= tm329;
         tm337 <= tm336;
         tm358 <= tm357;
         tm365 <= tm364;
         tm385 <= tm384;
         tm392 <= tm391;
         tm399 <= tm398;
         tm406 <= tm405;
         tm413 <= tm412;
         tm420 <= tm419;
         tm427 <= tm426;
         tm434 <= tm433;
         tm331 <= tm330;
         tm338 <= tm337;
         tm359 <= tm358;
         tm366 <= tm365;
         tm386 <= tm385;
         tm393 <= tm392;
         tm400 <= tm399;
         tm407 <= tm406;
         tm414 <= tm413;
         tm421 <= tm420;
         tm428 <= tm427;
         tm435 <= tm434;
         tm387 <= tm386;
         tm394 <= tm393;
         tm401 <= tm400;
         tm408 <= tm407;
         tm415 <= tm414;
         tm422 <= tm421;
         tm429 <= tm428;
         tm436 <= tm435;
      end
   end
endmodule

// Latency: 63
// Gap: 64
module rc77870(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];

   perm77868 instPerm79485(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 63
// Gap: 64
module perm77868(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 3'd0};
   assign    addr0b = {outCount, 3'd0};
   assign    addr0c = {outCount_for_rd_addr, 3'd0};
   assign    addr1 = {inCount, 3'd1};
   assign    addr1b = {outCount, 3'd1};
   assign    addr1c = {outCount_for_rd_addr, 3'd1};
   assign    addr2 = {inCount, 3'd2};
   assign    addr2b = {outCount, 3'd2};
   assign    addr2c = {outCount_for_rd_addr, 3'd2};
   assign    addr3 = {inCount, 3'd3};
   assign    addr3b = {outCount, 3'd3};
   assign    addr3c = {outCount_for_rd_addr, 3'd3};
   assign    addr4 = {inCount, 3'd4};
   assign    addr4b = {outCount, 3'd4};
   assign    addr4c = {outCount_for_rd_addr, 3'd4};
   assign    addr5 = {inCount, 3'd5};
   assign    addr5b = {outCount, 3'd5};
   assign    addr5c = {outCount_for_rd_addr, 3'd5};
   assign    addr6 = {inCount, 3'd6};
   assign    addr6b = {outCount, 3'd6};
   assign    addr6c = {outCount_for_rd_addr, 3'd6};
   assign    addr7 = {inCount, 3'd7};
   assign    addr7b = {outCount, 3'd7};
   assign    addr7c = {outCount_for_rd_addr, 3'd7};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[3] ^ addr0[0];
   assign inBank0[1] = addr0[4] ^ addr0[1];
   assign inBank0[2] = addr0[5] ^ addr0[2];
   assign inAddr0[0] = addr0[6];
   assign inAddr0[1] = addr0[7];
   assign inAddr0[2] = addr0[8];
   assign inAddr0[3] = addr0[0];
   assign inAddr0[4] = addr0[1];
   assign inAddr0[5] = addr0[2];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outAddr0[0] = addr0b[3];
   assign outAddr0[1] = addr0b[4];
   assign outAddr0[2] = addr0b[5];
   assign outAddr0[3] = addr0b[6];
   assign outAddr0[4] = addr0b[7];
   assign outAddr0[5] = addr0b[8];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outAddr_a0[0] = addr0c[3];
   assign outAddr_a0[1] = addr0c[4];
   assign outAddr_a0[2] = addr0c[5];
   assign outAddr_a0[3] = addr0c[6];
   assign outAddr_a0[4] = addr0c[7];
   assign outAddr_a0[5] = addr0c[8];

   assign inBank1[0] = addr1[3] ^ addr1[0];
   assign inBank1[1] = addr1[4] ^ addr1[1];
   assign inBank1[2] = addr1[5] ^ addr1[2];
   assign inAddr1[0] = addr1[6];
   assign inAddr1[1] = addr1[7];
   assign inAddr1[2] = addr1[8];
   assign inAddr1[3] = addr1[0];
   assign inAddr1[4] = addr1[1];
   assign inAddr1[5] = addr1[2];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outAddr1[0] = addr1b[3];
   assign outAddr1[1] = addr1b[4];
   assign outAddr1[2] = addr1b[5];
   assign outAddr1[3] = addr1b[6];
   assign outAddr1[4] = addr1b[7];
   assign outAddr1[5] = addr1b[8];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outAddr_a1[0] = addr1c[3];
   assign outAddr_a1[1] = addr1c[4];
   assign outAddr_a1[2] = addr1c[5];
   assign outAddr_a1[3] = addr1c[6];
   assign outAddr_a1[4] = addr1c[7];
   assign outAddr_a1[5] = addr1c[8];

   assign inBank2[0] = addr2[3] ^ addr2[0];
   assign inBank2[1] = addr2[4] ^ addr2[1];
   assign inBank2[2] = addr2[5] ^ addr2[2];
   assign inAddr2[0] = addr2[6];
   assign inAddr2[1] = addr2[7];
   assign inAddr2[2] = addr2[8];
   assign inAddr2[3] = addr2[0];
   assign inAddr2[4] = addr2[1];
   assign inAddr2[5] = addr2[2];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outAddr2[0] = addr2b[3];
   assign outAddr2[1] = addr2b[4];
   assign outAddr2[2] = addr2b[5];
   assign outAddr2[3] = addr2b[6];
   assign outAddr2[4] = addr2b[7];
   assign outAddr2[5] = addr2b[8];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outAddr_a2[0] = addr2c[3];
   assign outAddr_a2[1] = addr2c[4];
   assign outAddr_a2[2] = addr2c[5];
   assign outAddr_a2[3] = addr2c[6];
   assign outAddr_a2[4] = addr2c[7];
   assign outAddr_a2[5] = addr2c[8];

   assign inBank3[0] = addr3[3] ^ addr3[0];
   assign inBank3[1] = addr3[4] ^ addr3[1];
   assign inBank3[2] = addr3[5] ^ addr3[2];
   assign inAddr3[0] = addr3[6];
   assign inAddr3[1] = addr3[7];
   assign inAddr3[2] = addr3[8];
   assign inAddr3[3] = addr3[0];
   assign inAddr3[4] = addr3[1];
   assign inAddr3[5] = addr3[2];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outAddr3[0] = addr3b[3];
   assign outAddr3[1] = addr3b[4];
   assign outAddr3[2] = addr3b[5];
   assign outAddr3[3] = addr3b[6];
   assign outAddr3[4] = addr3b[7];
   assign outAddr3[5] = addr3b[8];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outAddr_a3[0] = addr3c[3];
   assign outAddr_a3[1] = addr3c[4];
   assign outAddr_a3[2] = addr3c[5];
   assign outAddr_a3[3] = addr3c[6];
   assign outAddr_a3[4] = addr3c[7];
   assign outAddr_a3[5] = addr3c[8];

   assign inBank4[0] = addr4[3] ^ addr4[0];
   assign inBank4[1] = addr4[4] ^ addr4[1];
   assign inBank4[2] = addr4[5] ^ addr4[2];
   assign inAddr4[0] = addr4[6];
   assign inAddr4[1] = addr4[7];
   assign inAddr4[2] = addr4[8];
   assign inAddr4[3] = addr4[0];
   assign inAddr4[4] = addr4[1];
   assign inAddr4[5] = addr4[2];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outAddr4[0] = addr4b[3];
   assign outAddr4[1] = addr4b[4];
   assign outAddr4[2] = addr4b[5];
   assign outAddr4[3] = addr4b[6];
   assign outAddr4[4] = addr4b[7];
   assign outAddr4[5] = addr4b[8];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outAddr_a4[0] = addr4c[3];
   assign outAddr_a4[1] = addr4c[4];
   assign outAddr_a4[2] = addr4c[5];
   assign outAddr_a4[3] = addr4c[6];
   assign outAddr_a4[4] = addr4c[7];
   assign outAddr_a4[5] = addr4c[8];

   assign inBank5[0] = addr5[3] ^ addr5[0];
   assign inBank5[1] = addr5[4] ^ addr5[1];
   assign inBank5[2] = addr5[5] ^ addr5[2];
   assign inAddr5[0] = addr5[6];
   assign inAddr5[1] = addr5[7];
   assign inAddr5[2] = addr5[8];
   assign inAddr5[3] = addr5[0];
   assign inAddr5[4] = addr5[1];
   assign inAddr5[5] = addr5[2];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outAddr5[0] = addr5b[3];
   assign outAddr5[1] = addr5b[4];
   assign outAddr5[2] = addr5b[5];
   assign outAddr5[3] = addr5b[6];
   assign outAddr5[4] = addr5b[7];
   assign outAddr5[5] = addr5b[8];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outAddr_a5[0] = addr5c[3];
   assign outAddr_a5[1] = addr5c[4];
   assign outAddr_a5[2] = addr5c[5];
   assign outAddr_a5[3] = addr5c[6];
   assign outAddr_a5[4] = addr5c[7];
   assign outAddr_a5[5] = addr5c[8];

   assign inBank6[0] = addr6[3] ^ addr6[0];
   assign inBank6[1] = addr6[4] ^ addr6[1];
   assign inBank6[2] = addr6[5] ^ addr6[2];
   assign inAddr6[0] = addr6[6];
   assign inAddr6[1] = addr6[7];
   assign inAddr6[2] = addr6[8];
   assign inAddr6[3] = addr6[0];
   assign inAddr6[4] = addr6[1];
   assign inAddr6[5] = addr6[2];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outAddr6[0] = addr6b[3];
   assign outAddr6[1] = addr6b[4];
   assign outAddr6[2] = addr6b[5];
   assign outAddr6[3] = addr6b[6];
   assign outAddr6[4] = addr6b[7];
   assign outAddr6[5] = addr6b[8];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outAddr_a6[0] = addr6c[3];
   assign outAddr_a6[1] = addr6c[4];
   assign outAddr_a6[2] = addr6c[5];
   assign outAddr_a6[3] = addr6c[6];
   assign outAddr_a6[4] = addr6c[7];
   assign outAddr_a6[5] = addr6c[8];

   assign inBank7[0] = addr7[3] ^ addr7[0];
   assign inBank7[1] = addr7[4] ^ addr7[1];
   assign inBank7[2] = addr7[5] ^ addr7[2];
   assign inAddr7[0] = addr7[6];
   assign inAddr7[1] = addr7[7];
   assign inAddr7[2] = addr7[8];
   assign inAddr7[3] = addr7[0];
   assign inAddr7[4] = addr7[1];
   assign inAddr7[5] = addr7[2];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outAddr7[0] = addr7b[3];
   assign outAddr7[1] = addr7b[4];
   assign outAddr7[2] = addr7b[5];
   assign outAddr7[3] = addr7b[6];
   assign outAddr7[4] = addr7b[7];
   assign outAddr7[5] = addr7b[8];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outAddr_a7[0] = addr7c[3];
   assign outAddr_a7[1] = addr7c[4];
   assign outAddr_a7[2] = addr7c[5];
   assign outAddr_a7[3] = addr7c[6];
   assign outAddr_a7[4] = addr7c[7];
   assign outAddr_a7[5] = addr7c[8];

   nextReg #(57, 6) nextReg_79490(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_79493(.X(next0), .Y(next_out), .clk(clk));


   memArray512_77868 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .clk(clk));

   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
        outCount_for_rd_data <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 56)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
         if (inCount == 60)
            outCount_for_rd_data <= 0;
         else
            outCount_for_rd_data <= outCount_for_rd_data+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
         if (inCount == 56) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 63) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 56)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[1];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[0];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[5];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[4];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[3];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[5];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[4];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[3];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_77868(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                clk, inFlip, outFlip);

   parameter numBanks = 8;
   parameter logBanks = 3;
   parameter depth = 64;
   parameter logDepth = 6;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   nextReg #(64, 6) nextReg_79498(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
