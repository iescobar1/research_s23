/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 16 complex words per cycle
//   Throughput: one transform every 190 cycles
//   Latency: 225 cycles

//   Resources required:
//     1 multipliers (5 x 3 bit)
//     64 multipliers (64 x 64 bit)
//     132 adders (64 x 64 bit)
//     14 adders (9 x 7 bit)
//     32 RAMs (64 words, 128 bits per word)
//     28 ROMs (512 words, 64 bits per word)

// Generated on Tue Feb 28 21:31:22 UTC 2023

// Latency: 225 clock cycles
// Throughput: 1 transform every 190 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 190 cycles.  This means that
// 190 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 225 cycles.  This means that
// the 'next_out' will be asserted 225 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.




// Latency: 225
// Gap: 190
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [63:0] t0_0;
   wire [63:0] t0_1;
   wire [63:0] t0_2;
   wire [63:0] t0_3;
   wire [63:0] t0_4;
   wire [63:0] t0_5;
   wire [63:0] t0_6;
   wire [63:0] t0_7;
   wire [63:0] t0_8;
   wire [63:0] t0_9;
   wire [63:0] t0_10;
   wire [63:0] t0_11;
   wire [63:0] t0_12;
   wire [63:0] t0_13;
   wire [63:0] t0_14;
   wire [63:0] t0_15;
   wire [63:0] t0_16;
   wire [63:0] t0_17;
   wire [63:0] t0_18;
   wire [63:0] t0_19;
   wire [63:0] t0_20;
   wire [63:0] t0_21;
   wire [63:0] t0_22;
   wire [63:0] t0_23;
   wire [63:0] t0_24;
   wire [63:0] t0_25;
   wire [63:0] t0_26;
   wire [63:0] t0_27;
   wire [63:0] t0_28;
   wire [63:0] t0_29;
   wire [63:0] t0_30;
   wire [63:0] t0_31;
   wire next_0;
   wire [63:0] t1_0;
   wire [63:0] t1_1;
   wire [63:0] t1_2;
   wire [63:0] t1_3;
   wire [63:0] t1_4;
   wire [63:0] t1_5;
   wire [63:0] t1_6;
   wire [63:0] t1_7;
   wire [63:0] t1_8;
   wire [63:0] t1_9;
   wire [63:0] t1_10;
   wire [63:0] t1_11;
   wire [63:0] t1_12;
   wire [63:0] t1_13;
   wire [63:0] t1_14;
   wire [63:0] t1_15;
   wire [63:0] t1_16;
   wire [63:0] t1_17;
   wire [63:0] t1_18;
   wire [63:0] t1_19;
   wire [63:0] t1_20;
   wire [63:0] t1_21;
   wire [63:0] t1_22;
   wire [63:0] t1_23;
   wire [63:0] t1_24;
   wire [63:0] t1_25;
   wire [63:0] t1_26;
   wire [63:0] t1_27;
   wire [63:0] t1_28;
   wire [63:0] t1_29;
   wire [63:0] t1_30;
   wire [63:0] t1_31;
   wire next_1;
   wire [63:0] t2_0;
   wire [63:0] t2_1;
   wire [63:0] t2_2;
   wire [63:0] t2_3;
   wire [63:0] t2_4;
   wire [63:0] t2_5;
   wire [63:0] t2_6;
   wire [63:0] t2_7;
   wire [63:0] t2_8;
   wire [63:0] t2_9;
   wire [63:0] t2_10;
   wire [63:0] t2_11;
   wire [63:0] t2_12;
   wire [63:0] t2_13;
   wire [63:0] t2_14;
   wire [63:0] t2_15;
   wire [63:0] t2_16;
   wire [63:0] t2_17;
   wire [63:0] t2_18;
   wire [63:0] t2_19;
   wire [63:0] t2_20;
   wire [63:0] t2_21;
   wire [63:0] t2_22;
   wire [63:0] t2_23;
   wire [63:0] t2_24;
   wire [63:0] t2_25;
   wire [63:0] t2_26;
   wire [63:0] t2_27;
   wire [63:0] t2_28;
   wire [63:0] t2_29;
   wire [63:0] t2_30;
   wire [63:0] t2_31;
   wire next_2;
   assign t0_0 = X0;
   assign Y0 = t2_0;
   assign t0_1 = X1;
   assign Y1 = t2_1;
   assign t0_2 = X2;
   assign Y2 = t2_2;
   assign t0_3 = X3;
   assign Y3 = t2_3;
   assign t0_4 = X4;
   assign Y4 = t2_4;
   assign t0_5 = X5;
   assign Y5 = t2_5;
   assign t0_6 = X6;
   assign Y6 = t2_6;
   assign t0_7 = X7;
   assign Y7 = t2_7;
   assign t0_8 = X8;
   assign Y8 = t2_8;
   assign t0_9 = X9;
   assign Y9 = t2_9;
   assign t0_10 = X10;
   assign Y10 = t2_10;
   assign t0_11 = X11;
   assign Y11 = t2_11;
   assign t0_12 = X12;
   assign Y12 = t2_12;
   assign t0_13 = X13;
   assign Y13 = t2_13;
   assign t0_14 = X14;
   assign Y14 = t2_14;
   assign t0_15 = X15;
   assign Y15 = t2_15;
   assign t0_16 = X16;
   assign Y16 = t2_16;
   assign t0_17 = X17;
   assign Y17 = t2_17;
   assign t0_18 = X18;
   assign Y18 = t2_18;
   assign t0_19 = X19;
   assign Y19 = t2_19;
   assign t0_20 = X20;
   assign Y20 = t2_20;
   assign t0_21 = X21;
   assign Y21 = t2_21;
   assign t0_22 = X22;
   assign Y22 = t2_22;
   assign t0_23 = X23;
   assign Y23 = t2_23;
   assign t0_24 = X24;
   assign Y24 = t2_24;
   assign t0_25 = X25;
   assign Y25 = t2_25;
   assign t0_26 = X26;
   assign Y26 = t2_26;
   assign t0_27 = X27;
   assign Y27 = t2_27;
   assign t0_28 = X28;
   assign Y28 = t2_28;
   assign t0_29 = X29;
   assign Y29 = t2_29;
   assign t0_30 = X30;
   assign Y30 = t2_30;
   assign t0_31 = X31;
   assign Y31 = t2_31;
   assign next_0 = next;
   assign next_out = next_2;

// latency=35, gap=32
   rc80785 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15),
    .X16(t0_16), .Y16(t1_16),
    .X17(t0_17), .Y17(t1_17),
    .X18(t0_18), .Y18(t1_18),
    .X19(t0_19), .Y19(t1_19),
    .X20(t0_20), .Y20(t1_20),
    .X21(t0_21), .Y21(t1_21),
    .X22(t0_22), .Y22(t1_22),
    .X23(t0_23), .Y23(t1_23),
    .X24(t0_24), .Y24(t1_24),
    .X25(t0_25), .Y25(t1_25),
    .X26(t0_26), .Y26(t1_26),
    .X27(t0_27), .Y27(t1_27),
    .X28(t0_28), .Y28(t1_28),
    .X29(t0_29), .Y29(t1_29),
    .X30(t0_30), .Y30(t1_30),
    .X31(t0_31), .Y31(t1_31));


// latency=190, gap=190
   ICompose_84536 IComposeInst87691(.next(next_1), .clk(clk), .reset(reset), .next_out(next_2),
       .X0(t1_0), .Y0(t2_0),
       .X1(t1_1), .Y1(t2_1),
       .X2(t1_2), .Y2(t2_2),
       .X3(t1_3), .Y3(t2_3),
       .X4(t1_4), .Y4(t2_4),
       .X5(t1_5), .Y5(t2_5),
       .X6(t1_6), .Y6(t2_6),
       .X7(t1_7), .Y7(t2_7),
       .X8(t1_8), .Y8(t2_8),
       .X9(t1_9), .Y9(t2_9),
       .X10(t1_10), .Y10(t2_10),
       .X11(t1_11), .Y11(t2_11),
       .X12(t1_12), .Y12(t2_12),
       .X13(t1_13), .Y13(t2_13),
       .X14(t1_14), .Y14(t2_14),
       .X15(t1_15), .Y15(t2_15),
       .X16(t1_16), .Y16(t2_16),
       .X17(t1_17), .Y17(t2_17),
       .X18(t1_18), .Y18(t2_18),
       .X19(t1_19), .Y19(t2_19),
       .X20(t1_20), .Y20(t2_20),
       .X21(t1_21), .Y21(t2_21),
       .X22(t1_22), .Y22(t2_22),
       .X23(t1_23), .Y23(t2_23),
       .X24(t1_24), .Y24(t2_24),
       .X25(t1_25), .Y25(t2_25),
       .X26(t1_26), .Y26(t2_26),
       .X27(t1_27), .Y27(t2_27),
       .X28(t1_28), .Y28(t2_28),
       .X29(t1_29), .Y29(t2_29),
       .X30(t1_30), .Y30(t2_30),
       .X31(t1_31), .Y31(t2_31));


endmodule

// Latency: 35
// Gap: 32
module rc80785(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   wire [127:0] t8;
   wire [127:0] s8;
   assign t8 = {X16, X17};
   wire [127:0] t9;
   wire [127:0] s9;
   assign t9 = {X18, X19};
   wire [127:0] t10;
   wire [127:0] s10;
   assign t10 = {X20, X21};
   wire [127:0] t11;
   wire [127:0] s11;
   assign t11 = {X22, X23};
   wire [127:0] t12;
   wire [127:0] s12;
   assign t12 = {X24, X25};
   wire [127:0] t13;
   wire [127:0] s13;
   assign t13 = {X26, X27};
   wire [127:0] t14;
   wire [127:0] s14;
   assign t14 = {X28, X29};
   wire [127:0] t15;
   wire [127:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];
   assign Y16 = s8[127:64];
   assign Y17 = s8[63:0];
   assign Y18 = s9[127:64];
   assign Y19 = s9[63:0];
   assign Y20 = s10[127:64];
   assign Y21 = s10[63:0];
   assign Y22 = s11[127:64];
   assign Y23 = s11[63:0];
   assign Y24 = s12[127:64];
   assign Y25 = s12[63:0];
   assign Y26 = s13[127:64];
   assign Y27 = s13[63:0];
   assign Y28 = s14[127:64];
   assign Y29 = s14[63:0];
   assign Y30 = s15[127:64];
   assign Y31 = s15[63:0];

   perm80783 instPerm87692(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 35
// Gap: 32
module perm80783(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  ybuff8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  ybuff9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  ybuff10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  ybuff11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  ybuff12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  ybuff13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  ybuff14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  ybuff15;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;
   wire [logBanks-1:0] inBank8, outBank8;
   wire [logDepth-1:0] inAddr8, outAddr8;
   wire [logBanks-1:0] outBank_a8;
   wire [logDepth-1:0] outAddr_a8;
   wire [logDepth+logBanks-1:0] addr8, addr8b, addr8c;
   wire [logBanks-1:0] inBank9, outBank9;
   wire [logDepth-1:0] inAddr9, outAddr9;
   wire [logBanks-1:0] outBank_a9;
   wire [logDepth-1:0] outAddr_a9;
   wire [logDepth+logBanks-1:0] addr9, addr9b, addr9c;
   wire [logBanks-1:0] inBank10, outBank10;
   wire [logDepth-1:0] inAddr10, outAddr10;
   wire [logBanks-1:0] outBank_a10;
   wire [logDepth-1:0] outAddr_a10;
   wire [logDepth+logBanks-1:0] addr10, addr10b, addr10c;
   wire [logBanks-1:0] inBank11, outBank11;
   wire [logDepth-1:0] inAddr11, outAddr11;
   wire [logBanks-1:0] outBank_a11;
   wire [logDepth-1:0] outAddr_a11;
   wire [logDepth+logBanks-1:0] addr11, addr11b, addr11c;
   wire [logBanks-1:0] inBank12, outBank12;
   wire [logDepth-1:0] inAddr12, outAddr12;
   wire [logBanks-1:0] outBank_a12;
   wire [logDepth-1:0] outAddr_a12;
   wire [logDepth+logBanks-1:0] addr12, addr12b, addr12c;
   wire [logBanks-1:0] inBank13, outBank13;
   wire [logDepth-1:0] inAddr13, outAddr13;
   wire [logBanks-1:0] outBank_a13;
   wire [logDepth-1:0] outAddr_a13;
   wire [logDepth+logBanks-1:0] addr13, addr13b, addr13c;
   wire [logBanks-1:0] inBank14, outBank14;
   wire [logDepth-1:0] inAddr14, outAddr14;
   wire [logBanks-1:0] outBank_a14;
   wire [logDepth-1:0] outAddr_a14;
   wire [logDepth+logBanks-1:0] addr14, addr14b, addr14c;
   wire [logBanks-1:0] inBank15, outBank15;
   wire [logDepth-1:0] inAddr15, outAddr15;
   wire [logBanks-1:0] outBank_a15;
   wire [logDepth-1:0] outAddr_a15;
   wire [logDepth+logBanks-1:0] addr15, addr15b, addr15c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 4'd0};
   assign    addr0b = {outCount, 4'd0};
   assign    addr0c = {outCount_for_rd_addr, 4'd0};
   assign    addr1 = {inCount, 4'd1};
   assign    addr1b = {outCount, 4'd1};
   assign    addr1c = {outCount_for_rd_addr, 4'd1};
   assign    addr2 = {inCount, 4'd2};
   assign    addr2b = {outCount, 4'd2};
   assign    addr2c = {outCount_for_rd_addr, 4'd2};
   assign    addr3 = {inCount, 4'd3};
   assign    addr3b = {outCount, 4'd3};
   assign    addr3c = {outCount_for_rd_addr, 4'd3};
   assign    addr4 = {inCount, 4'd4};
   assign    addr4b = {outCount, 4'd4};
   assign    addr4c = {outCount_for_rd_addr, 4'd4};
   assign    addr5 = {inCount, 4'd5};
   assign    addr5b = {outCount, 4'd5};
   assign    addr5c = {outCount_for_rd_addr, 4'd5};
   assign    addr6 = {inCount, 4'd6};
   assign    addr6b = {outCount, 4'd6};
   assign    addr6c = {outCount_for_rd_addr, 4'd6};
   assign    addr7 = {inCount, 4'd7};
   assign    addr7b = {outCount, 4'd7};
   assign    addr7c = {outCount_for_rd_addr, 4'd7};
   assign    addr8 = {inCount, 4'd8};
   assign    addr8b = {outCount, 4'd8};
   assign    addr8c = {outCount_for_rd_addr, 4'd8};
   assign    addr9 = {inCount, 4'd9};
   assign    addr9b = {outCount, 4'd9};
   assign    addr9c = {outCount_for_rd_addr, 4'd9};
   assign    addr10 = {inCount, 4'd10};
   assign    addr10b = {outCount, 4'd10};
   assign    addr10c = {outCount_for_rd_addr, 4'd10};
   assign    addr11 = {inCount, 4'd11};
   assign    addr11b = {outCount, 4'd11};
   assign    addr11c = {outCount_for_rd_addr, 4'd11};
   assign    addr12 = {inCount, 4'd12};
   assign    addr12b = {outCount, 4'd12};
   assign    addr12c = {outCount_for_rd_addr, 4'd12};
   assign    addr13 = {inCount, 4'd13};
   assign    addr13b = {outCount, 4'd13};
   assign    addr13c = {outCount_for_rd_addr, 4'd13};
   assign    addr14 = {inCount, 4'd14};
   assign    addr14b = {outCount, 4'd14};
   assign    addr14c = {outCount_for_rd_addr, 4'd14};
   assign    addr15 = {inCount, 4'd15};
   assign    addr15b = {outCount, 4'd15};
   assign    addr15c = {outCount_for_rd_addr, 4'd15};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_0_8, w_0_9, w_0_10, w_0_11, w_0_12, w_0_13, w_0_14, w_0_15, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_1_8, w_1_9, w_1_10, w_1_11, w_1_12, w_1_13, w_1_14, w_1_15, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_2_8, w_2_9, w_2_10, w_2_11, w_2_12, w_2_13, w_2_14, w_2_15, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7, w_3_8, w_3_9, w_3_10, w_3_11, w_3_12, w_3_13, w_3_14, w_3_15;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    reg [width-1:0] z_0_8;
    reg [width-1:0] z_0_9;
    reg [width-1:0] z_0_10;
    reg [width-1:0] z_0_11;
    reg [width-1:0] z_0_12;
    reg [width-1:0] z_0_13;
    reg [width-1:0] z_0_14;
    reg [width-1:0] z_0_15;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_1_8, z_1_9, z_1_10, z_1_11, z_1_12, z_1_13, z_1_14, z_1_15, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_2_8, z_2_9, z_2_10, z_2_11, z_2_12, z_2_13, z_2_14, z_2_15, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7, z_3_8, z_3_9, z_3_10, z_3_11, z_3_12, z_3_13, z_3_14, z_3_15;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_0_8, u_0_9, u_0_10, u_0_11, u_0_12, u_0_13, u_0_14, u_0_15, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_1_8, u_1_9, u_1_10, u_1_11, u_1_12, u_1_13, u_1_14, u_1_15, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_2_8, u_2_9, u_2_10, u_2_11, u_2_12, u_2_13, u_2_14, u_2_15, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7, u_3_8, u_3_9, u_3_10, u_3_11, u_3_12, u_3_13, u_3_14, u_3_15;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[6] ^ addr0[0];
   assign inBank0[1] = addr0[7] ^ addr0[1];
   assign inBank0[2] = addr0[8] ^ addr0[2];
   assign inBank0[3] = addr0[3];
   assign inAddr0[0] = addr0[4];
   assign inAddr0[1] = addr0[5];
   assign inAddr0[2] = addr0[0];
   assign inAddr0[3] = addr0[1];
   assign inAddr0[4] = addr0[2];
   assign outBank0[0] = addr0b[6] ^ addr0b[0];
   assign outBank0[1] = addr0b[7] ^ addr0b[1];
   assign outBank0[2] = addr0b[8] ^ addr0b[2];
   assign outBank0[3] = addr0b[3];
   assign outAddr0[0] = addr0b[4];
   assign outAddr0[1] = addr0b[5];
   assign outAddr0[2] = addr0b[6];
   assign outAddr0[3] = addr0b[7];
   assign outAddr0[4] = addr0b[8];
   assign outBank_a0[0] = addr0c[6] ^ addr0c[0];
   assign outBank_a0[1] = addr0c[7] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[8] ^ addr0c[2];
   assign outBank_a0[3] = addr0c[3];
   assign outAddr_a0[0] = addr0c[4];
   assign outAddr_a0[1] = addr0c[5];
   assign outAddr_a0[2] = addr0c[6];
   assign outAddr_a0[3] = addr0c[7];
   assign outAddr_a0[4] = addr0c[8];

   assign inBank1[0] = addr1[6] ^ addr1[0];
   assign inBank1[1] = addr1[7] ^ addr1[1];
   assign inBank1[2] = addr1[8] ^ addr1[2];
   assign inBank1[3] = addr1[3];
   assign inAddr1[0] = addr1[4];
   assign inAddr1[1] = addr1[5];
   assign inAddr1[2] = addr1[0];
   assign inAddr1[3] = addr1[1];
   assign inAddr1[4] = addr1[2];
   assign outBank1[0] = addr1b[6] ^ addr1b[0];
   assign outBank1[1] = addr1b[7] ^ addr1b[1];
   assign outBank1[2] = addr1b[8] ^ addr1b[2];
   assign outBank1[3] = addr1b[3];
   assign outAddr1[0] = addr1b[4];
   assign outAddr1[1] = addr1b[5];
   assign outAddr1[2] = addr1b[6];
   assign outAddr1[3] = addr1b[7];
   assign outAddr1[4] = addr1b[8];
   assign outBank_a1[0] = addr1c[6] ^ addr1c[0];
   assign outBank_a1[1] = addr1c[7] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[8] ^ addr1c[2];
   assign outBank_a1[3] = addr1c[3];
   assign outAddr_a1[0] = addr1c[4];
   assign outAddr_a1[1] = addr1c[5];
   assign outAddr_a1[2] = addr1c[6];
   assign outAddr_a1[3] = addr1c[7];
   assign outAddr_a1[4] = addr1c[8];

   assign inBank2[0] = addr2[6] ^ addr2[0];
   assign inBank2[1] = addr2[7] ^ addr2[1];
   assign inBank2[2] = addr2[8] ^ addr2[2];
   assign inBank2[3] = addr2[3];
   assign inAddr2[0] = addr2[4];
   assign inAddr2[1] = addr2[5];
   assign inAddr2[2] = addr2[0];
   assign inAddr2[3] = addr2[1];
   assign inAddr2[4] = addr2[2];
   assign outBank2[0] = addr2b[6] ^ addr2b[0];
   assign outBank2[1] = addr2b[7] ^ addr2b[1];
   assign outBank2[2] = addr2b[8] ^ addr2b[2];
   assign outBank2[3] = addr2b[3];
   assign outAddr2[0] = addr2b[4];
   assign outAddr2[1] = addr2b[5];
   assign outAddr2[2] = addr2b[6];
   assign outAddr2[3] = addr2b[7];
   assign outAddr2[4] = addr2b[8];
   assign outBank_a2[0] = addr2c[6] ^ addr2c[0];
   assign outBank_a2[1] = addr2c[7] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[8] ^ addr2c[2];
   assign outBank_a2[3] = addr2c[3];
   assign outAddr_a2[0] = addr2c[4];
   assign outAddr_a2[1] = addr2c[5];
   assign outAddr_a2[2] = addr2c[6];
   assign outAddr_a2[3] = addr2c[7];
   assign outAddr_a2[4] = addr2c[8];

   assign inBank3[0] = addr3[6] ^ addr3[0];
   assign inBank3[1] = addr3[7] ^ addr3[1];
   assign inBank3[2] = addr3[8] ^ addr3[2];
   assign inBank3[3] = addr3[3];
   assign inAddr3[0] = addr3[4];
   assign inAddr3[1] = addr3[5];
   assign inAddr3[2] = addr3[0];
   assign inAddr3[3] = addr3[1];
   assign inAddr3[4] = addr3[2];
   assign outBank3[0] = addr3b[6] ^ addr3b[0];
   assign outBank3[1] = addr3b[7] ^ addr3b[1];
   assign outBank3[2] = addr3b[8] ^ addr3b[2];
   assign outBank3[3] = addr3b[3];
   assign outAddr3[0] = addr3b[4];
   assign outAddr3[1] = addr3b[5];
   assign outAddr3[2] = addr3b[6];
   assign outAddr3[3] = addr3b[7];
   assign outAddr3[4] = addr3b[8];
   assign outBank_a3[0] = addr3c[6] ^ addr3c[0];
   assign outBank_a3[1] = addr3c[7] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[8] ^ addr3c[2];
   assign outBank_a3[3] = addr3c[3];
   assign outAddr_a3[0] = addr3c[4];
   assign outAddr_a3[1] = addr3c[5];
   assign outAddr_a3[2] = addr3c[6];
   assign outAddr_a3[3] = addr3c[7];
   assign outAddr_a3[4] = addr3c[8];

   assign inBank4[0] = addr4[6] ^ addr4[0];
   assign inBank4[1] = addr4[7] ^ addr4[1];
   assign inBank4[2] = addr4[8] ^ addr4[2];
   assign inBank4[3] = addr4[3];
   assign inAddr4[0] = addr4[4];
   assign inAddr4[1] = addr4[5];
   assign inAddr4[2] = addr4[0];
   assign inAddr4[3] = addr4[1];
   assign inAddr4[4] = addr4[2];
   assign outBank4[0] = addr4b[6] ^ addr4b[0];
   assign outBank4[1] = addr4b[7] ^ addr4b[1];
   assign outBank4[2] = addr4b[8] ^ addr4b[2];
   assign outBank4[3] = addr4b[3];
   assign outAddr4[0] = addr4b[4];
   assign outAddr4[1] = addr4b[5];
   assign outAddr4[2] = addr4b[6];
   assign outAddr4[3] = addr4b[7];
   assign outAddr4[4] = addr4b[8];
   assign outBank_a4[0] = addr4c[6] ^ addr4c[0];
   assign outBank_a4[1] = addr4c[7] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[8] ^ addr4c[2];
   assign outBank_a4[3] = addr4c[3];
   assign outAddr_a4[0] = addr4c[4];
   assign outAddr_a4[1] = addr4c[5];
   assign outAddr_a4[2] = addr4c[6];
   assign outAddr_a4[3] = addr4c[7];
   assign outAddr_a4[4] = addr4c[8];

   assign inBank5[0] = addr5[6] ^ addr5[0];
   assign inBank5[1] = addr5[7] ^ addr5[1];
   assign inBank5[2] = addr5[8] ^ addr5[2];
   assign inBank5[3] = addr5[3];
   assign inAddr5[0] = addr5[4];
   assign inAddr5[1] = addr5[5];
   assign inAddr5[2] = addr5[0];
   assign inAddr5[3] = addr5[1];
   assign inAddr5[4] = addr5[2];
   assign outBank5[0] = addr5b[6] ^ addr5b[0];
   assign outBank5[1] = addr5b[7] ^ addr5b[1];
   assign outBank5[2] = addr5b[8] ^ addr5b[2];
   assign outBank5[3] = addr5b[3];
   assign outAddr5[0] = addr5b[4];
   assign outAddr5[1] = addr5b[5];
   assign outAddr5[2] = addr5b[6];
   assign outAddr5[3] = addr5b[7];
   assign outAddr5[4] = addr5b[8];
   assign outBank_a5[0] = addr5c[6] ^ addr5c[0];
   assign outBank_a5[1] = addr5c[7] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[8] ^ addr5c[2];
   assign outBank_a5[3] = addr5c[3];
   assign outAddr_a5[0] = addr5c[4];
   assign outAddr_a5[1] = addr5c[5];
   assign outAddr_a5[2] = addr5c[6];
   assign outAddr_a5[3] = addr5c[7];
   assign outAddr_a5[4] = addr5c[8];

   assign inBank6[0] = addr6[6] ^ addr6[0];
   assign inBank6[1] = addr6[7] ^ addr6[1];
   assign inBank6[2] = addr6[8] ^ addr6[2];
   assign inBank6[3] = addr6[3];
   assign inAddr6[0] = addr6[4];
   assign inAddr6[1] = addr6[5];
   assign inAddr6[2] = addr6[0];
   assign inAddr6[3] = addr6[1];
   assign inAddr6[4] = addr6[2];
   assign outBank6[0] = addr6b[6] ^ addr6b[0];
   assign outBank6[1] = addr6b[7] ^ addr6b[1];
   assign outBank6[2] = addr6b[8] ^ addr6b[2];
   assign outBank6[3] = addr6b[3];
   assign outAddr6[0] = addr6b[4];
   assign outAddr6[1] = addr6b[5];
   assign outAddr6[2] = addr6b[6];
   assign outAddr6[3] = addr6b[7];
   assign outAddr6[4] = addr6b[8];
   assign outBank_a6[0] = addr6c[6] ^ addr6c[0];
   assign outBank_a6[1] = addr6c[7] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[8] ^ addr6c[2];
   assign outBank_a6[3] = addr6c[3];
   assign outAddr_a6[0] = addr6c[4];
   assign outAddr_a6[1] = addr6c[5];
   assign outAddr_a6[2] = addr6c[6];
   assign outAddr_a6[3] = addr6c[7];
   assign outAddr_a6[4] = addr6c[8];

   assign inBank7[0] = addr7[6] ^ addr7[0];
   assign inBank7[1] = addr7[7] ^ addr7[1];
   assign inBank7[2] = addr7[8] ^ addr7[2];
   assign inBank7[3] = addr7[3];
   assign inAddr7[0] = addr7[4];
   assign inAddr7[1] = addr7[5];
   assign inAddr7[2] = addr7[0];
   assign inAddr7[3] = addr7[1];
   assign inAddr7[4] = addr7[2];
   assign outBank7[0] = addr7b[6] ^ addr7b[0];
   assign outBank7[1] = addr7b[7] ^ addr7b[1];
   assign outBank7[2] = addr7b[8] ^ addr7b[2];
   assign outBank7[3] = addr7b[3];
   assign outAddr7[0] = addr7b[4];
   assign outAddr7[1] = addr7b[5];
   assign outAddr7[2] = addr7b[6];
   assign outAddr7[3] = addr7b[7];
   assign outAddr7[4] = addr7b[8];
   assign outBank_a7[0] = addr7c[6] ^ addr7c[0];
   assign outBank_a7[1] = addr7c[7] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[8] ^ addr7c[2];
   assign outBank_a7[3] = addr7c[3];
   assign outAddr_a7[0] = addr7c[4];
   assign outAddr_a7[1] = addr7c[5];
   assign outAddr_a7[2] = addr7c[6];
   assign outAddr_a7[3] = addr7c[7];
   assign outAddr_a7[4] = addr7c[8];

   assign inBank8[0] = addr8[6] ^ addr8[0];
   assign inBank8[1] = addr8[7] ^ addr8[1];
   assign inBank8[2] = addr8[8] ^ addr8[2];
   assign inBank8[3] = addr8[3];
   assign inAddr8[0] = addr8[4];
   assign inAddr8[1] = addr8[5];
   assign inAddr8[2] = addr8[0];
   assign inAddr8[3] = addr8[1];
   assign inAddr8[4] = addr8[2];
   assign outBank8[0] = addr8b[6] ^ addr8b[0];
   assign outBank8[1] = addr8b[7] ^ addr8b[1];
   assign outBank8[2] = addr8b[8] ^ addr8b[2];
   assign outBank8[3] = addr8b[3];
   assign outAddr8[0] = addr8b[4];
   assign outAddr8[1] = addr8b[5];
   assign outAddr8[2] = addr8b[6];
   assign outAddr8[3] = addr8b[7];
   assign outAddr8[4] = addr8b[8];
   assign outBank_a8[0] = addr8c[6] ^ addr8c[0];
   assign outBank_a8[1] = addr8c[7] ^ addr8c[1];
   assign outBank_a8[2] = addr8c[8] ^ addr8c[2];
   assign outBank_a8[3] = addr8c[3];
   assign outAddr_a8[0] = addr8c[4];
   assign outAddr_a8[1] = addr8c[5];
   assign outAddr_a8[2] = addr8c[6];
   assign outAddr_a8[3] = addr8c[7];
   assign outAddr_a8[4] = addr8c[8];

   assign inBank9[0] = addr9[6] ^ addr9[0];
   assign inBank9[1] = addr9[7] ^ addr9[1];
   assign inBank9[2] = addr9[8] ^ addr9[2];
   assign inBank9[3] = addr9[3];
   assign inAddr9[0] = addr9[4];
   assign inAddr9[1] = addr9[5];
   assign inAddr9[2] = addr9[0];
   assign inAddr9[3] = addr9[1];
   assign inAddr9[4] = addr9[2];
   assign outBank9[0] = addr9b[6] ^ addr9b[0];
   assign outBank9[1] = addr9b[7] ^ addr9b[1];
   assign outBank9[2] = addr9b[8] ^ addr9b[2];
   assign outBank9[3] = addr9b[3];
   assign outAddr9[0] = addr9b[4];
   assign outAddr9[1] = addr9b[5];
   assign outAddr9[2] = addr9b[6];
   assign outAddr9[3] = addr9b[7];
   assign outAddr9[4] = addr9b[8];
   assign outBank_a9[0] = addr9c[6] ^ addr9c[0];
   assign outBank_a9[1] = addr9c[7] ^ addr9c[1];
   assign outBank_a9[2] = addr9c[8] ^ addr9c[2];
   assign outBank_a9[3] = addr9c[3];
   assign outAddr_a9[0] = addr9c[4];
   assign outAddr_a9[1] = addr9c[5];
   assign outAddr_a9[2] = addr9c[6];
   assign outAddr_a9[3] = addr9c[7];
   assign outAddr_a9[4] = addr9c[8];

   assign inBank10[0] = addr10[6] ^ addr10[0];
   assign inBank10[1] = addr10[7] ^ addr10[1];
   assign inBank10[2] = addr10[8] ^ addr10[2];
   assign inBank10[3] = addr10[3];
   assign inAddr10[0] = addr10[4];
   assign inAddr10[1] = addr10[5];
   assign inAddr10[2] = addr10[0];
   assign inAddr10[3] = addr10[1];
   assign inAddr10[4] = addr10[2];
   assign outBank10[0] = addr10b[6] ^ addr10b[0];
   assign outBank10[1] = addr10b[7] ^ addr10b[1];
   assign outBank10[2] = addr10b[8] ^ addr10b[2];
   assign outBank10[3] = addr10b[3];
   assign outAddr10[0] = addr10b[4];
   assign outAddr10[1] = addr10b[5];
   assign outAddr10[2] = addr10b[6];
   assign outAddr10[3] = addr10b[7];
   assign outAddr10[4] = addr10b[8];
   assign outBank_a10[0] = addr10c[6] ^ addr10c[0];
   assign outBank_a10[1] = addr10c[7] ^ addr10c[1];
   assign outBank_a10[2] = addr10c[8] ^ addr10c[2];
   assign outBank_a10[3] = addr10c[3];
   assign outAddr_a10[0] = addr10c[4];
   assign outAddr_a10[1] = addr10c[5];
   assign outAddr_a10[2] = addr10c[6];
   assign outAddr_a10[3] = addr10c[7];
   assign outAddr_a10[4] = addr10c[8];

   assign inBank11[0] = addr11[6] ^ addr11[0];
   assign inBank11[1] = addr11[7] ^ addr11[1];
   assign inBank11[2] = addr11[8] ^ addr11[2];
   assign inBank11[3] = addr11[3];
   assign inAddr11[0] = addr11[4];
   assign inAddr11[1] = addr11[5];
   assign inAddr11[2] = addr11[0];
   assign inAddr11[3] = addr11[1];
   assign inAddr11[4] = addr11[2];
   assign outBank11[0] = addr11b[6] ^ addr11b[0];
   assign outBank11[1] = addr11b[7] ^ addr11b[1];
   assign outBank11[2] = addr11b[8] ^ addr11b[2];
   assign outBank11[3] = addr11b[3];
   assign outAddr11[0] = addr11b[4];
   assign outAddr11[1] = addr11b[5];
   assign outAddr11[2] = addr11b[6];
   assign outAddr11[3] = addr11b[7];
   assign outAddr11[4] = addr11b[8];
   assign outBank_a11[0] = addr11c[6] ^ addr11c[0];
   assign outBank_a11[1] = addr11c[7] ^ addr11c[1];
   assign outBank_a11[2] = addr11c[8] ^ addr11c[2];
   assign outBank_a11[3] = addr11c[3];
   assign outAddr_a11[0] = addr11c[4];
   assign outAddr_a11[1] = addr11c[5];
   assign outAddr_a11[2] = addr11c[6];
   assign outAddr_a11[3] = addr11c[7];
   assign outAddr_a11[4] = addr11c[8];

   assign inBank12[0] = addr12[6] ^ addr12[0];
   assign inBank12[1] = addr12[7] ^ addr12[1];
   assign inBank12[2] = addr12[8] ^ addr12[2];
   assign inBank12[3] = addr12[3];
   assign inAddr12[0] = addr12[4];
   assign inAddr12[1] = addr12[5];
   assign inAddr12[2] = addr12[0];
   assign inAddr12[3] = addr12[1];
   assign inAddr12[4] = addr12[2];
   assign outBank12[0] = addr12b[6] ^ addr12b[0];
   assign outBank12[1] = addr12b[7] ^ addr12b[1];
   assign outBank12[2] = addr12b[8] ^ addr12b[2];
   assign outBank12[3] = addr12b[3];
   assign outAddr12[0] = addr12b[4];
   assign outAddr12[1] = addr12b[5];
   assign outAddr12[2] = addr12b[6];
   assign outAddr12[3] = addr12b[7];
   assign outAddr12[4] = addr12b[8];
   assign outBank_a12[0] = addr12c[6] ^ addr12c[0];
   assign outBank_a12[1] = addr12c[7] ^ addr12c[1];
   assign outBank_a12[2] = addr12c[8] ^ addr12c[2];
   assign outBank_a12[3] = addr12c[3];
   assign outAddr_a12[0] = addr12c[4];
   assign outAddr_a12[1] = addr12c[5];
   assign outAddr_a12[2] = addr12c[6];
   assign outAddr_a12[3] = addr12c[7];
   assign outAddr_a12[4] = addr12c[8];

   assign inBank13[0] = addr13[6] ^ addr13[0];
   assign inBank13[1] = addr13[7] ^ addr13[1];
   assign inBank13[2] = addr13[8] ^ addr13[2];
   assign inBank13[3] = addr13[3];
   assign inAddr13[0] = addr13[4];
   assign inAddr13[1] = addr13[5];
   assign inAddr13[2] = addr13[0];
   assign inAddr13[3] = addr13[1];
   assign inAddr13[4] = addr13[2];
   assign outBank13[0] = addr13b[6] ^ addr13b[0];
   assign outBank13[1] = addr13b[7] ^ addr13b[1];
   assign outBank13[2] = addr13b[8] ^ addr13b[2];
   assign outBank13[3] = addr13b[3];
   assign outAddr13[0] = addr13b[4];
   assign outAddr13[1] = addr13b[5];
   assign outAddr13[2] = addr13b[6];
   assign outAddr13[3] = addr13b[7];
   assign outAddr13[4] = addr13b[8];
   assign outBank_a13[0] = addr13c[6] ^ addr13c[0];
   assign outBank_a13[1] = addr13c[7] ^ addr13c[1];
   assign outBank_a13[2] = addr13c[8] ^ addr13c[2];
   assign outBank_a13[3] = addr13c[3];
   assign outAddr_a13[0] = addr13c[4];
   assign outAddr_a13[1] = addr13c[5];
   assign outAddr_a13[2] = addr13c[6];
   assign outAddr_a13[3] = addr13c[7];
   assign outAddr_a13[4] = addr13c[8];

   assign inBank14[0] = addr14[6] ^ addr14[0];
   assign inBank14[1] = addr14[7] ^ addr14[1];
   assign inBank14[2] = addr14[8] ^ addr14[2];
   assign inBank14[3] = addr14[3];
   assign inAddr14[0] = addr14[4];
   assign inAddr14[1] = addr14[5];
   assign inAddr14[2] = addr14[0];
   assign inAddr14[3] = addr14[1];
   assign inAddr14[4] = addr14[2];
   assign outBank14[0] = addr14b[6] ^ addr14b[0];
   assign outBank14[1] = addr14b[7] ^ addr14b[1];
   assign outBank14[2] = addr14b[8] ^ addr14b[2];
   assign outBank14[3] = addr14b[3];
   assign outAddr14[0] = addr14b[4];
   assign outAddr14[1] = addr14b[5];
   assign outAddr14[2] = addr14b[6];
   assign outAddr14[3] = addr14b[7];
   assign outAddr14[4] = addr14b[8];
   assign outBank_a14[0] = addr14c[6] ^ addr14c[0];
   assign outBank_a14[1] = addr14c[7] ^ addr14c[1];
   assign outBank_a14[2] = addr14c[8] ^ addr14c[2];
   assign outBank_a14[3] = addr14c[3];
   assign outAddr_a14[0] = addr14c[4];
   assign outAddr_a14[1] = addr14c[5];
   assign outAddr_a14[2] = addr14c[6];
   assign outAddr_a14[3] = addr14c[7];
   assign outAddr_a14[4] = addr14c[8];

   assign inBank15[0] = addr15[6] ^ addr15[0];
   assign inBank15[1] = addr15[7] ^ addr15[1];
   assign inBank15[2] = addr15[8] ^ addr15[2];
   assign inBank15[3] = addr15[3];
   assign inAddr15[0] = addr15[4];
   assign inAddr15[1] = addr15[5];
   assign inAddr15[2] = addr15[0];
   assign inAddr15[3] = addr15[1];
   assign inAddr15[4] = addr15[2];
   assign outBank15[0] = addr15b[6] ^ addr15b[0];
   assign outBank15[1] = addr15b[7] ^ addr15b[1];
   assign outBank15[2] = addr15b[8] ^ addr15b[2];
   assign outBank15[3] = addr15b[3];
   assign outAddr15[0] = addr15b[4];
   assign outAddr15[1] = addr15b[5];
   assign outAddr15[2] = addr15b[6];
   assign outAddr15[3] = addr15b[7];
   assign outAddr15[4] = addr15b[8];
   assign outBank_a15[0] = addr15c[6] ^ addr15c[0];
   assign outBank_a15[1] = addr15c[7] ^ addr15c[1];
   assign outBank_a15[2] = addr15c[8] ^ addr15c[2];
   assign outBank_a15[3] = addr15c[3];
   assign outAddr_a15[0] = addr15c[4];
   assign outAddr_a15[1] = addr15c[5];
   assign outAddr_a15[2] = addr15c[6];
   assign outAddr_a15[3] = addr15c[7];
   assign outAddr_a15[4] = addr15c[8];

   nextReg #(29, 5) nextReg_87697(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_87700(.X(next0), .Y(next_out), .clk(clk));


   memArray512_80783 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .x8(w_3_8[width+logDepth-1:logDepth]), .y8(ybuff8),
        .inAddr8(w_3_8[logDepth-1:0]),
        .outAddr8(u_3_8), 
        .x9(w_3_9[width+logDepth-1:logDepth]), .y9(ybuff9),
        .inAddr9(w_3_9[logDepth-1:0]),
        .outAddr9(u_3_9), 
        .x10(w_3_10[width+logDepth-1:logDepth]), .y10(ybuff10),
        .inAddr10(w_3_10[logDepth-1:0]),
        .outAddr10(u_3_10), 
        .x11(w_3_11[width+logDepth-1:logDepth]), .y11(ybuff11),
        .inAddr11(w_3_11[logDepth-1:0]),
        .outAddr11(u_3_11), 
        .x12(w_3_12[width+logDepth-1:logDepth]), .y12(ybuff12),
        .inAddr12(w_3_12[logDepth-1:0]),
        .outAddr12(u_3_12), 
        .x13(w_3_13[width+logDepth-1:logDepth]), .y13(ybuff13),
        .inAddr13(w_3_13[logDepth-1:0]),
        .outAddr13(u_3_13), 
        .x14(w_3_14[width+logDepth-1:logDepth]), .y14(ybuff14),
        .inAddr14(w_3_14[logDepth-1:0]),
        .outAddr14(u_3_14), 
        .x15(w_3_15[width+logDepth-1:logDepth]), .y15(ybuff15),
        .inAddr15(w_3_15[logDepth-1:0]),
        .outAddr15(u_3_15), 
        .clk(clk));

    reg resetOutCountRd2_32;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_32 <= 0;
        end
        else begin
            resetOutCountRd2_32 <= (inCount == 31) ? 1'b1 : 1'b0;
            if (resetOutCountRd2_32 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
      z_0_8 <= 0;
      z_0_9 <= 0;
      z_0_10 <= 0;
      z_0_11 <= 0;
      z_0_12 <= 0;
      z_0_13 <= 0;
      z_0_14 <= 0;
      z_0_15 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 28)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
      z_0_8 <= ybuff8;
      z_0_9 <= ybuff9;
      z_0_10 <= ybuff10;
      z_0_11 <= ybuff11;
      z_0_12 <= ybuff12;
      z_0_13 <= ybuff13;
      z_0_14 <= ybuff14;
      z_0_15 <= ybuff15;
         if (inCount == 28) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 31) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 28)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_1 = {x1, inAddr1};
    assign w_0_2 = {x2, inAddr2};
    assign w_0_3 = {x3, inAddr3};
    assign w_0_4 = {x4, inAddr4};
    assign w_0_5 = {x5, inAddr5};
    assign w_0_6 = {x6, inAddr6};
    assign w_0_7 = {x7, inAddr7};
    assign w_0_8 = {x8, inAddr8};
    assign w_0_9 = {x9, inAddr9};
    assign w_0_10 = {x10, inAddr10};
    assign w_0_11 = {x11, inAddr11};
    assign w_0_12 = {x12, inAddr12};
    assign w_0_13 = {x13, inAddr13};
    assign w_0_14 = {x14, inAddr14};
    assign w_0_15 = {x15, inAddr15};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign y8 = z_3_8;
    assign y9 = z_3_9;
    assign y10 = z_3_10;
    assign y11 = z_3_11;
    assign y12 = z_3_12;
    assign y13 = z_3_13;
    assign y14 = z_3_14;
    assign y15 = z_3_15;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    assign u_0_8 = outAddr_a8;
    assign u_0_9 = outAddr_a9;
    assign u_0_10 = outAddr_a10;
    assign u_0_11 = outAddr_a11;
    assign u_0_12 = outAddr_a12;
    assign u_0_13 = outAddr_a13;
    assign u_0_14 = outAddr_a14;
    assign u_0_15 = outAddr_a15;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[4];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_4), .y0(w_1_0), .y1(w_1_4), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_5), .y0(w_1_1), .y1(w_1_5), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_6), .y0(w_1_2), .y1(w_1_6), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_7), .y0(w_1_3), .y1(w_1_7), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_4(.x0(w_0_8), .x1(w_0_12), .y0(w_1_8), .y1(w_1_12), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_5(.x0(w_0_9), .x1(w_0_13), .y0(w_1_9), .y1(w_1_13), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_6(.x0(w_0_10), .x1(w_0_14), .y0(w_1_10), .y1(w_1_14), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_7(.x0(w_0_11), .x1(w_0_15), .y0(w_1_11), .y1(w_1_15), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;
    reg [width+logDepth-1:0] w_1_8_pipe;
    reg [width+logDepth-1:0] w_1_9_pipe;
    reg [width+logDepth-1:0] w_1_10_pipe;
    reg [width+logDepth-1:0] w_1_11_pipe;
    reg [width+logDepth-1:0] w_1_12_pipe;
    reg [width+logDepth-1:0] w_1_13_pipe;
    reg [width+logDepth-1:0] w_1_14_pipe;
    reg [width+logDepth-1:0] w_1_15_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
        w_1_8_pipe <= w_1_8;
        w_1_9_pipe <= w_1_9;
        w_1_10_pipe <= w_1_10;
        w_1_11_pipe <= w_1_11;
        w_1_12_pipe <= w_1_12;
        w_1_13_pipe <= w_1_13;
        w_1_14_pipe <= w_1_14;
        w_1_15_pipe <= w_1_15;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[3];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_2_pipe), .y0(w_2_0), .y1(w_2_2), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_3_pipe), .y0(w_2_1), .y1(w_2_3), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_4_pipe), .x1(w_1_6_pipe), .y0(w_2_4), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_5_pipe), .x1(w_1_7_pipe), .y0(w_2_5), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_4(.x0(w_1_8_pipe), .x1(w_1_10_pipe), .y0(w_2_8), .y1(w_2_10), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_5(.x0(w_1_9_pipe), .x1(w_1_11_pipe), .y0(w_2_9), .y1(w_2_11), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_6(.x0(w_1_12_pipe), .x1(w_1_14_pipe), .y0(w_2_12), .y1(w_2_14), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_7(.x0(w_1_13_pipe), .x1(w_1_15_pipe), .y0(w_2_13), .y1(w_2_15), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;
    reg [width+logDepth-1:0] w_2_8_pipe;
    reg [width+logDepth-1:0] w_2_9_pipe;
    reg [width+logDepth-1:0] w_2_10_pipe;
    reg [width+logDepth-1:0] w_2_11_pipe;
    reg [width+logDepth-1:0] w_2_12_pipe;
    reg [width+logDepth-1:0] w_2_13_pipe;
    reg [width+logDepth-1:0] w_2_14_pipe;
    reg [width+logDepth-1:0] w_2_15_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
        w_2_8_pipe <= w_2_8;
        w_2_9_pipe <= w_2_9;
        w_2_10_pipe <= w_2_10;
        w_2_11_pipe <= w_2_11;
        w_2_12_pipe <= w_2_12;
        w_2_13_pipe <= w_2_13;
        w_2_14_pipe <= w_2_14;
        w_2_15_pipe <= w_2_15;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[2];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_1_pipe), .y0(w_3_0), .y1(w_3_1), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_2_pipe), .x1(w_2_3_pipe), .y0(w_3_2), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_5_pipe), .y0(w_3_4), .y1(w_3_5), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_6_pipe), .x1(w_2_7_pipe), .y0(w_3_6), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_4(.x0(w_2_8_pipe), .x1(w_2_9_pipe), .y0(w_3_8), .y1(w_3_9), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_5(.x0(w_2_10_pipe), .x1(w_2_11_pipe), .y0(w_3_10), .y1(w_3_11), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_6(.x0(w_2_12_pipe), .x1(w_2_13_pipe), .y0(w_3_12), .y1(w_3_13), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_7(.x0(w_2_14_pipe), .x1(w_2_15_pipe), .y0(w_3_14), .y1(w_3_15), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[4];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_4), .y0(z_1_0), .y1(z_1_4), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_5), .y0(z_1_1), .y1(z_1_5), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_6), .y0(z_1_2), .y1(z_1_6), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_7), .y0(z_1_3), .y1(z_1_7), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_4(.x0(z_0_8), .x1(z_0_12), .y0(z_1_8), .y1(z_1_12), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_5(.x0(z_0_9), .x1(z_0_13), .y0(z_1_9), .y1(z_1_13), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_6(.x0(z_0_10), .x1(z_0_14), .y0(z_1_10), .y1(z_1_14), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_7(.x0(z_0_11), .x1(z_0_15), .y0(z_1_11), .y1(z_1_15), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;
    reg [width-1:0] z_1_8_pipe;
    reg [width-1:0] z_1_9_pipe;
    reg [width-1:0] z_1_10_pipe;
    reg [width-1:0] z_1_11_pipe;
    reg [width-1:0] z_1_12_pipe;
    reg [width-1:0] z_1_13_pipe;
    reg [width-1:0] z_1_14_pipe;
    reg [width-1:0] z_1_15_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
        z_1_8_pipe <= z_1_8;
        z_1_9_pipe <= z_1_9;
        z_1_10_pipe <= z_1_10;
        z_1_11_pipe <= z_1_11;
        z_1_12_pipe <= z_1_12;
        z_1_13_pipe <= z_1_13;
        z_1_14_pipe <= z_1_14;
        z_1_15_pipe <= z_1_15;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[3];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_2_pipe), .y0(z_2_0), .y1(z_2_2), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_3_pipe), .y0(z_2_1), .y1(z_2_3), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_4_pipe), .x1(z_1_6_pipe), .y0(z_2_4), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_5_pipe), .x1(z_1_7_pipe), .y0(z_2_5), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_4(.x0(z_1_8_pipe), .x1(z_1_10_pipe), .y0(z_2_8), .y1(z_2_10), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_5(.x0(z_1_9_pipe), .x1(z_1_11_pipe), .y0(z_2_9), .y1(z_2_11), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_6(.x0(z_1_12_pipe), .x1(z_1_14_pipe), .y0(z_2_12), .y1(z_2_14), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_7(.x0(z_1_13_pipe), .x1(z_1_15_pipe), .y0(z_2_13), .y1(z_2_15), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;
    reg [width-1:0] z_2_8_pipe;
    reg [width-1:0] z_2_9_pipe;
    reg [width-1:0] z_2_10_pipe;
    reg [width-1:0] z_2_11_pipe;
    reg [width-1:0] z_2_12_pipe;
    reg [width-1:0] z_2_13_pipe;
    reg [width-1:0] z_2_14_pipe;
    reg [width-1:0] z_2_15_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
        z_2_8_pipe <= z_2_8;
        z_2_9_pipe <= z_2_9;
        z_2_10_pipe <= z_2_10;
        z_2_11_pipe <= z_2_11;
        z_2_12_pipe <= z_2_12;
        z_2_13_pipe <= z_2_13;
        z_2_14_pipe <= z_2_14;
        z_2_15_pipe <= z_2_15;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[2];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_1_pipe), .y0(z_3_0), .y1(z_3_1), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_2_pipe), .x1(z_2_3_pipe), .y0(z_3_2), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_5_pipe), .y0(z_3_4), .y1(z_3_5), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_6_pipe), .x1(z_2_7_pipe), .y0(z_3_6), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_4(.x0(z_2_8_pipe), .x1(z_2_9_pipe), .y0(z_3_8), .y1(z_3_9), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_5(.x0(z_2_10_pipe), .x1(z_2_11_pipe), .y0(z_3_10), .y1(z_3_11), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_6(.x0(z_2_12_pipe), .x1(z_2_13_pipe), .y0(z_3_12), .y1(z_3_13), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_7(.x0(z_2_14_pipe), .x1(z_2_15_pipe), .y0(z_3_14), .y1(z_3_15), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[4];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_4), .y0(u_1_0), .y1(u_1_4), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_5), .y0(u_1_1), .y1(u_1_5), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_6), .y0(u_1_2), .y1(u_1_6), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_7), .y0(u_1_3), .y1(u_1_7), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_4(.x0(u_0_8), .x1(u_0_12), .y0(u_1_8), .y1(u_1_12), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_5(.x0(u_0_9), .x1(u_0_13), .y0(u_1_9), .y1(u_1_13), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_6(.x0(u_0_10), .x1(u_0_14), .y0(u_1_10), .y1(u_1_14), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_7(.x0(u_0_11), .x1(u_0_15), .y0(u_1_11), .y1(u_1_15), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;
    reg [logDepth-1:0] u_1_8_pipe;
    reg [logDepth-1:0] u_1_9_pipe;
    reg [logDepth-1:0] u_1_10_pipe;
    reg [logDepth-1:0] u_1_11_pipe;
    reg [logDepth-1:0] u_1_12_pipe;
    reg [logDepth-1:0] u_1_13_pipe;
    reg [logDepth-1:0] u_1_14_pipe;
    reg [logDepth-1:0] u_1_15_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
        u_1_8_pipe <= u_1_8;
        u_1_9_pipe <= u_1_9;
        u_1_10_pipe <= u_1_10;
        u_1_11_pipe <= u_1_11;
        u_1_12_pipe <= u_1_12;
        u_1_13_pipe <= u_1_13;
        u_1_14_pipe <= u_1_14;
        u_1_15_pipe <= u_1_15;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[3];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_2_pipe), .y0(u_2_0), .y1(u_2_2), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_3_pipe), .y0(u_2_1), .y1(u_2_3), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_4_pipe), .x1(u_1_6_pipe), .y0(u_2_4), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_5_pipe), .x1(u_1_7_pipe), .y0(u_2_5), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_4(.x0(u_1_8_pipe), .x1(u_1_10_pipe), .y0(u_2_8), .y1(u_2_10), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_5(.x0(u_1_9_pipe), .x1(u_1_11_pipe), .y0(u_2_9), .y1(u_2_11), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_6(.x0(u_1_12_pipe), .x1(u_1_14_pipe), .y0(u_2_12), .y1(u_2_14), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_7(.x0(u_1_13_pipe), .x1(u_1_15_pipe), .y0(u_2_13), .y1(u_2_15), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;
    reg [logDepth-1:0] u_2_8_pipe;
    reg [logDepth-1:0] u_2_9_pipe;
    reg [logDepth-1:0] u_2_10_pipe;
    reg [logDepth-1:0] u_2_11_pipe;
    reg [logDepth-1:0] u_2_12_pipe;
    reg [logDepth-1:0] u_2_13_pipe;
    reg [logDepth-1:0] u_2_14_pipe;
    reg [logDepth-1:0] u_2_15_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
        u_2_8_pipe <= u_2_8;
        u_2_9_pipe <= u_2_9;
        u_2_10_pipe <= u_2_10;
        u_2_11_pipe <= u_2_11;
        u_2_12_pipe <= u_2_12;
        u_2_13_pipe <= u_2_13;
        u_2_14_pipe <= u_2_14;
        u_2_15_pipe <= u_2_15;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[2];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_1_pipe), .y0(u_3_0), .y1(u_3_1), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_2_pipe), .x1(u_2_3_pipe), .y0(u_3_2), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_5_pipe), .y0(u_3_4), .y1(u_3_5), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_6_pipe), .x1(u_2_7_pipe), .y0(u_3_6), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_4(.x0(u_2_8_pipe), .x1(u_2_9_pipe), .y0(u_3_8), .y1(u_3_9), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_5(.x0(u_2_10_pipe), .x1(u_2_11_pipe), .y0(u_3_10), .y1(u_3_11), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_6(.x0(u_2_12_pipe), .x1(u_2_13_pipe), .y0(u_3_12), .y1(u_3_13), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_7(.x0(u_2_14_pipe), .x1(u_2_15_pipe), .y0(u_3_14), .y1(u_3_15), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_80783(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                x8, y8,
                inAddr8,
                outAddr8,
                x9, y9,
                inAddr9,
                outAddr9,
                x10, y10,
                inAddr10,
                outAddr10,
                x11, y11,
                inAddr11,
                outAddr11,
                x12, y12,
                inAddr12,
                outAddr12,
                x13, y13,
                inAddr13,
                outAddr13,
                x14, y14,
                inAddr14,
                outAddr14,
                x15, y15,
                inAddr15,
                outAddr15,
                clk, inFlip, outFlip);

   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   input [width-1:0]   x8;
   output [width-1:0]  y8;
   input [logDepth-1:0] inAddr8, outAddr8;
   input [width-1:0]   x9;
   output [width-1:0]  y9;
   input [logDepth-1:0] inAddr9, outAddr9;
   input [width-1:0]   x10;
   output [width-1:0]  y10;
   input [logDepth-1:0] inAddr10, outAddr10;
   input [width-1:0]   x11;
   output [width-1:0]  y11;
   input [logDepth-1:0] inAddr11, outAddr11;
   input [width-1:0]   x12;
   output [width-1:0]  y12;
   input [logDepth-1:0] inAddr12, outAddr12;
   input [width-1:0]   x13;
   output [width-1:0]  y13;
   input [logDepth-1:0] inAddr13, outAddr13;
   input [width-1:0]   x14;
   output [width-1:0]  y14;
   input [logDepth-1:0] inAddr14, outAddr14;
   input [width-1:0]   x15;
   output [width-1:0]  y15;
   input [logDepth-1:0] inAddr15, outAddr15;
   nextReg #(32, 5) nextReg_87705(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod8(.in(x8), .out(y8), .inAddr({inFlip, inAddr8}),
	   .outAddr({outFlip, outAddr8}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod9(.in(x9), .out(y9), .inAddr({inFlip, inAddr9}),
	   .outAddr({outFlip, outAddr9}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod10(.in(x10), .out(y10), .inAddr({inFlip, inAddr10}),
	   .outAddr({outFlip, outAddr10}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod11(.in(x11), .out(y11), .inAddr({inFlip, inAddr11}),
	   .outAddr({outFlip, outAddr11}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod12(.in(x12), .out(y12), .inAddr({inFlip, inAddr12}),
	   .outAddr({outFlip, outAddr12}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod13(.in(x13), .out(y13), .inAddr({inFlip, inAddr13}),
	   .outAddr({outFlip, outAddr13}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod14(.in(x14), .out(y14), .inAddr({inFlip, inAddr14}),
	   .outAddr({outFlip, outAddr14}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod15(.in(x15), .out(y15), .inAddr({inFlip, inAddr15}),
	   .outAddr({outFlip, outAddr15}), .writeSel(1'b1), .clk(clk));   
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule


module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module switch(ctrl, x0, x1, y0, y1);
    parameter width = 16;
    input [width-1:0] x0, x1;
    output [width-1:0] y0, y1;
    input ctrl;
    assign y0 = (ctrl == 0) ? x0 : x1;
    assign y1 = (ctrl == 0) ? x1 : x0;
endmodule

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

// Latency: 190
// Gap: 190
module ICompose_84536(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   reg next_out;
   input clk, reset, next;

   reg [5:0] cycle_count;
   reg [5:0] count;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   reg [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   reg int_next;
   reg state;
   wire [63:0] t0; 
   reg [63:0] s0;
   wire [63:0] t1; 
   reg [63:0] s1;
   wire [63:0] t2; 
   reg [63:0] s2;
   wire [63:0] t3; 
   reg [63:0] s3;
   wire [63:0] t4; 
   reg [63:0] s4;
   wire [63:0] t5; 
   reg [63:0] s5;
   wire [63:0] t6; 
   reg [63:0] s6;
   wire [63:0] t7; 
   reg [63:0] s7;
   wire [63:0] t8; 
   reg [63:0] s8;
   wire [63:0] t9; 
   reg [63:0] s9;
   wire [63:0] t10; 
   reg [63:0] s10;
   wire [63:0] t11; 
   reg [63:0] s11;
   wire [63:0] t12; 
   reg [63:0] s12;
   wire [63:0] t13; 
   reg [63:0] s13;
   wire [63:0] t14; 
   reg [63:0] s14;
   wire [63:0] t15; 
   reg [63:0] s15;
   wire [63:0] t16; 
   reg [63:0] s16;
   wire [63:0] t17; 
   reg [63:0] s17;
   wire [63:0] t18; 
   reg [63:0] s18;
   wire [63:0] t19; 
   reg [63:0] s19;
   wire [63:0] t20; 
   reg [63:0] s20;
   wire [63:0] t21; 
   reg [63:0] s21;
   wire [63:0] t22; 
   reg [63:0] s22;
   wire [63:0] t23; 
   reg [63:0] s23;
   wire [63:0] t24; 
   reg [63:0] s24;
   wire [63:0] t25; 
   reg [63:0] s25;
   wire [63:0] t26; 
   reg [63:0] s26;
   wire [63:0] t27; 
   reg [63:0] s27;
   wire [63:0] t28; 
   reg [63:0] s28;
   wire [63:0] t29; 
   reg [63:0] s29;
   wire [63:0] t30; 
   reg [63:0] s30;
   wire [63:0] t31; 
   reg [63:0] s31;

   reg [1:0] iri_state;
   wire int_next_out;
   reg [2:0] i1;

   statementList84534 instList87710 (.clk(clk), .reset(reset), .next(int_next), .next_out(int_next_out),
      .i1_in(i1),
    .X0(s0), .Y0(t0),
    .X1(s1), .Y1(t1),
    .X2(s2), .Y2(t2),
    .X3(s3), .Y3(t3),
    .X4(s4), .Y4(t4),
    .X5(s5), .Y5(t5),
    .X6(s6), .Y6(t6),
    .X7(s7), .Y7(t7),
    .X8(s8), .Y8(t8),
    .X9(s9), .Y9(t9),
    .X10(s10), .Y10(t10),
    .X11(s11), .Y11(t11),
    .X12(s12), .Y12(t12),
    .X13(s13), .Y13(t13),
    .X14(s14), .Y14(t14),
    .X15(s15), .Y15(t15),
    .X16(s16), .Y16(t16),
    .X17(s17), .Y17(t17),
    .X18(s18), .Y18(t18),
    .X19(s19), .Y19(t19),
    .X20(s20), .Y20(t20),
    .X21(s21), .Y21(t21),
    .X22(s22), .Y22(t22),
    .X23(s23), .Y23(t23),
    .X24(s24), .Y24(t24),
    .X25(s25), .Y25(t25),
    .X26(s26), .Y26(t26),
    .X27(s27), .Y27(t27),
    .X28(s28), .Y28(t28),
    .X29(s29), .Y29(t29),
    .X30(s30), .Y30(t30),
    .X31(s31), .Y31(t31));

   always @(posedge clk) begin
      if (reset == 1) begin
         int_next <= 0;
         i1 <= 2;
         cycle_count <= 0;
         next_out <= 0;
         iri_state <= 0;
         Y0 <= 0;
         Y1 <= 0;
         Y2 <= 0;
         Y3 <= 0;
         Y4 <= 0;
         Y5 <= 0;
         Y6 <= 0;
         Y7 <= 0;
         Y8 <= 0;
         Y9 <= 0;
         Y10 <= 0;
         Y11 <= 0;
         Y12 <= 0;
         Y13 <= 0;
         Y14 <= 0;
         Y15 <= 0;
         Y16 <= 0;
         Y17 <= 0;
         Y18 <= 0;
         Y19 <= 0;
         Y20 <= 0;
         Y21 <= 0;
         Y22 <= 0;
         Y23 <= 0;
         Y24 <= 0;
         Y25 <= 0;
         Y26 <= 0;
         Y27 <= 0;
         Y28 <= 0;
         Y29 <= 0;
         Y30 <= 0;
         Y31 <= 0;
      end
      else begin
         Y0 <= t0;
         Y1 <= t1;
         Y2 <= t2;
         Y3 <= t3;
         Y4 <= t4;
         Y5 <= t5;
         Y6 <= t6;
         Y7 <= t7;
         Y8 <= t8;
         Y9 <= t9;
         Y10 <= t10;
         Y11 <= t11;
         Y12 <= t12;
         Y13 <= t13;
         Y14 <= t14;
         Y15 <= t15;
         Y16 <= t16;
         Y17 <= t17;
         Y18 <= t18;
         Y19 <= t19;
         Y20 <= t20;
         Y21 <= t21;
         Y22 <= t22;
         Y23 <= t23;
         Y24 <= t24;
         Y25 <= t25;
         Y26 <= t26;
         Y27 <= t27;
         Y28 <= t28;
         Y29 <= t29;
         Y30 <= t30;
         Y31 <= t31;
         next_out <= 0;
         case (iri_state)
            0: begin
               i1 <= 2;
               cycle_count <= 0;
               if (next == 1) begin
                  int_next <= 1;
                  iri_state <= 1;
                  
               end
               else begin
                  int_next <= 0;
                  iri_state <= 0;
               end
            end
            1: begin
               int_next <= 0;
               cycle_count <= cycle_count + 1;
               i1 <= i1;
               if (cycle_count < 61)
                  iri_state <= 1;
               else
                  iri_state <= 2;
            end
            2: begin
               cycle_count <= 0;
               i1 <= i1 - 1;
               if (i1 > 0) begin
                  iri_state <= 1;
                  int_next <= 1;
               end
               else begin
                  iri_state <= 0;
                  next_out <= 1;
                  int_next <= 0;
               end
            end
         endcase               
      end
   end

   always @(posedge clk) begin
      if (reset == 1) begin
         state <= 0;
         count <= 0;
         s0 <= 0;
         s1 <= 0;
         s2 <= 0;
         s3 <= 0;
         s4 <= 0;
         s5 <= 0;
         s6 <= 0;
         s7 <= 0;
         s8 <= 0;
         s9 <= 0;
         s10 <= 0;
         s11 <= 0;
         s12 <= 0;
         s13 <= 0;
         s14 <= 0;
         s15 <= 0;
         s16 <= 0;
         s17 <= 0;
         s18 <= 0;
         s19 <= 0;
         s20 <= 0;
         s21 <= 0;
         s22 <= 0;
         s23 <= 0;
         s24 <= 0;
         s25 <= 0;
         s26 <= 0;
         s27 <= 0;
         s28 <= 0;
         s29 <= 0;
         s30 <= 0;
         s31 <= 0;
      end      
      else begin
         case (state)
            0: begin
               count <= 0;
               if (next == 1) begin
                  state <= 1;
                  count <= 0;
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  s4 <= X4; 
                  s5 <= X5; 
                  s6 <= X6; 
                  s7 <= X7; 
                  s8 <= X8; 
                  s9 <= X9; 
                  s10 <= X10; 
                  s11 <= X11; 
                  s12 <= X12; 
                  s13 <= X13; 
                  s14 <= X14; 
                  s15 <= X15; 
                  s16 <= X16; 
                  s17 <= X17; 
                  s18 <= X18; 
                  s19 <= X19; 
                  s20 <= X20; 
                  s21 <= X21; 
                  s22 <= X22; 
                  s23 <= X23; 
                  s24 <= X24; 
                  s25 <= X25; 
                  s26 <= X26; 
                  s27 <= X27; 
                  s28 <= X28; 
                  s29 <= X29; 
                  s30 <= X30; 
                  s31 <= X31; 
               end
               else begin
                  state <= 0;
                  count <= 0;
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  s4 <= t4; 
                  s5 <= t5; 
                  s6 <= t6; 
                  s7 <= t7; 
                  s8 <= t8; 
                  s9 <= t9; 
                  s10 <= t10; 
                  s11 <= t11; 
                  s12 <= t12; 
                  s13 <= t13; 
                  s14 <= t14; 
                  s15 <= t15; 
                  s16 <= t16; 
                  s17 <= t17; 
                  s18 <= t18; 
                  s19 <= t19; 
                  s20 <= t20; 
                  s21 <= t21; 
                  s22 <= t22; 
                  s23 <= t23; 
                  s24 <= t24; 
                  s25 <= t25; 
                  s26 <= t26; 
                  s27 <= t27; 
                  s28 <= t28; 
                  s29 <= t29; 
                  s30 <= t30; 
                  s31 <= t31; 
               end               
            end
            1: begin
               count <= count + 1;
               if (count < 32) begin
                  s0 <= X0; 
                  s1 <= X1; 
                  s2 <= X2; 
                  s3 <= X3; 
                  s4 <= X4; 
                  s5 <= X5; 
                  s6 <= X6; 
                  s7 <= X7; 
                  s8 <= X8; 
                  s9 <= X9; 
                  s10 <= X10; 
                  s11 <= X11; 
                  s12 <= X12; 
                  s13 <= X13; 
                  s14 <= X14; 
                  s15 <= X15; 
                  s16 <= X16; 
                  s17 <= X17; 
                  s18 <= X18; 
                  s19 <= X19; 
                  s20 <= X20; 
                  s21 <= X21; 
                  s22 <= X22; 
                  s23 <= X23; 
                  s24 <= X24; 
                  s25 <= X25; 
                  s26 <= X26; 
                  s27 <= X27; 
                  s28 <= X28; 
                  s29 <= X29; 
                  s30 <= X30; 
                  s31 <= X31; 
                  state <= 1;                    
               end
               else begin
                  s0 <= t0; 
                  s1 <= t1; 
                  s2 <= t2; 
                  s3 <= t3; 
                  s4 <= t4; 
                  s5 <= t5; 
                  s6 <= t6; 
                  s7 <= t7; 
                  s8 <= t8; 
                  s9 <= t9; 
                  s10 <= t10; 
                  s11 <= t11; 
                  s12 <= t12; 
                  s13 <= t13; 
                  s14 <= t14; 
                  s15 <= t15; 
                  s16 <= t16; 
                  s17 <= t17; 
                  s18 <= t18; 
                  s19 <= t19; 
                  s20 <= t20; 
                  s21 <= t21; 
                  s22 <= t22; 
                  s23 <= t23; 
                  s24 <= t24; 
                  s25 <= t25; 
                  s26 <= t26; 
                  s27 <= t27; 
                  s28 <= t28; 
                  s29 <= t29; 
                  s30 <= t30; 
                  s31 <= t31; 
                  state <= 0;
               end
            end
         endcase               
      end
   end
endmodule

// Latency: 62
// Gap: 32
// module_name_is:statementList84534
module statementList84534(clk, reset, next, next_out,
   i1_in,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [2:0] i1_in;
   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [63:0] t0_0;
   wire [63:0] t0_1;
   wire [63:0] t0_2;
   wire [63:0] t0_3;
   wire [63:0] t0_4;
   wire [63:0] t0_5;
   wire [63:0] t0_6;
   wire [63:0] t0_7;
   wire [63:0] t0_8;
   wire [63:0] t0_9;
   wire [63:0] t0_10;
   wire [63:0] t0_11;
   wire [63:0] t0_12;
   wire [63:0] t0_13;
   wire [63:0] t0_14;
   wire [63:0] t0_15;
   wire [63:0] t0_16;
   wire [63:0] t0_17;
   wire [63:0] t0_18;
   wire [63:0] t0_19;
   wire [63:0] t0_20;
   wire [63:0] t0_21;
   wire [63:0] t0_22;
   wire [63:0] t0_23;
   wire [63:0] t0_24;
   wire [63:0] t0_25;
   wire [63:0] t0_26;
   wire [63:0] t0_27;
   wire [63:0] t0_28;
   wire [63:0] t0_29;
   wire [63:0] t0_30;
   wire [63:0] t0_31;
   wire next_0;
   wire [63:0] t1_0;
   wire [63:0] t1_1;
   wire [63:0] t1_2;
   wire [63:0] t1_3;
   wire [63:0] t1_4;
   wire [63:0] t1_5;
   wire [63:0] t1_6;
   wire [63:0] t1_7;
   wire [63:0] t1_8;
   wire [63:0] t1_9;
   wire [63:0] t1_10;
   wire [63:0] t1_11;
   wire [63:0] t1_12;
   wire [63:0] t1_13;
   wire [63:0] t1_14;
   wire [63:0] t1_15;
   wire [63:0] t1_16;
   wire [63:0] t1_17;
   wire [63:0] t1_18;
   wire [63:0] t1_19;
   wire [63:0] t1_20;
   wire [63:0] t1_21;
   wire [63:0] t1_22;
   wire [63:0] t1_23;
   wire [63:0] t1_24;
   wire [63:0] t1_25;
   wire [63:0] t1_26;
   wire [63:0] t1_27;
   wire [63:0] t1_28;
   wire [63:0] t1_29;
   wire [63:0] t1_30;
   wire [63:0] t1_31;
   wire next_1;
   wire [63:0] t2_0;
   wire [63:0] t2_1;
   wire [63:0] t2_2;
   wire [63:0] t2_3;
   wire [63:0] t2_4;
   wire [63:0] t2_5;
   wire [63:0] t2_6;
   wire [63:0] t2_7;
   wire [63:0] t2_8;
   wire [63:0] t2_9;
   wire [63:0] t2_10;
   wire [63:0] t2_11;
   wire [63:0] t2_12;
   wire [63:0] t2_13;
   wire [63:0] t2_14;
   wire [63:0] t2_15;
   wire [63:0] t2_16;
   wire [63:0] t2_17;
   wire [63:0] t2_18;
   wire [63:0] t2_19;
   wire [63:0] t2_20;
   wire [63:0] t2_21;
   wire [63:0] t2_22;
   wire [63:0] t2_23;
   wire [63:0] t2_24;
   wire [63:0] t2_25;
   wire [63:0] t2_26;
   wire [63:0] t2_27;
   wire [63:0] t2_28;
   wire [63:0] t2_29;
   wire [63:0] t2_30;
   wire [63:0] t2_31;
   wire next_2;
   wire [63:0] t3_0;
   wire [63:0] t3_1;
   wire [63:0] t3_2;
   wire [63:0] t3_3;
   wire [63:0] t3_4;
   wire [63:0] t3_5;
   wire [63:0] t3_6;
   wire [63:0] t3_7;
   wire [63:0] t3_8;
   wire [63:0] t3_9;
   wire [63:0] t3_10;
   wire [63:0] t3_11;
   wire [63:0] t3_12;
   wire [63:0] t3_13;
   wire [63:0] t3_14;
   wire [63:0] t3_15;
   wire [63:0] t3_16;
   wire [63:0] t3_17;
   wire [63:0] t3_18;
   wire [63:0] t3_19;
   wire [63:0] t3_20;
   wire [63:0] t3_21;
   wire [63:0] t3_22;
   wire [63:0] t3_23;
   wire [63:0] t3_24;
   wire [63:0] t3_25;
   wire [63:0] t3_26;
   wire [63:0] t3_27;
   wire [63:0] t3_28;
   wire [63:0] t3_29;
   wire [63:0] t3_30;
   wire [63:0] t3_31;
   wire next_3;
   wire [2:0] i1;
   wire [2:0] i1_0;
   assign t0_0 = X0;
   assign Y0 = t3_0;
   assign t0_1 = X1;
   assign Y1 = t3_1;
   assign t0_2 = X2;
   assign Y2 = t3_2;
   assign t0_3 = X3;
   assign Y3 = t3_3;
   assign t0_4 = X4;
   assign Y4 = t3_4;
   assign t0_5 = X5;
   assign Y5 = t3_5;
   assign t0_6 = X6;
   assign Y6 = t3_6;
   assign t0_7 = X7;
   assign Y7 = t3_7;
   assign t0_8 = X8;
   assign Y8 = t3_8;
   assign t0_9 = X9;
   assign Y9 = t3_9;
   assign t0_10 = X10;
   assign Y10 = t3_10;
   assign t0_11 = X11;
   assign Y11 = t3_11;
   assign t0_12 = X12;
   assign Y12 = t3_12;
   assign t0_13 = X13;
   assign Y13 = t3_13;
   assign t0_14 = X14;
   assign Y14 = t3_14;
   assign t0_15 = X15;
   assign Y15 = t3_15;
   assign t0_16 = X16;
   assign Y16 = t3_16;
   assign t0_17 = X17;
   assign Y17 = t3_17;
   assign t0_18 = X18;
   assign Y18 = t3_18;
   assign t0_19 = X19;
   assign Y19 = t3_19;
   assign t0_20 = X20;
   assign Y20 = t3_20;
   assign t0_21 = X21;
   assign Y21 = t3_21;
   assign t0_22 = X22;
   assign Y22 = t3_22;
   assign t0_23 = X23;
   assign Y23 = t3_23;
   assign t0_24 = X24;
   assign Y24 = t3_24;
   assign t0_25 = X25;
   assign Y25 = t3_25;
   assign t0_26 = X26;
   assign Y26 = t3_26;
   assign t0_27 = X27;
   assign Y27 = t3_27;
   assign t0_28 = X28;
   assign Y28 = t3_28;
   assign t0_29 = X29;
   assign Y29 = t3_29;
   assign t0_30 = X30;
   assign Y30 = t3_30;
   assign t0_31 = X31;
   assign Y31 = t3_31;
   assign next_0 = next;
   assign next_out = next_3;

   assign i1_0 = i1_in;

// latency=16, gap=32
   DirSum_83357 DirSumInst87713(.next(next_0), .clk(clk), .reset(reset), .next_out(next_1),
.i1(i1_0),
       .X0(t0_0), .Y0(t1_0),
       .X1(t0_1), .Y1(t1_1),
       .X2(t0_2), .Y2(t1_2),
       .X3(t0_3), .Y3(t1_3),
       .X4(t0_4), .Y4(t1_4),
       .X5(t0_5), .Y5(t1_5),
       .X6(t0_6), .Y6(t1_6),
       .X7(t0_7), .Y7(t1_7),
       .X8(t0_8), .Y8(t1_8),
       .X9(t0_9), .Y9(t1_9),
       .X10(t0_10), .Y10(t1_10),
       .X11(t0_11), .Y11(t1_11),
       .X12(t0_12), .Y12(t1_12),
       .X13(t0_13), .Y13(t1_13),
       .X14(t0_14), .Y14(t1_14),
       .X15(t0_15), .Y15(t1_15),
       .X16(t0_16), .Y16(t1_16),
       .X17(t0_17), .Y17(t1_17),
       .X18(t0_18), .Y18(t1_18),
       .X19(t0_19), .Y19(t1_19),
       .X20(t0_20), .Y20(t1_20),
       .X21(t0_21), .Y21(t1_21),
       .X22(t0_22), .Y22(t1_22),
       .X23(t0_23), .Y23(t1_23),
       .X24(t0_24), .Y24(t1_24),
       .X25(t0_25), .Y25(t1_25),
       .X26(t0_26), .Y26(t1_26),
       .X27(t0_27), .Y27(t1_27),
       .X28(t0_28), .Y28(t1_28),
       .X29(t0_29), .Y29(t1_29),
       .X30(t0_30), .Y30(t1_30),
       .X31(t0_31), .Y31(t1_31));


// latency=11, gap=32
   codeBlock83359 codeBlockIsnt87714(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15),
       .X16_in(t1_16), .Y16(t2_16),
       .X17_in(t1_17), .Y17(t2_17),
       .X18_in(t1_18), .Y18(t2_18),
       .X19_in(t1_19), .Y19(t2_19),
       .X20_in(t1_20), .Y20(t2_20),
       .X21_in(t1_21), .Y21(t2_21),
       .X22_in(t1_22), .Y22(t2_22),
       .X23_in(t1_23), .Y23(t2_23),
       .X24_in(t1_24), .Y24(t2_24),
       .X25_in(t1_25), .Y25(t2_25),
       .X26_in(t1_26), .Y26(t2_26),
       .X27_in(t1_27), .Y27(t2_27),
       .X28_in(t1_28), .Y28(t2_28),
       .X29_in(t1_29), .Y29(t2_29),
       .X30_in(t1_30), .Y30(t2_30),
       .X31_in(t1_31), .Y31(t2_31));


// latency=35, gap=32
   rc84532 instrc87715(.clk(clk), .reset(reset), .next(next_2), .next_out(next_3),
    .X0(t2_0), .Y0(t3_0),
    .X1(t2_1), .Y1(t3_1),
    .X2(t2_2), .Y2(t3_2),
    .X3(t2_3), .Y3(t3_3),
    .X4(t2_4), .Y4(t3_4),
    .X5(t2_5), .Y5(t3_5),
    .X6(t2_6), .Y6(t3_6),
    .X7(t2_7), .Y7(t3_7),
    .X8(t2_8), .Y8(t3_8),
    .X9(t2_9), .Y9(t3_9),
    .X10(t2_10), .Y10(t3_10),
    .X11(t2_11), .Y11(t3_11),
    .X12(t2_12), .Y12(t3_12),
    .X13(t2_13), .Y13(t3_13),
    .X14(t2_14), .Y14(t3_14),
    .X15(t2_15), .Y15(t3_15),
    .X16(t2_16), .Y16(t3_16),
    .X17(t2_17), .Y17(t3_17),
    .X18(t2_18), .Y18(t3_18),
    .X19(t2_19), .Y19(t3_19),
    .X20(t2_20), .Y20(t3_20),
    .X21(t2_21), .Y21(t3_21),
    .X22(t2_22), .Y22(t3_22),
    .X23(t2_23), .Y23(t3_23),
    .X24(t2_24), .Y24(t3_24),
    .X25(t2_25), .Y25(t3_25),
    .X26(t2_26), .Y26(t3_26),
    .X27(t2_27), .Y27(t3_27),
    .X28(t2_28), .Y28(t3_28),
    .X29(t2_29), .Y29(t3_29),
    .X30(t2_30), .Y30(t3_30),
    .X31(t2_31), .Y31(t3_31));


endmodule

// Latency: 16
// Gap: 32
module DirSum_83357(clk, reset, next, next_out,
      i1,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15,
      X16, Y16,
      X17, Y17,
      X18, Y18,
      X19, Y19,
      X20, Y20,
      X21, Y21,
      X22, Y22,
      X23, Y23,
      X24, Y24,
      X25, Y25,
      X26, Y26,
      X27, Y27,
      X28, Y28,
      X29, Y29,
      X30, Y30,
      X31, Y31);

   output next_out;
   input clk, reset, next;

   input [2:0] i1;
   reg [4:0] i2;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 31)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock80787 codeBlockIsnt87716(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15),
       .X16_in(X16), .Y16(Y16),
       .X17_in(X17), .Y17(Y17),
       .X18_in(X18), .Y18(Y18),
       .X19_in(X19), .Y19(Y19),
       .X20_in(X20), .Y20(Y20),
       .X21_in(X21), .Y21(Y21),
       .X22_in(X22), .Y22(Y22),
       .X23_in(X23), .Y23(Y23),
       .X24_in(X24), .Y24(Y24),
       .X25_in(X25), .Y25(Y25),
       .X26_in(X26), .Y26(Y26),
       .X27_in(X27), .Y27(Y27),
       .X28_in(X28), .Y28(Y28),
       .X29_in(X29), .Y29(Y29),
       .X30_in(X30), .Y30(Y30),
       .X31_in(X31), .Y31(Y31));

endmodule

module D5_82841(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h4000000000000000;
      1: out3 <= 64'h3ffec42d3725b600;
      2: out3 <= 64'h3ffb10c1099a1a00;
      3: out3 <= 64'h3ff4e5dffdeeba00;
      4: out3 <= 64'h3fec43c6f2dafc00;
      5: out3 <= 64'h3fe12acb1ce35a00;
      6: out3 <= 64'h3fd39b5a03107400;
      7: out3 <= 64'h3fc395f97ab61200;
      8: out3 <= 64'h3fb11b47a24a4c00;
      9: out3 <= 64'h3f9c2bfadb4cf600;
      10: out3 <= 64'h3f84c8e1c33fa600;
      11: out3 <= 64'h3f6af2e32bae8200;
      12: out3 <= 64'h3f4eaafe114a2e00;
      13: out3 <= 64'h3f2ff24992133600;
      14: out3 <= 64'h3f0ec9f4e2975200;
      15: out3 <= 64'h3eeb33474240ee00;
      16: out3 <= 64'h3ec52f9feeb96000;
      17: out3 <= 64'h3e9cc076165e5a00;
      18: out3 <= 64'h3e71e758c9cb1200;
      19: out3 <= 64'h3e44a5eeec75b400;
      20: out3 <= 64'h3e14fdf72461ae00;
      21: out3 <= 64'h3de2f147c8e78400;
      22: out3 <= 64'h3dae81ced092c600;
      23: out3 <= 64'h3d77b191be16e800;
      24: out3 <= 64'h3d3e82ad8c5bb400;
      25: out3 <= 64'h3d02f75699a21a00;
      26: out3 <= 64'h3cc511d891c22400;
      27: out3 <= 64'h3c84d4965782fc00;
      28: out3 <= 64'h3c424209ed0dca00;
      29: out3 <= 64'h3bfd5cc45b7c5600;
      30: out3 <= 64'h3bb6276d99847800;
      31: out3 <= 64'h3b6ca4c471413600;
      32: out3 <= 64'h3b20d79e651a8c00;
      33: out3 <= 64'h3ad2c2e793cd1600;
      34: out3 <= 64'h3a8269a29b927400;
      35: out3 <= 64'h3a2fcee87c6bb800;
      36: out3 <= 64'h39daf5e8798ee600;
      37: out3 <= 64'h3983e1e7f9f8b800;
      38: out3 <= 64'h392a96426823ea00;
      39: out3 <= 64'h38cf166910e73600;
      40: out3 <= 64'h387165e3017b6200;
      41: out3 <= 64'h3811884ce4aa9200;
      42: out3 <= 64'h37af8158df2a5400;
      43: out3 <= 64'h374b54ce6b21a400;
      44: out3 <= 64'h36e5068a32dc7c00;
      45: out3 <= 64'h367c9a7deaae2400;
      46: out3 <= 64'h361214b02a040000;
      47: out3 <= 64'h35a5793c43aa2200;
      48: out3 <= 64'h3536cc521d434600;
      49: out3 <= 64'h34c6123605f5c400;
      50: out3 <= 64'h34534f408c4f0400;
      51: out3 <= 64'h33de87de535f2800;
      52: out3 <= 64'h3367c08fe70e8200;
      53: out3 <= 64'h32eefde98fae8400;
      54: out3 <= 64'h3274449324c7f600;
      55: out3 <= 64'h31f79947df281a00;
      56: out3 <= 64'h317900d62a2e8200;
      57: out3 <= 64'h30f8801f745d7e00;
      58: out3 <= 64'h30761c17ff2edc00;
      59: out3 <= 64'h2ff1d9c6ae2ee200;
      60: out3 <= 64'h2f6bbe44d55f5e00;
      61: out3 <= 64'h2ee3cebe06e4c200;
      62: out3 <= 64'h2e5a106fdfff2c00;
      63: out3 <= 64'h2dce88a9d5515e00;
      64: out3 <= 64'h4000000000000000;
      65: out3 <= 64'h3ffb10c1099a1a00;
      66: out3 <= 64'h3fec43c6f2dafc00;
      67: out3 <= 64'h3fd39b5a03107400;
      68: out3 <= 64'h3fb11b47a24a4c00;
      69: out3 <= 64'h3f84c8e1c33fa600;
      70: out3 <= 64'h3f4eaafe114a2e00;
      71: out3 <= 64'h3f0ec9f4e2975200;
      72: out3 <= 64'h3ec52f9feeb96000;
      73: out3 <= 64'h3e71e758c9cb1200;
      74: out3 <= 64'h3e14fdf72461ae00;
      75: out3 <= 64'h3dae81ced092c600;
      76: out3 <= 64'h3d3e82ad8c5bb400;
      77: out3 <= 64'h3cc511d891c22400;
      78: out3 <= 64'h3c424209ed0dca00;
      79: out3 <= 64'h3bb6276d99847800;
      80: out3 <= 64'h3b20d79e651a8c00;
      81: out3 <= 64'h3a8269a29b927400;
      82: out3 <= 64'h39daf5e8798ee600;
      83: out3 <= 64'h392a96426823ea00;
      84: out3 <= 64'h387165e3017b6200;
      85: out3 <= 64'h37af8158df2a5400;
      86: out3 <= 64'h36e5068a32dc7c00;
      87: out3 <= 64'h361214b02a040000;
      88: out3 <= 64'h3536cc521d434600;
      89: out3 <= 64'h34534f408c4f0400;
      90: out3 <= 64'h3367c08fe70e8200;
      91: out3 <= 64'h3274449324c7f600;
      92: out3 <= 64'h317900d62a2e8200;
      93: out3 <= 64'h30761c17ff2edc00;
      94: out3 <= 64'h2f6bbe44d55f5e00;
      95: out3 <= 64'h2e5a106fdfff2c00;
      96: out3 <= 64'h2d413cccfe779a00;
      97: out3 <= 64'h2c216eaa3a59be00;
      98: out3 <= 64'h2afad26919d94000;
      99: out3 <= 64'h29cd9577c7cbd200;
      100: out3 <= 64'h2899e64a123bac00;
      101: out3 <= 64'h275ff45240a17200;
      102: out3 <= 64'h261feff9c2e06a00;
      103: out3 <= 64'h24da0a99ba25be00;
      104: out3 <= 64'h238e76735cd19000;
      105: out3 <= 64'h223d66a836964600;
      106: out3 <= 64'h20e70f3245ffdc00;
      107: out3 <= 64'h1f8ba4dbf89aba00;
      108: out3 <= 64'h1e2b5d3806f63b00;
      109: out3 <= 64'h1cc66e9931c45e00;
      110: out3 <= 64'h1b5d1009e15cc000;
      111: out3 <= 64'h19ef7943a8ed8a00;
      112: out3 <= 64'h187de2a6aea96300;
      113: out3 <= 64'h17088530fa459f00;
      114: out3 <= 64'h158f9a75ab1fdd00;
      115: out3 <= 64'h14135c9417660100;
      116: out3 <= 64'h1294062ed59f0600;
      117: out3 <= 64'h1111d262b1f67700;
      118: out3 <= 64'hf8cfcbd90af8d80;
      119: out3 <= 64'he05c1353f27b180;
      120: out3 <= 64'hc7c5c1e34d30580;
      121: out3 <= 64'haf10a22459fe300;
      122: out3 <= 64'h964083747309d00;
      123: out3 <= 64'h7d59395aa5cc380;
      124: out3 <= 64'h645e9af0a6d0b00;
      125: out3 <= 64'h4b54824b3867d80;
      126: out3 <= 64'h323ecbe21bb0280;
      127: out3 <= 64'h192155f7a3667e0;
      128: out3 <= 64'h4000000000000000;
      129: out3 <= 64'h3ff4e5dffdeeba00;
      130: out3 <= 64'h3fd39b5a03107400;
      131: out3 <= 64'h3f9c2bfadb4cf600;
      132: out3 <= 64'h3f4eaafe114a2e00;
      133: out3 <= 64'h3eeb33474240ee00;
      134: out3 <= 64'h3e71e758c9cb1200;
      135: out3 <= 64'h3de2f147c8e78400;
      136: out3 <= 64'h3d3e82ad8c5bb400;
      137: out3 <= 64'h3c84d4965782fc00;
      138: out3 <= 64'h3bb6276d99847800;
      139: out3 <= 64'h3ad2c2e793cd1600;
      140: out3 <= 64'h39daf5e8798ee600;
      141: out3 <= 64'h38cf166910e73600;
      142: out3 <= 64'h37af8158df2a5400;
      143: out3 <= 64'h367c9a7deaae2400;
      144: out3 <= 64'h3536cc521d434600;
      145: out3 <= 64'h33de87de535f2800;
      146: out3 <= 64'h3274449324c7f600;
      147: out3 <= 64'h30f8801f745d7e00;
      148: out3 <= 64'h2f6bbe44d55f5e00;
      149: out3 <= 64'h2dce88a9d5515e00;
      150: out3 <= 64'h2c216eaa3a59be00;
      151: out3 <= 64'h2a65052546ab2c00;
      152: out3 <= 64'h2899e64a123bac00;
      153: out3 <= 64'h26c0b1620cb3e600;
      154: out3 <= 64'h24da0a99ba25be00;
      155: out3 <= 64'h22e69ac7bdb69200;
      156: out3 <= 64'h20e70f3245ffdc00;
      157: out3 <= 64'h1edc1952ef78d600;
      158: out3 <= 64'h1cc66e9931c45e00;
      159: out3 <= 64'h1aa6c82b6d3fca00;
      160: out3 <= 64'h187de2a6aea96300;
      161: out3 <= 64'h164c7ddd3f27c600;
      162: out3 <= 64'h14135c9417660100;
      163: out3 <= 64'h11d3443f4cdb3e00;
      164: out3 <= 64'hf8cfcbd90af8d80;
      165: out3 <= 64'hd415012d8022880;
      166: out3 <= 64'haf10a22459fe300;
      167: out3 <= 64'h89cf8676d7abb80;
      168: out3 <= 64'h645e9af0a6d0b00;
      169: out3 <= 64'h3ecadcf3f041c00;
      170: out3 <= 64'h192155f7a3667e0;
      171: out3 <= 64'hff36f1701909c3e0;
      172: out3 <= 64'hfcdc1341de44fd80;
      173: out3 <= 64'hfa824bfd5956f9c0;
      174: out3 <= 64'hf82a6c6a55a33c80;
      175: out3 <= 64'hf5d544a76b60d300;
      176: out3 <= 64'hf383a3e1cb2cfa80;
      177: out3 <= 64'hf136580d5d5e7780;
      178: out3 <= 64'heeee2d9d4e098900;
      179: out3 <= 64'hecabef3d1e7eae00;
      180: out3 <= 64'hea70658a54e02300;
      181: out3 <= 64'he83c56cee2331900;
      182: out3 <= 64'he61086bc57127600;
      183: out3 <= 64'he3edb627fee11900;
      184: out3 <= 64'he1d4a2c7f909c500;
      185: out3 <= 64'hdfc606f167829200;
      186: out3 <= 64'hddc29957c969ba00;
      187: out3 <= 64'hdbcb0ccd98294e00;
      188: out3 <= 64'hd9e010063d1f9600;
      189: out3 <= 64'hd8024d5975525800;
      190: out3 <= 64'hd6326a8838342e00;
      191: out3 <= 64'hd471088335fce800;
      192: out3 <= 64'h4000000000000000;
      193: out3 <= 64'h3fec43c6f2dafc00;
      194: out3 <= 64'h3fb11b47a24a4c00;
      195: out3 <= 64'h3f4eaafe114a2e00;
      196: out3 <= 64'h3ec52f9feeb96000;
      197: out3 <= 64'h3e14fdf72461ae00;
      198: out3 <= 64'h3d3e82ad8c5bb400;
      199: out3 <= 64'h3c424209ed0dca00;
      200: out3 <= 64'h3b20d79e651a8c00;
      201: out3 <= 64'h39daf5e8798ee600;
      202: out3 <= 64'h387165e3017b6200;
      203: out3 <= 64'h36e5068a32dc7c00;
      204: out3 <= 64'h3536cc521d434600;
      205: out3 <= 64'h3367c08fe70e8200;
      206: out3 <= 64'h317900d62a2e8200;
      207: out3 <= 64'h2f6bbe44d55f5e00;
      208: out3 <= 64'h2d413cccfe779a00;
      209: out3 <= 64'h2afad26919d94000;
      210: out3 <= 64'h2899e64a123bac00;
      211: out3 <= 64'h261feff9c2e06a00;
      212: out3 <= 64'h238e76735cd19000;
      213: out3 <= 64'h20e70f3245ffdc00;
      214: out3 <= 64'h1e2b5d3806f63b00;
      215: out3 <= 64'h1b5d1009e15cc000;
      216: out3 <= 64'h187de2a6aea96300;
      217: out3 <= 64'h158f9a75ab1fdd00;
      218: out3 <= 64'h1294062ed59f0600;
      219: out3 <= 64'hf8cfcbd90af8d80;
      220: out3 <= 64'hc7c5c1e34d30580;
      221: out3 <= 64'h964083747309d00;
      222: out3 <= 64'h645e9af0a6d0b00;
      223: out3 <= 64'h323ecbe21bb0280;
      224: out3 <= 64'h0;
      225: out3 <= 64'hfcdc1341de44fd80;
      226: out3 <= 64'hf9ba1650f592f500;
      227: out3 <= 64'hf69bf7c8b8cf6300;
      228: out3 <= 64'hf383a3e1cb2cfa80;
      229: out3 <= 64'hf07303426f507280;
      230: out3 <= 64'hed6bf9d12a60fa00;
      231: out3 <= 64'hea70658a54e02300;
      232: out3 <= 64'he7821d5951569d00;
      233: out3 <= 64'he4a2eff61ea34000;
      234: out3 <= 64'he1d4a2c7f909c500;
      235: out3 <= 64'hdf18f0cdba002400;
      236: out3 <= 64'hdc71898ca32e7000;
      237: out3 <= 64'hd9e010063d1f9600;
      238: out3 <= 64'hd76619b5edc45400;
      239: out3 <= 64'hd5052d96e626c000;
      240: out3 <= 64'hd2bec33301886600;
      241: out3 <= 64'hd09441bb2aa0a200;
      242: out3 <= 64'hce86ff29d5d17e00;
      243: out3 <= 64'hcc983f7018f17e00;
      244: out3 <= 64'hcac933ade2bcba00;
      245: out3 <= 64'hc91af975cd238400;
      246: out3 <= 64'hc78e9a1cfe849e00;
      247: out3 <= 64'hc6250a1786711a00;
      248: out3 <= 64'hc4df28619ae57400;
      249: out3 <= 64'hc3bdbdf612f23600;
      250: out3 <= 64'hc2c17d5273a44c00;
      251: out3 <= 64'hc1eb0208db9e5200;
      252: out3 <= 64'hc13ad0601146a000;
      253: out3 <= 64'hc0b15501eeb5d200;
      254: out3 <= 64'hc04ee4b85db5b400;
      255: out3 <= 64'hc013bc390d250400;
      256: out3 <= 64'h4000000000000000;
      257: out3 <= 64'h3fe12acb1ce35a00;
      258: out3 <= 64'h3f84c8e1c33fa600;
      259: out3 <= 64'h3eeb33474240ee00;
      260: out3 <= 64'h3e14fdf72461ae00;
      261: out3 <= 64'h3d02f75699a21a00;
      262: out3 <= 64'h3bb6276d99847800;
      263: out3 <= 64'h3a2fcee87c6bb800;
      264: out3 <= 64'h387165e3017b6200;
      265: out3 <= 64'h367c9a7deaae2400;
      266: out3 <= 64'h34534f408c4f0400;
      267: out3 <= 64'h31f79947df281a00;
      268: out3 <= 64'h2f6bbe44d55f5e00;
      269: out3 <= 64'h2cb2324be0f07a00;
      270: out3 <= 64'h29cd9577c7cbd200;
      271: out3 <= 64'h26c0b1620cb3e600;
      272: out3 <= 64'h238e76735cd19000;
      273: out3 <= 64'h2039f90e987d6e00;
      274: out3 <= 64'h1cc66e9931c45e00;
      275: out3 <= 64'h19372a63bc93d700;
      276: out3 <= 64'h158f9a75ab1fdd00;
      277: out3 <= 64'h11d3443f4cdb3e00;
      278: out3 <= 64'he05c1353f27b180;
      279: out3 <= 64'ha2abb58949f2d00;
      280: out3 <= 64'h645e9af0a6d0b00;
      281: out3 <= 64'h25b0caeb28ab9a0;
      282: out3 <= 64'hfe6deaa085c99820;
      283: out3 <= 64'hfa824bfd5956f9c0;
      284: out3 <= 64'hf69bf7c8b8cf6300;
      285: out3 <= 64'hf2beafed27fdd780;
      286: out3 <= 64'heeee2d9d4e098900;
      287: out3 <= 64'heb2e1dbd87189600;
      288: out3 <= 64'he7821d5951569d00;
      289: out3 <= 64'he3edb627fee11900;
      290: out3 <= 64'he0745b2407654600;
      291: out3 <= 64'hdd19653842496e00;
      292: out3 <= 64'hd9e010063d1f9600;
      293: out3 <= 64'hd6cb76c8c9ed8e00;
      294: out3 <= 64'hd3de9155c5a64200;
      295: out3 <= 64'hd11c3141f91b3e00;
      296: out3 <= 64'hce86ff29d5d17e00;
      297: out3 <= 64'hcc217821aca0d800;
      298: out3 <= 64'hc9edeb4fd5fc0000;
      299: out3 <= 64'hc7ee77b31b556e00;
      300: out3 <= 64'hc6250a1786711a00;
      301: out3 <= 64'hc4935b3b8ebeca00;
      302: out3 <= 64'hc33aee276e3ddc00;
      303: out3 <= 64'hc21d0eb837187c00;
      304: out3 <= 64'hc13ad0601146a000;
      305: out3 <= 64'hc0950d1cd4517e00;
      306: out3 <= 64'hc02c64a5fcef8c00;
      307: out3 <= 64'hc0013bd2c8da4a00;
      308: out3 <= 64'hc013bc390d250400;
      309: out3 <= 64'hc063d40524b30a00;
      310: out3 <= 64'hc0f1360b1d68ae00;
      311: out3 <= 64'hc1bb5a11138a4c00;
      312: out3 <= 64'hc2c17d5273a44c00;
      313: out3 <= 64'hc402a33ba483aa00;
      314: out3 <= 64'hc57d965d646d8c00;
      315: out3 <= 64'hc730e996ef18ca00;
      316: out3 <= 64'hc91af975cd238400;
      317: out3 <= 64'hcb39edc9fa0a3c00;
      318: out3 <= 64'hcd8bbb6cdb380a00;
      319: out3 <= 64'hd00e263951d11e00;
      320: out3 <= 64'h4000000000000000;
      321: out3 <= 64'h3fd39b5a03107400;
      322: out3 <= 64'h3f4eaafe114a2e00;
      323: out3 <= 64'h3e71e758c9cb1200;
      324: out3 <= 64'h3d3e82ad8c5bb400;
      325: out3 <= 64'h3bb6276d99847800;
      326: out3 <= 64'h39daf5e8798ee600;
      327: out3 <= 64'h37af8158df2a5400;
      328: out3 <= 64'h3536cc521d434600;
      329: out3 <= 64'h3274449324c7f600;
      330: out3 <= 64'h2f6bbe44d55f5e00;
      331: out3 <= 64'h2c216eaa3a59be00;
      332: out3 <= 64'h2899e64a123bac00;
      333: out3 <= 64'h24da0a99ba25be00;
      334: out3 <= 64'h20e70f3245ffdc00;
      335: out3 <= 64'h1cc66e9931c45e00;
      336: out3 <= 64'h187de2a6aea96300;
      337: out3 <= 64'h14135c9417660100;
      338: out3 <= 64'hf8cfcbd90af8d80;
      339: out3 <= 64'haf10a22459fe300;
      340: out3 <= 64'h645e9af0a6d0b00;
      341: out3 <= 64'h192155f7a3667e0;
      342: out3 <= 64'hfcdc1341de44fd80;
      343: out3 <= 64'hf82a6c6a55a33c80;
      344: out3 <= 64'hf383a3e1cb2cfa80;
      345: out3 <= 64'heeee2d9d4e098900;
      346: out3 <= 64'hea70658a54e02300;
      347: out3 <= 64'he61086bc57127600;
      348: out3 <= 64'he1d4a2c7f909c500;
      349: out3 <= 64'hddc29957c969ba00;
      350: out3 <= 64'hd9e010063d1f9600;
      351: out3 <= 64'hd6326a8838342e00;
      352: out3 <= 64'hd2bec33301886600;
      353: out3 <= 64'hcf89e3e800d12400;
      354: out3 <= 64'hcc983f7018f17e00;
      355: out3 <= 64'hc9edeb4fd5fc0000;
      356: out3 <= 64'hc78e9a1cfe849e00;
      357: out3 <= 64'hc57d965d646d8c00;
      358: out3 <= 64'hc3bdbdf612f23600;
      359: out3 <= 64'hc2517e312f6d3a00;
      360: out3 <= 64'hc13ad0601146a000;
      361: out3 <= 64'hc07b371e3cc05a00;
      362: out3 <= 64'hc013bc390d250400;
      363: out3 <= 64'hc004ef3ef665e600;
      364: out3 <= 64'hc04ee4b85db5b400;
      365: out3 <= 64'hc0f1360b1d68ae00;
      366: out3 <= 64'hc1eb0208db9e5200;
      367: out3 <= 64'hc33aee276e3ddc00;
      368: out3 <= 64'hc4df28619ae57400;
      369: out3 <= 64'hc6d569bd97dc1600;
      370: out3 <= 64'hc91af975cd238400;
      371: out3 <= 64'hcbacb0bf73b0fc00;
      372: out3 <= 64'hce86ff29d5d17e00;
      373: out3 <= 64'hd1a5ef902000d400;
      374: out3 <= 64'hd5052d96e626c000;
      375: out3 <= 64'hd8a00badbf5e8e00;
      376: out3 <= 64'hdc71898ca32e7000;
      377: out3 <= 64'he0745b2407654600;
      378: out3 <= 64'he4a2eff61ea34000;
      379: out3 <= 64'he8f77acf05ba6100;
      380: out3 <= 64'hed6bf9d12a60fa00;
      381: out3 <= 64'hf1fa3ecac0d84e80;
      382: out3 <= 64'hf69bf7c8b8cf6300;
      383: out3 <= 64'hfb4ab7db4c798280;
      384: out3 <= 64'h4000000000000000;
      385: out3 <= 64'h3fc395f97ab61200;
      386: out3 <= 64'h3f0ec9f4e2975200;
      387: out3 <= 64'h3de2f147c8e78400;
      388: out3 <= 64'h3c424209ed0dca00;
      389: out3 <= 64'h3a2fcee87c6bb800;
      390: out3 <= 64'h37af8158df2a5400;
      391: out3 <= 64'h34c6123605f5c400;
      392: out3 <= 64'h317900d62a2e8200;
      393: out3 <= 64'h2dce88a9d5515e00;
      394: out3 <= 64'h29cd9577c7cbd200;
      395: out3 <= 64'h257db64bf5e7d400;
      396: out3 <= 64'h20e70f3245ffdc00;
      397: out3 <= 64'h1c1249d8011ee700;
      398: out3 <= 64'h17088530fa459f00;
      399: out3 <= 64'h11d3443f4cdb3e00;
      400: out3 <= 64'hc7c5c1e34d30580;
      401: out3 <= 64'h70de171e7b0b540;
      402: out3 <= 64'h192155f7a3667e0;
      403: out3 <= 64'hfc135230c0fbe400;
      404: out3 <= 64'hf69bf7c8b8cf6300;
      405: out3 <= 64'hf136580d5d5e7780;
      406: out3 <= 64'hebeca36be899ff00;
      407: out3 <= 64'he6c8d59c436c2900;
      408: out3 <= 64'he1d4a2c7f909c500;
      409: out3 <= 64'hdd19653842496e00;
      410: out3 <= 64'hd8a00badbf5e8e00;
      411: out3 <= 64'hd471088335fce800;
      412: out3 <= 64'hd09441bb2aa0a200;
      413: out3 <= 64'hcd11021670517c00;
      414: out3 <= 64'hc9edeb4fd5fc0000;
      415: out3 <= 64'hc730e996ef18ca00;
      416: out3 <= 64'hc4df28619ae57400;
      417: out3 <= 64'hc2fd08a9665de600;
      418: out3 <= 64'hc18e18a73634ee00;
      419: out3 <= 64'hc0950d1cd4517e00;
      420: out3 <= 64'hc013bc390d250400;
      421: out3 <= 64'hc00b1a2002114600;
      422: out3 <= 64'hc07b371e3cc05a00;
      423: out3 <= 64'hc1633f89e9a1a600;
      424: out3 <= 64'hc2c17d5273a44c00;
      425: out3 <= 64'hc4935b3b8ebeca00;
      426: out3 <= 64'hc6d569bd97dc1600;
      427: out3 <= 64'hc98365821551dc00;
      428: out3 <= 64'hcc983f7018f17e00;
      429: out3 <= 64'hd00e263951d11e00;
      430: out3 <= 64'hd3de9155c5a64200;
      431: out3 <= 64'hd8024d5975525800;
      432: out3 <= 64'hdc71898ca32e7000;
      433: out3 <= 64'he123e6ad10872a00;
      434: out3 <= 64'he61086bc57127600;
      435: out3 <= 64'heb2e1dbd87189600;
      436: out3 <= 64'hf07303426f507280;
      437: out3 <= 64'hf5d544a76b60d300;
      438: out3 <= 64'hfb4ab7db4c798280;
      439: out3 <= 64'hc90e8fe6f63c20;
      440: out3 <= 64'h645e9af0a6d0b00;
      441: out3 <= 64'hbb6ecef285f9880;
      442: out3 <= 64'h1111d262b1f67700;
      443: out3 <= 64'h164c7ddd3f27c600;
      444: out3 <= 64'h1b5d1009e15cc000;
      445: out3 <= 64'h2039f90e987d6e00;
      446: out3 <= 64'h24da0a99ba25be00;
      447: out3 <= 64'h2934893736127200;
      448: out3 <= 64'h4000000000000000;
      449: out3 <= 64'h3fb11b47a24a4c00;
      450: out3 <= 64'h3ec52f9feeb96000;
      451: out3 <= 64'h3d3e82ad8c5bb400;
      452: out3 <= 64'h3b20d79e651a8c00;
      453: out3 <= 64'h387165e3017b6200;
      454: out3 <= 64'h3536cc521d434600;
      455: out3 <= 64'h317900d62a2e8200;
      456: out3 <= 64'h2d413cccfe779a00;
      457: out3 <= 64'h2899e64a123bac00;
      458: out3 <= 64'h238e76735cd19000;
      459: out3 <= 64'h1e2b5d3806f63b00;
      460: out3 <= 64'h187de2a6aea96300;
      461: out3 <= 64'h1294062ed59f0600;
      462: out3 <= 64'hc7c5c1e34d30580;
      463: out3 <= 64'h645e9af0a6d0b00;
      464: out3 <= 64'h0;
      465: out3 <= 64'hf9ba1650f592f500;
      466: out3 <= 64'hf383a3e1cb2cfa80;
      467: out3 <= 64'hed6bf9d12a60fa00;
      468: out3 <= 64'he7821d5951569d00;
      469: out3 <= 64'he1d4a2c7f909c500;
      470: out3 <= 64'hdc71898ca32e7000;
      471: out3 <= 64'hd76619b5edc45400;
      472: out3 <= 64'hd2bec33301886600;
      473: out3 <= 64'hce86ff29d5d17e00;
      474: out3 <= 64'hcac933ade2bcba00;
      475: out3 <= 64'hc78e9a1cfe849e00;
      476: out3 <= 64'hc4df28619ae57400;
      477: out3 <= 64'hc2c17d5273a44c00;
      478: out3 <= 64'hc13ad0601146a000;
      479: out3 <= 64'hc04ee4b85db5b400;
      480: out3 <= 64'hc000000000000000;
      481: out3 <= 64'hc04ee4b85db5b400;
      482: out3 <= 64'hc13ad0601146a000;
      483: out3 <= 64'hc2c17d5273a44c00;
      484: out3 <= 64'hc4df28619ae57400;
      485: out3 <= 64'hc78e9a1cfe849e00;
      486: out3 <= 64'hcac933ade2bcba00;
      487: out3 <= 64'hce86ff29d5d17e00;
      488: out3 <= 64'hd2bec33301886600;
      489: out3 <= 64'hd76619b5edc45400;
      490: out3 <= 64'hdc71898ca32e7000;
      491: out3 <= 64'he1d4a2c7f909c500;
      492: out3 <= 64'he7821d5951569d00;
      493: out3 <= 64'hed6bf9d12a60fa00;
      494: out3 <= 64'hf383a3e1cb2cfa80;
      495: out3 <= 64'hf9ba1650f592f500;
      496: out3 <= 64'h0;
      497: out3 <= 64'h645e9af0a6d0b00;
      498: out3 <= 64'hc7c5c1e34d30580;
      499: out3 <= 64'h1294062ed59f0600;
      500: out3 <= 64'h187de2a6aea96300;
      501: out3 <= 64'h1e2b5d3806f63b00;
      502: out3 <= 64'h238e76735cd19000;
      503: out3 <= 64'h2899e64a123bac00;
      504: out3 <= 64'h2d413cccfe779a00;
      505: out3 <= 64'h317900d62a2e8200;
      506: out3 <= 64'h3536cc521d434600;
      507: out3 <= 64'h387165e3017b6200;
      508: out3 <= 64'h3b20d79e651a8c00;
      509: out3 <= 64'h3d3e82ad8c5bb400;
      510: out3 <= 64'h3ec52f9feeb96000;
      511: out3 <= 64'h3fb11b47a24a4c00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_83355(addr, out, clk);
   input clk;
   output [63:0] out;
   reg [63:0] out, out2, out3;
   input [8:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 64'h0;
      1: out3 <= 64'hff36f1701909c3e0;
      2: out3 <= 64'hfe6deaa085c99820;
      3: out3 <= 64'hfda4f3514d754660;
      4: out3 <= 64'hfcdc1341de44fd80;
      5: out3 <= 64'hfc135230c0fbe400;
      6: out3 <= 64'hfb4ab7db4c798280;
      7: out3 <= 64'hfa824bfd5956f9c0;
      8: out3 <= 64'hf9ba1650f592f500;
      9: out3 <= 64'hf8f21e8e184f4ac0;
      10: out3 <= 64'hf82a6c6a55a33c80;
      11: out3 <= 64'hf763079892854480;
      12: out3 <= 64'hf69bf7c8b8cf6300;
      13: out3 <= 64'hf5d544a76b60d300;
      14: out3 <= 64'hf50ef5ddba601d00;
      15: out3 <= 64'hf4491310d7a06780;
      16: out3 <= 64'hf383a3e1cb2cfa80;
      17: out3 <= 64'hf2beafed27fdd780;
      18: out3 <= 64'hf1fa3ecac0d84e80;
      19: out3 <= 64'hf136580d5d5e7780;
      20: out3 <= 64'hf07303426f507280;
      21: out3 <= 64'hefb047f1c8025200;
      22: out3 <= 64'heeee2d9d4e098900;
      23: out3 <= 64'hee2cbbc0b324c200;
      24: out3 <= 64'hed6bf9d12a60fa00;
      25: out3 <= 64'hecabef3d1e7eae00;
      26: out3 <= 64'hebeca36be899ff00;
      27: out3 <= 64'heb2e1dbd87189600;
      28: out3 <= 64'hea70658a54e02300;
      29: out3 <= 64'he9b38222c0d83a00;
      30: out3 <= 64'he8f77acf05ba6100;
      31: out3 <= 64'he83c56cee2331900;
      32: out3 <= 64'he7821d5951569d00;
      33: out3 <= 64'he6c8d59c436c2900;
      34: out3 <= 64'he61086bc57127600;
      35: out3 <= 64'he55937d492c03600;
      36: out3 <= 64'he4a2eff61ea34000;
      37: out3 <= 64'he3edb627fee11900;
      38: out3 <= 64'he3399166ce3ba200;
      39: out3 <= 64'he28688a4791c7700;
      40: out3 <= 64'he1d4a2c7f909c500;
      41: out3 <= 64'he123e6ad10872a00;
      42: out3 <= 64'he0745b2407654600;
      43: out3 <= 64'hdfc606f167829200;
      44: out3 <= 64'hdf18f0cdba002400;
      45: out3 <= 64'hde6d1f6544ece200;
      46: out3 <= 64'hddc29957c969ba00;
      47: out3 <= 64'hdd19653842496e00;
      48: out3 <= 64'hdc71898ca32e7000;
      49: out3 <= 64'hdbcb0ccd98294e00;
      50: out3 <= 64'hdb25f56645da4200;
      51: out3 <= 64'hda8249b40a182c00;
      52: out3 <= 64'hd9e010063d1f9600;
      53: out3 <= 64'hd93f4e9df34c1a00;
      54: out3 <= 64'hd8a00badbf5e8e00;
      55: out3 <= 64'hd8024d5975525800;
      56: out3 <= 64'hd76619b5edc45400;
      57: out3 <= 64'hd6cb76c8c9ed8e00;
      58: out3 <= 64'hd6326a8838342e00;
      59: out3 <= 64'hd59afadab954d400;
      60: out3 <= 64'hd5052d96e626c000;
      61: out3 <= 64'hd471088335fce800;
      62: out3 <= 64'hd3de9155c5a64200;
      63: out3 <= 64'hd34dcdb41f0f8600;
      64: out3 <= 64'h0;
      65: out3 <= 64'hfe6deaa085c99820;
      66: out3 <= 64'hfcdc1341de44fd80;
      67: out3 <= 64'hfb4ab7db4c798280;
      68: out3 <= 64'hf9ba1650f592f500;
      69: out3 <= 64'hf82a6c6a55a33c80;
      70: out3 <= 64'hf69bf7c8b8cf6300;
      71: out3 <= 64'hf50ef5ddba601d00;
      72: out3 <= 64'hf383a3e1cb2cfa80;
      73: out3 <= 64'hf1fa3ecac0d84e80;
      74: out3 <= 64'hf07303426f507280;
      75: out3 <= 64'heeee2d9d4e098900;
      76: out3 <= 64'hed6bf9d12a60fa00;
      77: out3 <= 64'hebeca36be899ff00;
      78: out3 <= 64'hea70658a54e02300;
      79: out3 <= 64'he8f77acf05ba6100;
      80: out3 <= 64'he7821d5951569d00;
      81: out3 <= 64'he61086bc57127600;
      82: out3 <= 64'he4a2eff61ea34000;
      83: out3 <= 64'he3399166ce3ba200;
      84: out3 <= 64'he1d4a2c7f909c500;
      85: out3 <= 64'he0745b2407654600;
      86: out3 <= 64'hdf18f0cdba002400;
      87: out3 <= 64'hddc29957c969ba00;
      88: out3 <= 64'hdc71898ca32e7000;
      89: out3 <= 64'hdb25f56645da4200;
      90: out3 <= 64'hd9e010063d1f9600;
      91: out3 <= 64'hd8a00badbf5e8e00;
      92: out3 <= 64'hd76619b5edc45400;
      93: out3 <= 64'hd6326a8838342e00;
      94: out3 <= 64'hd5052d96e626c000;
      95: out3 <= 64'hd3de9155c5a64200;
      96: out3 <= 64'hd2bec33301886600;
      97: out3 <= 64'hd1a5ef902000d400;
      98: out3 <= 64'hd09441bb2aa0a200;
      99: out3 <= 64'hcf89e3e800d12400;
      100: out3 <= 64'hce86ff29d5d17e00;
      101: out3 <= 64'hcd8bbb6cdb380a00;
      102: out3 <= 64'hcc983f7018f17e00;
      103: out3 <= 64'hcbacb0bf73b0fc00;
      104: out3 <= 64'hcac933ade2bcba00;
      105: out3 <= 64'hc9edeb4fd5fc0000;
      106: out3 <= 64'hc91af975cd238400;
      107: out3 <= 64'hc8507ea720d5ac00;
      108: out3 <= 64'hc78e9a1cfe849e00;
      109: out3 <= 64'hc6d569bd97dc1600;
      110: out3 <= 64'hc6250a1786711a00;
      111: out3 <= 64'hc57d965d646d8c00;
      112: out3 <= 64'hc4df28619ae57400;
      113: out3 <= 64'hc449d892667b8800;
      114: out3 <= 64'hc3bdbdf612f23600;
      115: out3 <= 64'hc33aee276e3ddc00;
      116: out3 <= 64'hc2c17d5273a44c00;
      117: out3 <= 64'hc2517e312f6d3a00;
      118: out3 <= 64'hc1eb0208db9e5200;
      119: out3 <= 64'hc18e18a73634ee00;
      120: out3 <= 64'hc13ad0601146a000;
      121: out3 <= 64'hc0f1360b1d68ae00;
      122: out3 <= 64'hc0b15501eeb5d200;
      123: out3 <= 64'hc07b371e3cc05a00;
      124: out3 <= 64'hc04ee4b85db5b400;
      125: out3 <= 64'hc02c64a5fcef8c00;
      126: out3 <= 64'hc013bc390d250400;
      127: out3 <= 64'hc004ef3ef665e600;
      128: out3 <= 64'h0;
      129: out3 <= 64'hfda4f3514d754660;
      130: out3 <= 64'hfb4ab7db4c798280;
      131: out3 <= 64'hf8f21e8e184f4ac0;
      132: out3 <= 64'hf69bf7c8b8cf6300;
      133: out3 <= 64'hf4491310d7a06780;
      134: out3 <= 64'hf1fa3ecac0d84e80;
      135: out3 <= 64'hefb047f1c8025200;
      136: out3 <= 64'hed6bf9d12a60fa00;
      137: out3 <= 64'heb2e1dbd87189600;
      138: out3 <= 64'he8f77acf05ba6100;
      139: out3 <= 64'he6c8d59c436c2900;
      140: out3 <= 64'he4a2eff61ea34000;
      141: out3 <= 64'he28688a4791c7700;
      142: out3 <= 64'he0745b2407654600;
      143: out3 <= 64'hde6d1f6544ece200;
      144: out3 <= 64'hdc71898ca32e7000;
      145: out3 <= 64'hda8249b40a182c00;
      146: out3 <= 64'hd8a00badbf5e8e00;
      147: out3 <= 64'hd6cb76c8c9ed8e00;
      148: out3 <= 64'hd5052d96e626c000;
      149: out3 <= 64'hd34dcdb41f0f8600;
      150: out3 <= 64'hd1a5ef902000d400;
      151: out3 <= 64'hd00e263951d11e00;
      152: out3 <= 64'hce86ff29d5d17e00;
      153: out3 <= 64'hcd11021670517c00;
      154: out3 <= 64'hcbacb0bf73b0fc00;
      155: out3 <= 64'hca5a86c3bc55de00;
      156: out3 <= 64'hc91af975cd238400;
      157: out3 <= 64'hc7ee77b31b556e00;
      158: out3 <= 64'hc6d569bd97dc1600;
      159: out3 <= 64'hc5d0311783944800;
      160: out3 <= 64'hc4df28619ae57400;
      161: out3 <= 64'hc402a33ba483aa00;
      162: out3 <= 64'hc33aee276e3ddc00;
      163: out3 <= 64'hc2884e6e41e91800;
      164: out3 <= 64'hc1eb0208db9e5200;
      165: out3 <= 64'hc1633f89e9a1a600;
      166: out3 <= 64'hc0f1360b1d68ae00;
      167: out3 <= 64'hc0950d1cd4517e00;
      168: out3 <= 64'hc04ee4b85db5b400;
      169: out3 <= 64'hc01ed534e31ca600;
      170: out3 <= 64'hc004ef3ef665e600;
      171: out3 <= 64'hc0013bd2c8da4a00;
      172: out3 <= 64'hc013bc390d250400;
      173: out3 <= 64'hc03c6a068549ee00;
      174: out3 <= 64'hc07b371e3cc05a00;
      175: out3 <= 64'hc0d00db66decca00;
      176: out3 <= 64'hc13ad0601146a000;
      177: out3 <= 64'hc1bb5a11138a4c00;
      178: out3 <= 64'hc2517e312f6d3a00;
      179: out3 <= 64'hc2fd08a9665de600;
      180: out3 <= 64'hc3bdbdf612f23600;
      181: out3 <= 64'hc4935b3b8ebeca00;
      182: out3 <= 64'hc57d965d646d8c00;
      183: out3 <= 64'hc67c1e1806074800;
      184: out3 <= 64'hc78e9a1cfe849e00;
      185: out3 <= 64'hc8b4ab3194de5c00;
      186: out3 <= 64'hc9edeb4fd5fc0000;
      187: out3 <= 64'hcb39edc9fa0a3c00;
      188: out3 <= 64'hcc983f7018f17e00;
      189: out3 <= 64'hce0866b820d7e600;
      190: out3 <= 64'hcf89e3e800d12400;
      191: out3 <= 64'hd11c3141f91b3e00;
      192: out3 <= 64'h0;
      193: out3 <= 64'hfcdc1341de44fd80;
      194: out3 <= 64'hf9ba1650f592f500;
      195: out3 <= 64'hf69bf7c8b8cf6300;
      196: out3 <= 64'hf383a3e1cb2cfa80;
      197: out3 <= 64'hf07303426f507280;
      198: out3 <= 64'hed6bf9d12a60fa00;
      199: out3 <= 64'hea70658a54e02300;
      200: out3 <= 64'he7821d5951569d00;
      201: out3 <= 64'he4a2eff61ea34000;
      202: out3 <= 64'he1d4a2c7f909c500;
      203: out3 <= 64'hdf18f0cdba002400;
      204: out3 <= 64'hdc71898ca32e7000;
      205: out3 <= 64'hd9e010063d1f9600;
      206: out3 <= 64'hd76619b5edc45400;
      207: out3 <= 64'hd5052d96e626c000;
      208: out3 <= 64'hd2bec33301886600;
      209: out3 <= 64'hd09441bb2aa0a200;
      210: out3 <= 64'hce86ff29d5d17e00;
      211: out3 <= 64'hcc983f7018f17e00;
      212: out3 <= 64'hcac933ade2bcba00;
      213: out3 <= 64'hc91af975cd238400;
      214: out3 <= 64'hc78e9a1cfe849e00;
      215: out3 <= 64'hc6250a1786711a00;
      216: out3 <= 64'hc4df28619ae57400;
      217: out3 <= 64'hc3bdbdf612f23600;
      218: out3 <= 64'hc2c17d5273a44c00;
      219: out3 <= 64'hc1eb0208db9e5200;
      220: out3 <= 64'hc13ad0601146a000;
      221: out3 <= 64'hc0b15501eeb5d200;
      222: out3 <= 64'hc04ee4b85db5b400;
      223: out3 <= 64'hc013bc390d250400;
      224: out3 <= 64'hc000000000000000;
      225: out3 <= 64'hc013bc390d250400;
      226: out3 <= 64'hc04ee4b85db5b400;
      227: out3 <= 64'hc0b15501eeb5d200;
      228: out3 <= 64'hc13ad0601146a000;
      229: out3 <= 64'hc1eb0208db9e5200;
      230: out3 <= 64'hc2c17d5273a44c00;
      231: out3 <= 64'hc3bdbdf612f23600;
      232: out3 <= 64'hc4df28619ae57400;
      233: out3 <= 64'hc6250a1786711a00;
      234: out3 <= 64'hc78e9a1cfe849e00;
      235: out3 <= 64'hc91af975cd238400;
      236: out3 <= 64'hcac933ade2bcba00;
      237: out3 <= 64'hcc983f7018f17e00;
      238: out3 <= 64'hce86ff29d5d17e00;
      239: out3 <= 64'hd09441bb2aa0a200;
      240: out3 <= 64'hd2bec33301886600;
      241: out3 <= 64'hd5052d96e626c000;
      242: out3 <= 64'hd76619b5edc45400;
      243: out3 <= 64'hd9e010063d1f9600;
      244: out3 <= 64'hdc71898ca32e7000;
      245: out3 <= 64'hdf18f0cdba002400;
      246: out3 <= 64'he1d4a2c7f909c500;
      247: out3 <= 64'he4a2eff61ea34000;
      248: out3 <= 64'he7821d5951569d00;
      249: out3 <= 64'hea70658a54e02300;
      250: out3 <= 64'hed6bf9d12a60fa00;
      251: out3 <= 64'hf07303426f507280;
      252: out3 <= 64'hf383a3e1cb2cfa80;
      253: out3 <= 64'hf69bf7c8b8cf6300;
      254: out3 <= 64'hf9ba1650f592f500;
      255: out3 <= 64'hfcdc1341de44fd80;
      256: out3 <= 64'h0;
      257: out3 <= 64'hfc135230c0fbe400;
      258: out3 <= 64'hf82a6c6a55a33c80;
      259: out3 <= 64'hf4491310d7a06780;
      260: out3 <= 64'hf07303426f507280;
      261: out3 <= 64'hecabef3d1e7eae00;
      262: out3 <= 64'he8f77acf05ba6100;
      263: out3 <= 64'he55937d492c03600;
      264: out3 <= 64'he1d4a2c7f909c500;
      265: out3 <= 64'hde6d1f6544ece200;
      266: out3 <= 64'hdb25f56645da4200;
      267: out3 <= 64'hd8024d5975525800;
      268: out3 <= 64'hd5052d96e626c000;
      269: out3 <= 64'hd23177562aaea200;
      270: out3 <= 64'hcf89e3e800d12400;
      271: out3 <= 64'hcd11021670517c00;
      272: out3 <= 64'hcac933ade2bcba00;
      273: out3 <= 64'hc8b4ab3194de5c00;
      274: out3 <= 64'hc6d569bd97dc1600;
      275: out3 <= 64'hc52d3d186c32ea00;
      276: out3 <= 64'hc3bdbdf612f23600;
      277: out3 <= 64'hc2884e6e41e91800;
      278: out3 <= 64'hc18e18a73634ee00;
      279: out3 <= 64'hc0d00db66decca00;
      280: out3 <= 64'hc04ee4b85db5b400;
      281: out3 <= 64'hc00b1a2002114600;
      282: out3 <= 64'hc004ef3ef665e600;
      283: out3 <= 64'hc03c6a068549ee00;
      284: out3 <= 64'hc0b15501eeb5d200;
      285: out3 <= 64'hc1633f89e9a1a600;
      286: out3 <= 64'hc2517e312f6d3a00;
      287: out3 <= 64'hc37b2b69a87d0400;
      288: out3 <= 64'hc4df28619ae57400;
      289: out3 <= 64'hc67c1e1806074800;
      290: out3 <= 64'hc8507ea720d5ac00;
      291: out3 <= 64'hca5a86c3bc55de00;
      292: out3 <= 64'hcc983f7018f17e00;
      293: out3 <= 64'hcf077fe08ba28200;
      294: out3 <= 64'hd1a5ef902000d400;
      295: out3 <= 64'hd471088335fce800;
      296: out3 <= 64'hd76619b5edc45400;
      297: out3 <= 64'hda8249b40a182c00;
      298: out3 <= 64'hddc29957c969ba00;
      299: out3 <= 64'he123e6ad10872a00;
      300: out3 <= 64'he4a2eff61ea34000;
      301: out3 <= 64'he83c56cee2331900;
      302: out3 <= 64'hebeca36be899ff00;
      303: out3 <= 64'hefb047f1c8025200;
      304: out3 <= 64'hf383a3e1cb2cfa80;
      305: out3 <= 64'hf763079892854480;
      306: out3 <= 64'hfb4ab7db4c798280;
      307: out3 <= 64'hff36f1701909c3e0;
      308: out3 <= 64'h323ecbe21bb0280;
      309: out3 <= 64'h70de171e7b0b540;
      310: out3 <= 64'haf10a22459fe300;
      311: out3 <= 64'hec9a7f2a2a18880;
      312: out3 <= 64'h1294062ed59f0600;
      313: out3 <= 64'h164c7ddd3f27c600;
      314: out3 <= 64'h19ef7943a8ed8a00;
      315: out3 <= 64'h1d79775b86e38900;
      316: out3 <= 64'h20e70f3245ffdc00;
      317: out3 <= 64'h2434f33267d6b200;
      318: out3 <= 64'h275ff45240a17200;
      319: out3 <= 64'h2a65052546ab2c00;
      320: out3 <= 64'h0;
      321: out3 <= 64'hfb4ab7db4c798280;
      322: out3 <= 64'hf69bf7c8b8cf6300;
      323: out3 <= 64'hf1fa3ecac0d84e80;
      324: out3 <= 64'hed6bf9d12a60fa00;
      325: out3 <= 64'he8f77acf05ba6100;
      326: out3 <= 64'he4a2eff61ea34000;
      327: out3 <= 64'he0745b2407654600;
      328: out3 <= 64'hdc71898ca32e7000;
      329: out3 <= 64'hd8a00badbf5e8e00;
      330: out3 <= 64'hd5052d96e626c000;
      331: out3 <= 64'hd1a5ef902000d400;
      332: out3 <= 64'hce86ff29d5d17e00;
      333: out3 <= 64'hcbacb0bf73b0fc00;
      334: out3 <= 64'hc91af975cd238400;
      335: out3 <= 64'hc6d569bd97dc1600;
      336: out3 <= 64'hc4df28619ae57400;
      337: out3 <= 64'hc33aee276e3ddc00;
      338: out3 <= 64'hc1eb0208db9e5200;
      339: out3 <= 64'hc0f1360b1d68ae00;
      340: out3 <= 64'hc04ee4b85db5b400;
      341: out3 <= 64'hc004ef3ef665e600;
      342: out3 <= 64'hc013bc390d250400;
      343: out3 <= 64'hc07b371e3cc05a00;
      344: out3 <= 64'hc13ad0601146a000;
      345: out3 <= 64'hc2517e312f6d3a00;
      346: out3 <= 64'hc3bdbdf612f23600;
      347: out3 <= 64'hc57d965d646d8c00;
      348: out3 <= 64'hc78e9a1cfe849e00;
      349: out3 <= 64'hc9edeb4fd5fc0000;
      350: out3 <= 64'hcc983f7018f17e00;
      351: out3 <= 64'hcf89e3e800d12400;
      352: out3 <= 64'hd2bec33301886600;
      353: out3 <= 64'hd6326a8838342e00;
      354: out3 <= 64'hd9e010063d1f9600;
      355: out3 <= 64'hddc29957c969ba00;
      356: out3 <= 64'he1d4a2c7f909c500;
      357: out3 <= 64'he61086bc57127600;
      358: out3 <= 64'hea70658a54e02300;
      359: out3 <= 64'heeee2d9d4e098900;
      360: out3 <= 64'hf383a3e1cb2cfa80;
      361: out3 <= 64'hf82a6c6a55a33c80;
      362: out3 <= 64'hfcdc1341de44fd80;
      363: out3 <= 64'h192155f7a3667e0;
      364: out3 <= 64'h645e9af0a6d0b00;
      365: out3 <= 64'haf10a22459fe300;
      366: out3 <= 64'hf8cfcbd90af8d80;
      367: out3 <= 64'h14135c9417660100;
      368: out3 <= 64'h187de2a6aea96300;
      369: out3 <= 64'h1cc66e9931c45e00;
      370: out3 <= 64'h20e70f3245ffdc00;
      371: out3 <= 64'h24da0a99ba25be00;
      372: out3 <= 64'h2899e64a123bac00;
      373: out3 <= 64'h2c216eaa3a59be00;
      374: out3 <= 64'h2f6bbe44d55f5e00;
      375: out3 <= 64'h3274449324c7f600;
      376: out3 <= 64'h3536cc521d434600;
      377: out3 <= 64'h37af8158df2a5400;
      378: out3 <= 64'h39daf5e8798ee600;
      379: out3 <= 64'h3bb6276d99847800;
      380: out3 <= 64'h3d3e82ad8c5bb400;
      381: out3 <= 64'h3e71e758c9cb1200;
      382: out3 <= 64'h3f4eaafe114a2e00;
      383: out3 <= 64'h3fd39b5a03107400;
      384: out3 <= 64'h0;
      385: out3 <= 64'hfa824bfd5956f9c0;
      386: out3 <= 64'hf50ef5ddba601d00;
      387: out3 <= 64'hefb047f1c8025200;
      388: out3 <= 64'hea70658a54e02300;
      389: out3 <= 64'he55937d492c03600;
      390: out3 <= 64'he0745b2407654600;
      391: out3 <= 64'hdbcb0ccd98294e00;
      392: out3 <= 64'hd76619b5edc45400;
      393: out3 <= 64'hd34dcdb41f0f8600;
      394: out3 <= 64'hcf89e3e800d12400;
      395: out3 <= 64'hcc217821aca0d800;
      396: out3 <= 64'hc91af975cd238400;
      397: out3 <= 64'hc67c1e1806074800;
      398: out3 <= 64'hc449d892667b8800;
      399: out3 <= 64'hc2884e6e41e91800;
      400: out3 <= 64'hc13ad0601146a000;
      401: out3 <= 64'hc063d40524b30a00;
      402: out3 <= 64'hc004ef3ef665e600;
      403: out3 <= 64'hc01ed534e31ca600;
      404: out3 <= 64'hc0b15501eeb5d200;
      405: out3 <= 64'hc1bb5a11138a4c00;
      406: out3 <= 64'hc33aee276e3ddc00;
      407: out3 <= 64'hc52d3d186c32ea00;
      408: out3 <= 64'hc78e9a1cfe849e00;
      409: out3 <= 64'hca5a86c3bc55de00;
      410: out3 <= 64'hcd8bbb6cdb380a00;
      411: out3 <= 64'hd11c3141f91b3e00;
      412: out3 <= 64'hd5052d96e626c000;
      413: out3 <= 64'hd93f4e9df34c1a00;
      414: out3 <= 64'hddc29957c969ba00;
      415: out3 <= 64'he28688a4791c7700;
      416: out3 <= 64'he7821d5951569d00;
      417: out3 <= 64'hecabef3d1e7eae00;
      418: out3 <= 64'hf1fa3ecac0d84e80;
      419: out3 <= 64'hf763079892854480;
      420: out3 <= 64'hfcdc1341de44fd80;
      421: out3 <= 64'h25b0caeb28ab9a0;
      422: out3 <= 64'h7d59395aa5cc380;
      423: out3 <= 64'hd415012d8022880;
      424: out3 <= 64'h1294062ed59f0600;
      425: out3 <= 64'h17c3a9311dcce700;
      426: out3 <= 64'h1cc66e9931c45e00;
      427: out3 <= 64'h2192e09abb131e00;
      428: out3 <= 64'h261feff9c2e06a00;
      429: out3 <= 64'h2a65052546ab2c00;
      430: out3 <= 64'h2e5a106fdfff2c00;
      431: out3 <= 64'h31f79947df281a00;
      432: out3 <= 64'h3536cc521d434600;
      433: out3 <= 64'h3811884ce4aa9200;
      434: out3 <= 64'h3a8269a29b927400;
      435: out3 <= 64'h3c84d4965782fc00;
      436: out3 <= 64'h3e14fdf72461ae00;
      437: out3 <= 64'h3f2ff24992133600;
      438: out3 <= 64'h3fd39b5a03107400;
      439: out3 <= 64'h3ffec42d3725b600;
      440: out3 <= 64'h3fb11b47a24a4c00;
      441: out3 <= 64'h3eeb33474240ee00;
      442: out3 <= 64'h3dae81ced092c600;
      443: out3 <= 64'h3bfd5cc45b7c5600;
      444: out3 <= 64'h39daf5e8798ee600;
      445: out3 <= 64'h374b54ce6b21a400;
      446: out3 <= 64'h34534f408c4f0400;
      447: out3 <= 64'h30f8801f745d7e00;
      448: out3 <= 64'h0;
      449: out3 <= 64'hf9ba1650f592f500;
      450: out3 <= 64'hf383a3e1cb2cfa80;
      451: out3 <= 64'hed6bf9d12a60fa00;
      452: out3 <= 64'he7821d5951569d00;
      453: out3 <= 64'he1d4a2c7f909c500;
      454: out3 <= 64'hdc71898ca32e7000;
      455: out3 <= 64'hd76619b5edc45400;
      456: out3 <= 64'hd2bec33301886600;
      457: out3 <= 64'hce86ff29d5d17e00;
      458: out3 <= 64'hcac933ade2bcba00;
      459: out3 <= 64'hc78e9a1cfe849e00;
      460: out3 <= 64'hc4df28619ae57400;
      461: out3 <= 64'hc2c17d5273a44c00;
      462: out3 <= 64'hc13ad0601146a000;
      463: out3 <= 64'hc04ee4b85db5b400;
      464: out3 <= 64'hc000000000000000;
      465: out3 <= 64'hc04ee4b85db5b400;
      466: out3 <= 64'hc13ad0601146a000;
      467: out3 <= 64'hc2c17d5273a44c00;
      468: out3 <= 64'hc4df28619ae57400;
      469: out3 <= 64'hc78e9a1cfe849e00;
      470: out3 <= 64'hcac933ade2bcba00;
      471: out3 <= 64'hce86ff29d5d17e00;
      472: out3 <= 64'hd2bec33301886600;
      473: out3 <= 64'hd76619b5edc45400;
      474: out3 <= 64'hdc71898ca32e7000;
      475: out3 <= 64'he1d4a2c7f909c500;
      476: out3 <= 64'he7821d5951569d00;
      477: out3 <= 64'hed6bf9d12a60fa00;
      478: out3 <= 64'hf383a3e1cb2cfa80;
      479: out3 <= 64'hf9ba1650f592f500;
      480: out3 <= 64'h0;
      481: out3 <= 64'h645e9af0a6d0b00;
      482: out3 <= 64'hc7c5c1e34d30580;
      483: out3 <= 64'h1294062ed59f0600;
      484: out3 <= 64'h187de2a6aea96300;
      485: out3 <= 64'h1e2b5d3806f63b00;
      486: out3 <= 64'h238e76735cd19000;
      487: out3 <= 64'h2899e64a123bac00;
      488: out3 <= 64'h2d413cccfe779a00;
      489: out3 <= 64'h317900d62a2e8200;
      490: out3 <= 64'h3536cc521d434600;
      491: out3 <= 64'h387165e3017b6200;
      492: out3 <= 64'h3b20d79e651a8c00;
      493: out3 <= 64'h3d3e82ad8c5bb400;
      494: out3 <= 64'h3ec52f9feeb96000;
      495: out3 <= 64'h3fb11b47a24a4c00;
      496: out3 <= 64'h4000000000000000;
      497: out3 <= 64'h3fb11b47a24a4c00;
      498: out3 <= 64'h3ec52f9feeb96000;
      499: out3 <= 64'h3d3e82ad8c5bb400;
      500: out3 <= 64'h3b20d79e651a8c00;
      501: out3 <= 64'h387165e3017b6200;
      502: out3 <= 64'h3536cc521d434600;
      503: out3 <= 64'h317900d62a2e8200;
      504: out3 <= 64'h2d413cccfe779a00;
      505: out3 <= 64'h2899e64a123bac00;
      506: out3 <= 64'h238e76735cd19000;
      507: out3 <= 64'h1e2b5d3806f63b00;
      508: out3 <= 64'h187de2a6aea96300;
      509: out3 <= 64'h1294062ed59f0600;
      510: out3 <= 64'hc7c5c1e34d30580;
      511: out3 <= 64'h645e9af0a6d0b00;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 16
// Gap: 1
module codeBlock80787(clk, reset, next_in, next_out,
   i2_in,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i2_in;
   reg [4:0] i2;
   input [2:0] i1_in;
   reg [2:0] i1;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(15, 1) shiftFIFO_87719(.X(next), .Y(next_out), .clk(clk));


   wire  [8:0] a770;
   wire signed [63:0] a914;
   wire signed [63:0] a915;
   wire signed [63:0] a918;
   wire signed [63:0] a919;
   wire signed [63:0] a922;
   wire signed [63:0] a923;
   wire signed [63:0] a926;
   wire signed [63:0] a927;
   wire signed [63:0] a930;
   wire signed [63:0] a931;
   wire signed [63:0] a934;
   wire signed [63:0] a935;
   wire signed [63:0] a938;
   wire signed [63:0] a939;
   wire signed [63:0] a942;
   wire signed [63:0] a943;
   wire signed [63:0] a946;
   wire signed [63:0] a947;
   wire signed [63:0] a950;
   wire signed [63:0] a951;
   wire signed [63:0] a954;
   wire signed [63:0] a955;
   wire signed [63:0] a958;
   wire signed [63:0] a959;
   wire signed [63:0] a962;
   wire signed [63:0] a963;
   wire signed [63:0] a966;
   wire signed [63:0] a967;
   wire  [9:0] a771;
   wire  [9:0] a784;
   wire  [9:0] a794;
   wire  [9:0] a804;
   wire  [9:0] a814;
   wire  [9:0] a824;
   wire  [9:0] a834;
   wire  [9:0] a844;
   wire  [9:0] a854;
   wire  [9:0] a864;
   wire  [9:0] a874;
   wire  [9:0] a884;
   wire  [9:0] a894;
   wire  [9:0] a904;
   reg signed [63:0] tm125;
   reg signed [63:0] tm133;
   reg signed [63:0] tm158;
   reg signed [63:0] tm166;
   reg signed [63:0] tm191;
   reg signed [63:0] tm199;
   reg signed [63:0] tm224;
   reg signed [63:0] tm232;
   reg signed [63:0] tm257;
   reg signed [63:0] tm265;
   reg signed [63:0] tm290;
   reg signed [63:0] tm298;
   reg signed [63:0] tm323;
   reg signed [63:0] tm331;
   reg signed [63:0] tm356;
   reg signed [63:0] tm364;
   reg signed [63:0] tm389;
   reg signed [63:0] tm397;
   reg signed [63:0] tm422;
   reg signed [63:0] tm430;
   reg signed [63:0] tm455;
   reg signed [63:0] tm463;
   reg signed [63:0] tm488;
   reg signed [63:0] tm496;
   reg signed [63:0] tm521;
   reg signed [63:0] tm529;
   reg signed [63:0] tm554;
   reg signed [63:0] tm562;
   reg signed [63:0] tm586;
   reg signed [63:0] tm601;
   reg signed [63:0] tm616;
   reg signed [63:0] tm631;
   wire  [4:0] a772;
   wire  [5:0] a773;
   wire  [8:0] a774;
   reg  [9:0] tm124;
   reg signed [63:0] tm126;
   reg signed [63:0] tm134;
   reg  [9:0] tm157;
   reg signed [63:0] tm159;
   reg signed [63:0] tm167;
   reg  [9:0] tm190;
   reg signed [63:0] tm192;
   reg signed [63:0] tm200;
   reg  [9:0] tm223;
   reg signed [63:0] tm225;
   reg signed [63:0] tm233;
   reg  [9:0] tm256;
   reg signed [63:0] tm258;
   reg signed [63:0] tm266;
   reg  [9:0] tm289;
   reg signed [63:0] tm291;
   reg signed [63:0] tm299;
   reg  [9:0] tm322;
   reg signed [63:0] tm324;
   reg signed [63:0] tm332;
   reg  [9:0] tm355;
   reg signed [63:0] tm357;
   reg signed [63:0] tm365;
   reg  [9:0] tm388;
   reg signed [63:0] tm390;
   reg signed [63:0] tm398;
   reg  [9:0] tm421;
   reg signed [63:0] tm423;
   reg signed [63:0] tm431;
   reg  [9:0] tm454;
   reg signed [63:0] tm456;
   reg signed [63:0] tm464;
   reg  [9:0] tm487;
   reg signed [63:0] tm489;
   reg signed [63:0] tm497;
   reg  [9:0] tm520;
   reg signed [63:0] tm522;
   reg signed [63:0] tm530;
   reg  [9:0] tm553;
   reg signed [63:0] tm555;
   reg signed [63:0] tm563;
   reg signed [63:0] tm587;
   reg signed [63:0] tm602;
   reg signed [63:0] tm617;
   reg signed [63:0] tm632;
   reg  [9:0] a775;
   wire  [8:0] a776;
   reg  [9:0] a785;
   wire  [8:0] a786;
   reg  [9:0] a795;
   wire  [8:0] a796;
   reg  [9:0] a805;
   wire  [8:0] a806;
   reg  [9:0] a815;
   wire  [8:0] a816;
   reg  [9:0] a825;
   wire  [8:0] a826;
   reg  [9:0] a835;
   wire  [8:0] a836;
   reg  [9:0] a845;
   wire  [8:0] a846;
   reg  [9:0] a855;
   wire  [8:0] a856;
   reg  [9:0] a865;
   wire  [8:0] a866;
   reg  [9:0] a875;
   wire  [8:0] a876;
   reg  [9:0] a885;
   wire  [8:0] a886;
   reg  [9:0] a895;
   wire  [8:0] a896;
   reg  [9:0] a905;
   wire  [8:0] a906;
   reg signed [63:0] tm127;
   reg signed [63:0] tm135;
   reg signed [63:0] tm160;
   reg signed [63:0] tm168;
   reg signed [63:0] tm193;
   reg signed [63:0] tm201;
   reg signed [63:0] tm226;
   reg signed [63:0] tm234;
   reg signed [63:0] tm259;
   reg signed [63:0] tm267;
   reg signed [63:0] tm292;
   reg signed [63:0] tm300;
   reg signed [63:0] tm325;
   reg signed [63:0] tm333;
   reg signed [63:0] tm358;
   reg signed [63:0] tm366;
   reg signed [63:0] tm391;
   reg signed [63:0] tm399;
   reg signed [63:0] tm424;
   reg signed [63:0] tm432;
   reg signed [63:0] tm457;
   reg signed [63:0] tm465;
   reg signed [63:0] tm490;
   reg signed [63:0] tm498;
   reg signed [63:0] tm523;
   reg signed [63:0] tm531;
   reg signed [63:0] tm556;
   reg signed [63:0] tm564;
   reg signed [63:0] tm588;
   reg signed [63:0] tm603;
   reg signed [63:0] tm618;
   reg signed [63:0] tm633;
   wire  [9:0] a777;
   wire  [9:0] a787;
   wire  [9:0] a797;
   wire  [9:0] a807;
   wire  [9:0] a817;
   wire  [9:0] a827;
   wire  [9:0] a837;
   wire  [9:0] a847;
   wire  [9:0] a857;
   wire  [9:0] a867;
   wire  [9:0] a877;
   wire  [9:0] a887;
   wire  [9:0] a897;
   wire  [9:0] a907;
   reg signed [63:0] tm128;
   reg signed [63:0] tm136;
   reg signed [63:0] tm161;
   reg signed [63:0] tm169;
   reg signed [63:0] tm194;
   reg signed [63:0] tm202;
   reg signed [63:0] tm227;
   reg signed [63:0] tm235;
   reg signed [63:0] tm260;
   reg signed [63:0] tm268;
   reg signed [63:0] tm293;
   reg signed [63:0] tm301;
   reg signed [63:0] tm326;
   reg signed [63:0] tm334;
   reg signed [63:0] tm359;
   reg signed [63:0] tm367;
   reg signed [63:0] tm392;
   reg signed [63:0] tm400;
   reg signed [63:0] tm425;
   reg signed [63:0] tm433;
   reg signed [63:0] tm458;
   reg signed [63:0] tm466;
   reg signed [63:0] tm491;
   reg signed [63:0] tm499;
   reg signed [63:0] tm524;
   reg signed [63:0] tm532;
   reg signed [63:0] tm557;
   reg signed [63:0] tm565;
   reg signed [63:0] tm589;
   reg signed [63:0] tm604;
   reg signed [63:0] tm619;
   reg signed [63:0] tm634;
   reg signed [63:0] tm129;
   reg signed [63:0] tm137;
   reg signed [63:0] tm162;
   reg signed [63:0] tm170;
   reg signed [63:0] tm195;
   reg signed [63:0] tm203;
   reg signed [63:0] tm228;
   reg signed [63:0] tm236;
   reg signed [63:0] tm261;
   reg signed [63:0] tm269;
   reg signed [63:0] tm294;
   reg signed [63:0] tm302;
   reg signed [63:0] tm327;
   reg signed [63:0] tm335;
   reg signed [63:0] tm360;
   reg signed [63:0] tm368;
   reg signed [63:0] tm393;
   reg signed [63:0] tm401;
   reg signed [63:0] tm426;
   reg signed [63:0] tm434;
   reg signed [63:0] tm459;
   reg signed [63:0] tm467;
   reg signed [63:0] tm492;
   reg signed [63:0] tm500;
   reg signed [63:0] tm525;
   reg signed [63:0] tm533;
   reg signed [63:0] tm558;
   reg signed [63:0] tm566;
   reg signed [63:0] tm590;
   reg signed [63:0] tm605;
   reg signed [63:0] tm620;
   reg signed [63:0] tm635;
   reg signed [63:0] tm130;
   reg signed [63:0] tm138;
   reg signed [63:0] tm163;
   reg signed [63:0] tm171;
   reg signed [63:0] tm196;
   reg signed [63:0] tm204;
   reg signed [63:0] tm229;
   reg signed [63:0] tm237;
   reg signed [63:0] tm262;
   reg signed [63:0] tm270;
   reg signed [63:0] tm295;
   reg signed [63:0] tm303;
   reg signed [63:0] tm328;
   reg signed [63:0] tm336;
   reg signed [63:0] tm361;
   reg signed [63:0] tm369;
   reg signed [63:0] tm394;
   reg signed [63:0] tm402;
   reg signed [63:0] tm427;
   reg signed [63:0] tm435;
   reg signed [63:0] tm460;
   reg signed [63:0] tm468;
   reg signed [63:0] tm493;
   reg signed [63:0] tm501;
   reg signed [63:0] tm526;
   reg signed [63:0] tm534;
   reg signed [63:0] tm559;
   reg signed [63:0] tm567;
   reg signed [63:0] tm591;
   reg signed [63:0] tm606;
   reg signed [63:0] tm621;
   reg signed [63:0] tm636;
   wire signed [63:0] tm6;
   wire signed [63:0] a778;
   wire signed [63:0] tm7;
   wire signed [63:0] a780;
   wire signed [63:0] tm10;
   wire signed [63:0] a788;
   wire signed [63:0] tm11;
   wire signed [63:0] a790;
   wire signed [63:0] tm14;
   wire signed [63:0] a798;
   wire signed [63:0] tm15;
   wire signed [63:0] a800;
   wire signed [63:0] tm18;
   wire signed [63:0] a808;
   wire signed [63:0] tm19;
   wire signed [63:0] a810;
   wire signed [63:0] tm22;
   wire signed [63:0] a818;
   wire signed [63:0] tm23;
   wire signed [63:0] a820;
   wire signed [63:0] tm26;
   wire signed [63:0] a828;
   wire signed [63:0] tm27;
   wire signed [63:0] a830;
   wire signed [63:0] tm30;
   wire signed [63:0] a838;
   wire signed [63:0] tm31;
   wire signed [63:0] a840;
   wire signed [63:0] tm34;
   wire signed [63:0] a848;
   wire signed [63:0] tm35;
   wire signed [63:0] a850;
   wire signed [63:0] tm38;
   wire signed [63:0] a858;
   wire signed [63:0] tm39;
   wire signed [63:0] a860;
   wire signed [63:0] tm42;
   wire signed [63:0] a868;
   wire signed [63:0] tm43;
   wire signed [63:0] a870;
   wire signed [63:0] tm46;
   wire signed [63:0] a878;
   wire signed [63:0] tm47;
   wire signed [63:0] a880;
   wire signed [63:0] tm50;
   wire signed [63:0] a888;
   wire signed [63:0] tm51;
   wire signed [63:0] a890;
   wire signed [63:0] tm54;
   wire signed [63:0] a898;
   wire signed [63:0] tm55;
   wire signed [63:0] a900;
   wire signed [63:0] tm58;
   wire signed [63:0] a908;
   wire signed [63:0] tm59;
   wire signed [63:0] a910;
   reg signed [63:0] tm131;
   reg signed [63:0] tm139;
   reg signed [63:0] tm164;
   reg signed [63:0] tm172;
   reg signed [63:0] tm197;
   reg signed [63:0] tm205;
   reg signed [63:0] tm230;
   reg signed [63:0] tm238;
   reg signed [63:0] tm263;
   reg signed [63:0] tm271;
   reg signed [63:0] tm296;
   reg signed [63:0] tm304;
   reg signed [63:0] tm329;
   reg signed [63:0] tm337;
   reg signed [63:0] tm362;
   reg signed [63:0] tm370;
   reg signed [63:0] tm395;
   reg signed [63:0] tm403;
   reg signed [63:0] tm428;
   reg signed [63:0] tm436;
   reg signed [63:0] tm461;
   reg signed [63:0] tm469;
   reg signed [63:0] tm494;
   reg signed [63:0] tm502;
   reg signed [63:0] tm527;
   reg signed [63:0] tm535;
   reg signed [63:0] tm560;
   reg signed [63:0] tm568;
   reg signed [63:0] tm592;
   reg signed [63:0] tm607;
   reg signed [63:0] tm622;
   reg signed [63:0] tm637;
   reg signed [63:0] tm68;
   reg signed [63:0] tm69;
   reg signed [63:0] tm72;
   reg signed [63:0] tm73;
   reg signed [63:0] tm76;
   reg signed [63:0] tm77;
   reg signed [63:0] tm80;
   reg signed [63:0] tm81;
   reg signed [63:0] tm84;
   reg signed [63:0] tm85;
   reg signed [63:0] tm88;
   reg signed [63:0] tm89;
   reg signed [63:0] tm92;
   reg signed [63:0] tm93;
   reg signed [63:0] tm96;
   reg signed [63:0] tm97;
   reg signed [63:0] tm100;
   reg signed [63:0] tm101;
   reg signed [63:0] tm104;
   reg signed [63:0] tm105;
   reg signed [63:0] tm108;
   reg signed [63:0] tm109;
   reg signed [63:0] tm112;
   reg signed [63:0] tm113;
   reg signed [63:0] tm116;
   reg signed [63:0] tm117;
   reg signed [63:0] tm120;
   reg signed [63:0] tm121;
   reg signed [63:0] tm132;
   reg signed [63:0] tm140;
   reg signed [63:0] tm165;
   reg signed [63:0] tm173;
   reg signed [63:0] tm198;
   reg signed [63:0] tm206;
   reg signed [63:0] tm231;
   reg signed [63:0] tm239;
   reg signed [63:0] tm264;
   reg signed [63:0] tm272;
   reg signed [63:0] tm297;
   reg signed [63:0] tm305;
   reg signed [63:0] tm330;
   reg signed [63:0] tm338;
   reg signed [63:0] tm363;
   reg signed [63:0] tm371;
   reg signed [63:0] tm396;
   reg signed [63:0] tm404;
   reg signed [63:0] tm429;
   reg signed [63:0] tm437;
   reg signed [63:0] tm462;
   reg signed [63:0] tm470;
   reg signed [63:0] tm495;
   reg signed [63:0] tm503;
   reg signed [63:0] tm528;
   reg signed [63:0] tm536;
   reg signed [63:0] tm561;
   reg signed [63:0] tm569;
   reg signed [63:0] tm593;
   reg signed [63:0] tm608;
   reg signed [63:0] tm623;
   reg signed [63:0] tm638;
   reg signed [63:0] tm594;
   reg signed [63:0] tm609;
   reg signed [63:0] tm624;
   reg signed [63:0] tm639;
   reg signed [63:0] tm595;
   reg signed [63:0] tm610;
   reg signed [63:0] tm625;
   reg signed [63:0] tm640;
   reg signed [63:0] tm596;
   reg signed [63:0] tm611;
   reg signed [63:0] tm626;
   reg signed [63:0] tm641;
   reg signed [63:0] tm597;
   reg signed [63:0] tm612;
   reg signed [63:0] tm627;
   reg signed [63:0] tm642;
   reg signed [63:0] tm598;
   reg signed [63:0] tm613;
   reg signed [63:0] tm628;
   reg signed [63:0] tm643;
   wire signed [63:0] a779;
   wire signed [63:0] a781;
   wire signed [63:0] a782;
   wire signed [63:0] a783;
   wire signed [63:0] a789;
   wire signed [63:0] a791;
   wire signed [63:0] a792;
   wire signed [63:0] a793;
   wire signed [63:0] a799;
   wire signed [63:0] a801;
   wire signed [63:0] a802;
   wire signed [63:0] a803;
   wire signed [63:0] a809;
   wire signed [63:0] a811;
   wire signed [63:0] a812;
   wire signed [63:0] a813;
   wire signed [63:0] a819;
   wire signed [63:0] a821;
   wire signed [63:0] a822;
   wire signed [63:0] a823;
   wire signed [63:0] a829;
   wire signed [63:0] a831;
   wire signed [63:0] a832;
   wire signed [63:0] a833;
   wire signed [63:0] a839;
   wire signed [63:0] a841;
   wire signed [63:0] a842;
   wire signed [63:0] a843;
   wire signed [63:0] a849;
   wire signed [63:0] a851;
   wire signed [63:0] a852;
   wire signed [63:0] a853;
   wire signed [63:0] a859;
   wire signed [63:0] a861;
   wire signed [63:0] a862;
   wire signed [63:0] a863;
   wire signed [63:0] a869;
   wire signed [63:0] a871;
   wire signed [63:0] a872;
   wire signed [63:0] a873;
   wire signed [63:0] a879;
   wire signed [63:0] a881;
   wire signed [63:0] a882;
   wire signed [63:0] a883;
   wire signed [63:0] a889;
   wire signed [63:0] a891;
   wire signed [63:0] a892;
   wire signed [63:0] a893;
   wire signed [63:0] a899;
   wire signed [63:0] a901;
   wire signed [63:0] a902;
   wire signed [63:0] a903;
   wire signed [63:0] a909;
   wire signed [63:0] a911;
   wire signed [63:0] a912;
   wire signed [63:0] a913;
   reg signed [63:0] tm599;
   reg signed [63:0] tm614;
   reg signed [63:0] tm629;
   reg signed [63:0] tm644;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   wire signed [63:0] Y16;
   wire signed [63:0] Y17;
   wire signed [63:0] Y18;
   wire signed [63:0] Y19;
   wire signed [63:0] Y20;
   wire signed [63:0] Y21;
   wire signed [63:0] Y22;
   wire signed [63:0] Y23;
   wire signed [63:0] Y24;
   wire signed [63:0] Y25;
   wire signed [63:0] Y26;
   wire signed [63:0] Y27;
   wire signed [63:0] Y28;
   wire signed [63:0] Y29;
   wire signed [63:0] Y30;
   wire signed [63:0] Y31;
   reg signed [63:0] tm600;
   reg signed [63:0] tm615;
   reg signed [63:0] tm630;
   reg signed [63:0] tm645;

   wire [0:0] tm1;
   assign tm1 = 1'h1;
   wire [4:0] tm2;
   assign tm2 = 5'h3;
   wire [5:0] tm3;
   assign tm3 = 6'h3f;
   wire [2:0] tm4;
   assign tm4 = 3'h7;
   wire [6:0] tm5;
   assign tm5 = 7'h40;
   wire [1:0] tm8;
   assign tm8 = 2'h2;
   wire [1:0] tm12;
   assign tm12 = 2'h3;
   wire [2:0] tm16;
   assign tm16 = 3'h4;
   wire [2:0] tm20;
   assign tm20 = 3'h5;
   wire [2:0] tm24;
   assign tm24 = 3'h6;
   wire [3:0] tm32;
   assign tm32 = 4'h9;
   wire [3:0] tm36;
   assign tm36 = 4'ha;
   wire [3:0] tm40;
   assign tm40 = 4'hb;
   wire [3:0] tm44;
   assign tm44 = 4'hc;
   wire [3:0] tm48;
   assign tm48 = 4'hd;
   wire [3:0] tm52;
   assign tm52 = 4'he;
   wire [3:0] tm56;
   assign tm56 = 4'hf;

   assign a770 = i2 << 4;
   assign a914 = X2;
   assign a915 = X3;
   assign a918 = X4;
   assign a919 = X5;
   assign a922 = X6;
   assign a923 = X7;
   assign a926 = X8;
   assign a927 = X9;
   assign a930 = X10;
   assign a931 = X11;
   assign a934 = X12;
   assign a935 = X13;
   assign a938 = X14;
   assign a939 = X15;
   assign a942 = X18;
   assign a943 = X19;
   assign a946 = X20;
   assign a947 = X21;
   assign a950 = X22;
   assign a951 = X23;
   assign a954 = X24;
   assign a955 = X25;
   assign a958 = X26;
   assign a959 = X27;
   assign a962 = X28;
   assign a963 = X29;
   assign a966 = X30;
   assign a967 = X31;
   assign a773 = tm3 << a772;
   assign a774 = {a773, tm4[2:0]};
   assign a776 = {a775[2:0], a775[8:3]};
   assign a786 = {a785[2:0], a785[8:3]};
   assign a796 = {a795[2:0], a795[8:3]};
   assign a806 = {a805[2:0], a805[8:3]};
   assign a816 = {a815[2:0], a815[8:3]};
   assign a826 = {a825[2:0], a825[8:3]};
   assign a836 = {a835[2:0], a835[8:3]};
   assign a846 = {a845[2:0], a845[8:3]};
   assign a856 = {a855[2:0], a855[8:3]};
   assign a866 = {a865[2:0], a865[8:3]};
   assign a876 = {a875[2:0], a875[8:3]};
   assign a886 = {a885[2:0], a885[8:3]};
   assign a896 = {a895[2:0], a895[8:3]};
   assign a906 = {a905[2:0], a905[8:3]};
   assign a778 = tm6;
   assign a780 = tm7;
   assign a788 = tm10;
   assign a790 = tm11;
   assign a798 = tm14;
   assign a800 = tm15;
   assign a808 = tm18;
   assign a810 = tm19;
   assign a818 = tm22;
   assign a820 = tm23;
   assign a828 = tm26;
   assign a830 = tm27;
   assign a838 = tm30;
   assign a840 = tm31;
   assign a848 = tm34;
   assign a850 = tm35;
   assign a858 = tm38;
   assign a860 = tm39;
   assign a868 = tm42;
   assign a870 = tm43;
   assign a878 = tm46;
   assign a880 = tm47;
   assign a888 = tm50;
   assign a890 = tm51;
   assign a898 = tm54;
   assign a900 = tm55;
   assign a908 = tm58;
   assign a910 = tm59;
   assign Y0 = tm600;
   assign Y1 = tm615;
   assign Y16 = tm630;
   assign Y17 = tm645;

   D5_82841 instD5inst0_82841(.addr(a777[8:0]), .out(tm6), .clk(clk));

   D5_82841 instD5inst1_82841(.addr(a787[8:0]), .out(tm10), .clk(clk));

   D5_82841 instD5inst2_82841(.addr(a797[8:0]), .out(tm14), .clk(clk));

   D5_82841 instD5inst3_82841(.addr(a807[8:0]), .out(tm18), .clk(clk));

   D5_82841 instD5inst4_82841(.addr(a817[8:0]), .out(tm22), .clk(clk));

   D5_82841 instD5inst5_82841(.addr(a827[8:0]), .out(tm26), .clk(clk));

   D5_82841 instD5inst6_82841(.addr(a837[8:0]), .out(tm30), .clk(clk));

   D5_82841 instD5inst7_82841(.addr(a847[8:0]), .out(tm34), .clk(clk));

   D5_82841 instD5inst8_82841(.addr(a857[8:0]), .out(tm38), .clk(clk));

   D5_82841 instD5inst9_82841(.addr(a867[8:0]), .out(tm42), .clk(clk));

   D5_82841 instD5inst10_82841(.addr(a877[8:0]), .out(tm46), .clk(clk));

   D5_82841 instD5inst11_82841(.addr(a887[8:0]), .out(tm50), .clk(clk));

   D5_82841 instD5inst12_82841(.addr(a897[8:0]), .out(tm54), .clk(clk));

   D5_82841 instD5inst13_82841(.addr(a907[8:0]), .out(tm58), .clk(clk));

   D6_83355 instD6inst0_83355(.addr(a777[8:0]), .out(tm7), .clk(clk));

   D6_83355 instD6inst1_83355(.addr(a787[8:0]), .out(tm11), .clk(clk));

   D6_83355 instD6inst2_83355(.addr(a797[8:0]), .out(tm15), .clk(clk));

   D6_83355 instD6inst3_83355(.addr(a807[8:0]), .out(tm19), .clk(clk));

   D6_83355 instD6inst4_83355(.addr(a817[8:0]), .out(tm23), .clk(clk));

   D6_83355 instD6inst5_83355(.addr(a827[8:0]), .out(tm27), .clk(clk));

   D6_83355 instD6inst6_83355(.addr(a837[8:0]), .out(tm31), .clk(clk));

   D6_83355 instD6inst7_83355(.addr(a847[8:0]), .out(tm35), .clk(clk));

   D6_83355 instD6inst8_83355(.addr(a857[8:0]), .out(tm39), .clk(clk));

   D6_83355 instD6inst9_83355(.addr(a867[8:0]), .out(tm43), .clk(clk));

   D6_83355 instD6inst10_83355(.addr(a877[8:0]), .out(tm47), .clk(clk));

   D6_83355 instD6inst11_83355(.addr(a887[8:0]), .out(tm51), .clk(clk));

   D6_83355 instD6inst12_83355(.addr(a897[8:0]), .out(tm55), .clk(clk));

   D6_83355 instD6inst13_83355(.addr(a907[8:0]), .out(tm59), .clk(clk));

    addfxp #(10, 1) add80806(.a({1'b0, a770}), .b({9'b0, tm1}), .clk(clk), .q(a771));    // 0
    addfxp #(10, 1) add80932(.a({1'b0, a770}), .b({8'b0, tm8}), .clk(clk), .q(a784));    // 0
    addfxp #(10, 1) add81039(.a({1'b0, a770}), .b({8'b0, tm12}), .clk(clk), .q(a794));    // 0
    addfxp #(10, 1) add81146(.a({1'b0, a770}), .b({7'b0, tm16}), .clk(clk), .q(a804));    // 0
    addfxp #(10, 1) add81253(.a({1'b0, a770}), .b({7'b0, tm20}), .clk(clk), .q(a814));    // 0
    addfxp #(10, 1) add81360(.a({1'b0, a770}), .b({7'b0, tm24}), .clk(clk), .q(a824));    // 0
    addfxp #(10, 1) add81467(.a({1'b0, a770}), .b({7'b0, tm4}), .clk(clk), .q(a834));    // 0
    addfxp #(10, 1) add81582(.a({1'b0, a770}), .b({6'b0, tm32}), .clk(clk), .q(a844));    // 0
    addfxp #(10, 1) add81689(.a({1'b0, a770}), .b({6'b0, tm36}), .clk(clk), .q(a854));    // 0
    addfxp #(10, 1) add81796(.a({1'b0, a770}), .b({6'b0, tm40}), .clk(clk), .q(a864));    // 0
    addfxp #(10, 1) add81903(.a({1'b0, a770}), .b({6'b0, tm44}), .clk(clk), .q(a874));    // 0
    addfxp #(10, 1) add82010(.a({1'b0, a770}), .b({6'b0, tm48}), .clk(clk), .q(a884));    // 0
    addfxp #(10, 1) add82117(.a({1'b0, a770}), .b({6'b0, tm52}), .clk(clk), .q(a894));    // 0
    addfxp #(10, 1) add82224(.a({1'b0, a770}), .b({6'b0, tm56}), .clk(clk), .q(a904));    // 0
    multfix #(5, 2) m80813(.a(tm2), .b({2'b0, i1}), .clk(clk), .q_unsc(a772), .q_sc(), .rst(reset));
    subfxp #(10, 1) sub80845(.a({1'b0, a776}), .b({3'b0, tm5}), .clk(clk), .q(a777));    // 3
    subfxp #(10, 1) sub80952(.a({1'b0, a786}), .b({3'b0, tm5}), .clk(clk), .q(a787));    // 3
    subfxp #(10, 1) sub81059(.a({1'b0, a796}), .b({3'b0, tm5}), .clk(clk), .q(a797));    // 3
    subfxp #(10, 1) sub81166(.a({1'b0, a806}), .b({3'b0, tm5}), .clk(clk), .q(a807));    // 3
    subfxp #(10, 1) sub81273(.a({1'b0, a816}), .b({3'b0, tm5}), .clk(clk), .q(a817));    // 3
    subfxp #(10, 1) sub81380(.a({1'b0, a826}), .b({3'b0, tm5}), .clk(clk), .q(a827));    // 3
    subfxp #(10, 1) sub81487(.a({1'b0, a836}), .b({3'b0, tm5}), .clk(clk), .q(a837));    // 3
    subfxp #(10, 1) sub81602(.a({1'b0, a846}), .b({3'b0, tm5}), .clk(clk), .q(a847));    // 3
    subfxp #(10, 1) sub81709(.a({1'b0, a856}), .b({3'b0, tm5}), .clk(clk), .q(a857));    // 3
    subfxp #(10, 1) sub81816(.a({1'b0, a866}), .b({3'b0, tm5}), .clk(clk), .q(a867));    // 3
    subfxp #(10, 1) sub81923(.a({1'b0, a876}), .b({3'b0, tm5}), .clk(clk), .q(a877));    // 3
    subfxp #(10, 1) sub82030(.a({1'b0, a886}), .b({3'b0, tm5}), .clk(clk), .q(a887));    // 3
    subfxp #(10, 1) sub82137(.a({1'b0, a896}), .b({3'b0, tm5}), .clk(clk), .q(a897));    // 3
    subfxp #(10, 1) sub82244(.a({1'b0, a906}), .b({3'b0, tm5}), .clk(clk), .q(a907));    // 3
    multfix #(64, 6) m80867(.a(tm68), .b(tm132), .clk(clk), .q_sc(a779), .q_unsc(), .rst(reset));
    multfix #(64, 6) m80889(.a(tm69), .b(tm140), .clk(clk), .q_sc(a781), .q_unsc(), .rst(reset));
    multfix #(64, 6) m80907(.a(tm69), .b(tm132), .clk(clk), .q_sc(a782), .q_unsc(), .rst(reset));
    multfix #(64, 6) m80918(.a(tm68), .b(tm140), .clk(clk), .q_sc(a783), .q_unsc(), .rst(reset));
    multfix #(64, 6) m80974(.a(tm72), .b(tm165), .clk(clk), .q_sc(a789), .q_unsc(), .rst(reset));
    multfix #(64, 6) m80996(.a(tm73), .b(tm173), .clk(clk), .q_sc(a791), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81014(.a(tm73), .b(tm165), .clk(clk), .q_sc(a792), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81025(.a(tm72), .b(tm173), .clk(clk), .q_sc(a793), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81081(.a(tm76), .b(tm198), .clk(clk), .q_sc(a799), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81103(.a(tm77), .b(tm206), .clk(clk), .q_sc(a801), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81121(.a(tm77), .b(tm198), .clk(clk), .q_sc(a802), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81132(.a(tm76), .b(tm206), .clk(clk), .q_sc(a803), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81188(.a(tm80), .b(tm231), .clk(clk), .q_sc(a809), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81210(.a(tm81), .b(tm239), .clk(clk), .q_sc(a811), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81228(.a(tm81), .b(tm231), .clk(clk), .q_sc(a812), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81239(.a(tm80), .b(tm239), .clk(clk), .q_sc(a813), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81295(.a(tm84), .b(tm264), .clk(clk), .q_sc(a819), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81317(.a(tm85), .b(tm272), .clk(clk), .q_sc(a821), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81335(.a(tm85), .b(tm264), .clk(clk), .q_sc(a822), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81346(.a(tm84), .b(tm272), .clk(clk), .q_sc(a823), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81402(.a(tm88), .b(tm297), .clk(clk), .q_sc(a829), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81424(.a(tm89), .b(tm305), .clk(clk), .q_sc(a831), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81442(.a(tm89), .b(tm297), .clk(clk), .q_sc(a832), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81453(.a(tm88), .b(tm305), .clk(clk), .q_sc(a833), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81509(.a(tm92), .b(tm330), .clk(clk), .q_sc(a839), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81531(.a(tm93), .b(tm338), .clk(clk), .q_sc(a841), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81549(.a(tm93), .b(tm330), .clk(clk), .q_sc(a842), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81560(.a(tm92), .b(tm338), .clk(clk), .q_sc(a843), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81624(.a(tm96), .b(tm363), .clk(clk), .q_sc(a849), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81646(.a(tm97), .b(tm371), .clk(clk), .q_sc(a851), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81664(.a(tm97), .b(tm363), .clk(clk), .q_sc(a852), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81675(.a(tm96), .b(tm371), .clk(clk), .q_sc(a853), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81731(.a(tm100), .b(tm396), .clk(clk), .q_sc(a859), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81753(.a(tm101), .b(tm404), .clk(clk), .q_sc(a861), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81771(.a(tm101), .b(tm396), .clk(clk), .q_sc(a862), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81782(.a(tm100), .b(tm404), .clk(clk), .q_sc(a863), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81838(.a(tm104), .b(tm429), .clk(clk), .q_sc(a869), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81860(.a(tm105), .b(tm437), .clk(clk), .q_sc(a871), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81878(.a(tm105), .b(tm429), .clk(clk), .q_sc(a872), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81889(.a(tm104), .b(tm437), .clk(clk), .q_sc(a873), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81945(.a(tm108), .b(tm462), .clk(clk), .q_sc(a879), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81967(.a(tm109), .b(tm470), .clk(clk), .q_sc(a881), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81985(.a(tm109), .b(tm462), .clk(clk), .q_sc(a882), .q_unsc(), .rst(reset));
    multfix #(64, 6) m81996(.a(tm108), .b(tm470), .clk(clk), .q_sc(a883), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82052(.a(tm112), .b(tm495), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82074(.a(tm113), .b(tm503), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82092(.a(tm113), .b(tm495), .clk(clk), .q_sc(a892), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82103(.a(tm112), .b(tm503), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82159(.a(tm116), .b(tm528), .clk(clk), .q_sc(a899), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82181(.a(tm117), .b(tm536), .clk(clk), .q_sc(a901), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82199(.a(tm117), .b(tm528), .clk(clk), .q_sc(a902), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82210(.a(tm116), .b(tm536), .clk(clk), .q_sc(a903), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82266(.a(tm120), .b(tm561), .clk(clk), .q_sc(a909), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82288(.a(tm121), .b(tm569), .clk(clk), .q_sc(a911), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82306(.a(tm121), .b(tm561), .clk(clk), .q_sc(a912), .q_unsc(), .rst(reset));
    multfix #(64, 6) m82317(.a(tm120), .b(tm569), .clk(clk), .q_sc(a913), .q_unsc(), .rst(reset));
    subfxp #(64, 1) sub80896(.a(a779), .b(a781), .clk(clk), .q(Y2));    // 14
    addfxp #(64, 1) add80925(.a(a782), .b(a783), .clk(clk), .q(Y3));    // 14
    subfxp #(64, 1) sub81003(.a(a789), .b(a791), .clk(clk), .q(Y4));    // 14
    addfxp #(64, 1) add81032(.a(a792), .b(a793), .clk(clk), .q(Y5));    // 14
    subfxp #(64, 1) sub81110(.a(a799), .b(a801), .clk(clk), .q(Y6));    // 14
    addfxp #(64, 1) add81139(.a(a802), .b(a803), .clk(clk), .q(Y7));    // 14
    subfxp #(64, 1) sub81217(.a(a809), .b(a811), .clk(clk), .q(Y8));    // 14
    addfxp #(64, 1) add81246(.a(a812), .b(a813), .clk(clk), .q(Y9));    // 14
    subfxp #(64, 1) sub81324(.a(a819), .b(a821), .clk(clk), .q(Y10));    // 14
    addfxp #(64, 1) add81353(.a(a822), .b(a823), .clk(clk), .q(Y11));    // 14
    subfxp #(64, 1) sub81431(.a(a829), .b(a831), .clk(clk), .q(Y12));    // 14
    addfxp #(64, 1) add81460(.a(a832), .b(a833), .clk(clk), .q(Y13));    // 14
    subfxp #(64, 1) sub81538(.a(a839), .b(a841), .clk(clk), .q(Y14));    // 14
    addfxp #(64, 1) add81567(.a(a842), .b(a843), .clk(clk), .q(Y15));    // 14
    subfxp #(64, 1) sub81653(.a(a849), .b(a851), .clk(clk), .q(Y18));    // 14
    addfxp #(64, 1) add81682(.a(a852), .b(a853), .clk(clk), .q(Y19));    // 14
    subfxp #(64, 1) sub81760(.a(a859), .b(a861), .clk(clk), .q(Y20));    // 14
    addfxp #(64, 1) add81789(.a(a862), .b(a863), .clk(clk), .q(Y21));    // 14
    subfxp #(64, 1) sub81867(.a(a869), .b(a871), .clk(clk), .q(Y22));    // 14
    addfxp #(64, 1) add81896(.a(a872), .b(a873), .clk(clk), .q(Y23));    // 14
    subfxp #(64, 1) sub81974(.a(a879), .b(a881), .clk(clk), .q(Y24));    // 14
    addfxp #(64, 1) add82003(.a(a882), .b(a883), .clk(clk), .q(Y25));    // 14
    subfxp #(64, 1) sub82081(.a(a889), .b(a891), .clk(clk), .q(Y26));    // 14
    addfxp #(64, 1) add82110(.a(a892), .b(a893), .clk(clk), .q(Y27));    // 14
    subfxp #(64, 1) sub82188(.a(a899), .b(a901), .clk(clk), .q(Y28));    // 14
    addfxp #(64, 1) add82217(.a(a902), .b(a903), .clk(clk), .q(Y29));    // 14
    subfxp #(64, 1) sub82295(.a(a909), .b(a911), .clk(clk), .q(Y30));    // 14
    addfxp #(64, 1) add82324(.a(a912), .b(a913), .clk(clk), .q(Y31));    // 14


   always @(posedge clk) begin
      if (reset == 1) begin
         tm68 <= 0;
         tm132 <= 0;
         tm69 <= 0;
         tm140 <= 0;
         tm69 <= 0;
         tm132 <= 0;
         tm68 <= 0;
         tm140 <= 0;
         tm72 <= 0;
         tm165 <= 0;
         tm73 <= 0;
         tm173 <= 0;
         tm73 <= 0;
         tm165 <= 0;
         tm72 <= 0;
         tm173 <= 0;
         tm76 <= 0;
         tm198 <= 0;
         tm77 <= 0;
         tm206 <= 0;
         tm77 <= 0;
         tm198 <= 0;
         tm76 <= 0;
         tm206 <= 0;
         tm80 <= 0;
         tm231 <= 0;
         tm81 <= 0;
         tm239 <= 0;
         tm81 <= 0;
         tm231 <= 0;
         tm80 <= 0;
         tm239 <= 0;
         tm84 <= 0;
         tm264 <= 0;
         tm85 <= 0;
         tm272 <= 0;
         tm85 <= 0;
         tm264 <= 0;
         tm84 <= 0;
         tm272 <= 0;
         tm88 <= 0;
         tm297 <= 0;
         tm89 <= 0;
         tm305 <= 0;
         tm89 <= 0;
         tm297 <= 0;
         tm88 <= 0;
         tm305 <= 0;
         tm92 <= 0;
         tm330 <= 0;
         tm93 <= 0;
         tm338 <= 0;
         tm93 <= 0;
         tm330 <= 0;
         tm92 <= 0;
         tm338 <= 0;
         tm96 <= 0;
         tm363 <= 0;
         tm97 <= 0;
         tm371 <= 0;
         tm97 <= 0;
         tm363 <= 0;
         tm96 <= 0;
         tm371 <= 0;
         tm100 <= 0;
         tm396 <= 0;
         tm101 <= 0;
         tm404 <= 0;
         tm101 <= 0;
         tm396 <= 0;
         tm100 <= 0;
         tm404 <= 0;
         tm104 <= 0;
         tm429 <= 0;
         tm105 <= 0;
         tm437 <= 0;
         tm105 <= 0;
         tm429 <= 0;
         tm104 <= 0;
         tm437 <= 0;
         tm108 <= 0;
         tm462 <= 0;
         tm109 <= 0;
         tm470 <= 0;
         tm109 <= 0;
         tm462 <= 0;
         tm108 <= 0;
         tm470 <= 0;
         tm112 <= 0;
         tm495 <= 0;
         tm113 <= 0;
         tm503 <= 0;
         tm113 <= 0;
         tm495 <= 0;
         tm112 <= 0;
         tm503 <= 0;
         tm116 <= 0;
         tm528 <= 0;
         tm117 <= 0;
         tm536 <= 0;
         tm117 <= 0;
         tm528 <= 0;
         tm116 <= 0;
         tm536 <= 0;
         tm120 <= 0;
         tm561 <= 0;
         tm121 <= 0;
         tm569 <= 0;
         tm121 <= 0;
         tm561 <= 0;
         tm120 <= 0;
         tm569 <= 0;
      end
      else begin
         i2 <= i2_in;
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm125 <= a914;
         tm133 <= a915;
         tm158 <= a918;
         tm166 <= a919;
         tm191 <= a922;
         tm199 <= a923;
         tm224 <= a926;
         tm232 <= a927;
         tm257 <= a930;
         tm265 <= a931;
         tm290 <= a934;
         tm298 <= a935;
         tm323 <= a938;
         tm331 <= a939;
         tm356 <= a942;
         tm364 <= a943;
         tm389 <= a946;
         tm397 <= a947;
         tm422 <= a950;
         tm430 <= a951;
         tm455 <= a954;
         tm463 <= a955;
         tm488 <= a958;
         tm496 <= a959;
         tm521 <= a962;
         tm529 <= a963;
         tm554 <= a966;
         tm562 <= a967;
         tm586 <= X0;
         tm601 <= X1;
         tm616 <= X16;
         tm631 <= X17;
         tm124 <= a771;
         tm126 <= tm125;
         tm134 <= tm133;
         tm157 <= a784;
         tm159 <= tm158;
         tm167 <= tm166;
         tm190 <= a794;
         tm192 <= tm191;
         tm200 <= tm199;
         tm223 <= a804;
         tm225 <= tm224;
         tm233 <= tm232;
         tm256 <= a814;
         tm258 <= tm257;
         tm266 <= tm265;
         tm289 <= a824;
         tm291 <= tm290;
         tm299 <= tm298;
         tm322 <= a834;
         tm324 <= tm323;
         tm332 <= tm331;
         tm355 <= a844;
         tm357 <= tm356;
         tm365 <= tm364;
         tm388 <= a854;
         tm390 <= tm389;
         tm398 <= tm397;
         tm421 <= a864;
         tm423 <= tm422;
         tm431 <= tm430;
         tm454 <= a874;
         tm456 <= tm455;
         tm464 <= tm463;
         tm487 <= a884;
         tm489 <= tm488;
         tm497 <= tm496;
         tm520 <= a894;
         tm522 <= tm521;
         tm530 <= tm529;
         tm553 <= a904;
         tm555 <= tm554;
         tm563 <= tm562;
         tm587 <= tm586;
         tm602 <= tm601;
         tm617 <= tm616;
         tm632 <= tm631;
         a775 <= (tm124 & a774);
         a785 <= (tm157 & a774);
         a795 <= (tm190 & a774);
         a805 <= (tm223 & a774);
         a815 <= (tm256 & a774);
         a825 <= (tm289 & a774);
         a835 <= (tm322 & a774);
         a845 <= (tm355 & a774);
         a855 <= (tm388 & a774);
         a865 <= (tm421 & a774);
         a875 <= (tm454 & a774);
         a885 <= (tm487 & a774);
         a895 <= (tm520 & a774);
         a905 <= (tm553 & a774);
         tm127 <= tm126;
         tm135 <= tm134;
         tm160 <= tm159;
         tm168 <= tm167;
         tm193 <= tm192;
         tm201 <= tm200;
         tm226 <= tm225;
         tm234 <= tm233;
         tm259 <= tm258;
         tm267 <= tm266;
         tm292 <= tm291;
         tm300 <= tm299;
         tm325 <= tm324;
         tm333 <= tm332;
         tm358 <= tm357;
         tm366 <= tm365;
         tm391 <= tm390;
         tm399 <= tm398;
         tm424 <= tm423;
         tm432 <= tm431;
         tm457 <= tm456;
         tm465 <= tm464;
         tm490 <= tm489;
         tm498 <= tm497;
         tm523 <= tm522;
         tm531 <= tm530;
         tm556 <= tm555;
         tm564 <= tm563;
         tm588 <= tm587;
         tm603 <= tm602;
         tm618 <= tm617;
         tm633 <= tm632;
         tm128 <= tm127;
         tm136 <= tm135;
         tm161 <= tm160;
         tm169 <= tm168;
         tm194 <= tm193;
         tm202 <= tm201;
         tm227 <= tm226;
         tm235 <= tm234;
         tm260 <= tm259;
         tm268 <= tm267;
         tm293 <= tm292;
         tm301 <= tm300;
         tm326 <= tm325;
         tm334 <= tm333;
         tm359 <= tm358;
         tm367 <= tm366;
         tm392 <= tm391;
         tm400 <= tm399;
         tm425 <= tm424;
         tm433 <= tm432;
         tm458 <= tm457;
         tm466 <= tm465;
         tm491 <= tm490;
         tm499 <= tm498;
         tm524 <= tm523;
         tm532 <= tm531;
         tm557 <= tm556;
         tm565 <= tm564;
         tm589 <= tm588;
         tm604 <= tm603;
         tm619 <= tm618;
         tm634 <= tm633;
         tm129 <= tm128;
         tm137 <= tm136;
         tm162 <= tm161;
         tm170 <= tm169;
         tm195 <= tm194;
         tm203 <= tm202;
         tm228 <= tm227;
         tm236 <= tm235;
         tm261 <= tm260;
         tm269 <= tm268;
         tm294 <= tm293;
         tm302 <= tm301;
         tm327 <= tm326;
         tm335 <= tm334;
         tm360 <= tm359;
         tm368 <= tm367;
         tm393 <= tm392;
         tm401 <= tm400;
         tm426 <= tm425;
         tm434 <= tm433;
         tm459 <= tm458;
         tm467 <= tm466;
         tm492 <= tm491;
         tm500 <= tm499;
         tm525 <= tm524;
         tm533 <= tm532;
         tm558 <= tm557;
         tm566 <= tm565;
         tm590 <= tm589;
         tm605 <= tm604;
         tm620 <= tm619;
         tm635 <= tm634;
         tm130 <= tm129;
         tm138 <= tm137;
         tm163 <= tm162;
         tm171 <= tm170;
         tm196 <= tm195;
         tm204 <= tm203;
         tm229 <= tm228;
         tm237 <= tm236;
         tm262 <= tm261;
         tm270 <= tm269;
         tm295 <= tm294;
         tm303 <= tm302;
         tm328 <= tm327;
         tm336 <= tm335;
         tm361 <= tm360;
         tm369 <= tm368;
         tm394 <= tm393;
         tm402 <= tm401;
         tm427 <= tm426;
         tm435 <= tm434;
         tm460 <= tm459;
         tm468 <= tm467;
         tm493 <= tm492;
         tm501 <= tm500;
         tm526 <= tm525;
         tm534 <= tm533;
         tm559 <= tm558;
         tm567 <= tm566;
         tm591 <= tm590;
         tm606 <= tm605;
         tm621 <= tm620;
         tm636 <= tm635;
         tm131 <= tm130;
         tm139 <= tm138;
         tm164 <= tm163;
         tm172 <= tm171;
         tm197 <= tm196;
         tm205 <= tm204;
         tm230 <= tm229;
         tm238 <= tm237;
         tm263 <= tm262;
         tm271 <= tm270;
         tm296 <= tm295;
         tm304 <= tm303;
         tm329 <= tm328;
         tm337 <= tm336;
         tm362 <= tm361;
         tm370 <= tm369;
         tm395 <= tm394;
         tm403 <= tm402;
         tm428 <= tm427;
         tm436 <= tm435;
         tm461 <= tm460;
         tm469 <= tm468;
         tm494 <= tm493;
         tm502 <= tm501;
         tm527 <= tm526;
         tm535 <= tm534;
         tm560 <= tm559;
         tm568 <= tm567;
         tm592 <= tm591;
         tm607 <= tm606;
         tm622 <= tm621;
         tm637 <= tm636;
         tm68 <= a778;
         tm69 <= a780;
         tm72 <= a788;
         tm73 <= a790;
         tm76 <= a798;
         tm77 <= a800;
         tm80 <= a808;
         tm81 <= a810;
         tm84 <= a818;
         tm85 <= a820;
         tm88 <= a828;
         tm89 <= a830;
         tm92 <= a838;
         tm93 <= a840;
         tm96 <= a848;
         tm97 <= a850;
         tm100 <= a858;
         tm101 <= a860;
         tm104 <= a868;
         tm105 <= a870;
         tm108 <= a878;
         tm109 <= a880;
         tm112 <= a888;
         tm113 <= a890;
         tm116 <= a898;
         tm117 <= a900;
         tm120 <= a908;
         tm121 <= a910;
         tm132 <= tm131;
         tm140 <= tm139;
         tm165 <= tm164;
         tm173 <= tm172;
         tm198 <= tm197;
         tm206 <= tm205;
         tm231 <= tm230;
         tm239 <= tm238;
         tm264 <= tm263;
         tm272 <= tm271;
         tm297 <= tm296;
         tm305 <= tm304;
         tm330 <= tm329;
         tm338 <= tm337;
         tm363 <= tm362;
         tm371 <= tm370;
         tm396 <= tm395;
         tm404 <= tm403;
         tm429 <= tm428;
         tm437 <= tm436;
         tm462 <= tm461;
         tm470 <= tm469;
         tm495 <= tm494;
         tm503 <= tm502;
         tm528 <= tm527;
         tm536 <= tm535;
         tm561 <= tm560;
         tm569 <= tm568;
         tm593 <= tm592;
         tm608 <= tm607;
         tm623 <= tm622;
         tm638 <= tm637;
         tm594 <= tm593;
         tm609 <= tm608;
         tm624 <= tm623;
         tm639 <= tm638;
         tm595 <= tm594;
         tm610 <= tm609;
         tm625 <= tm624;
         tm640 <= tm639;
         tm596 <= tm595;
         tm611 <= tm610;
         tm626 <= tm625;
         tm641 <= tm640;
         tm597 <= tm596;
         tm612 <= tm611;
         tm627 <= tm626;
         tm642 <= tm641;
         tm598 <= tm597;
         tm613 <= tm612;
         tm628 <= tm627;
         tm643 <= tm642;
         tm599 <= tm598;
         tm614 <= tm613;
         tm629 <= tm628;
         tm644 <= tm643;
         tm600 <= tm599;
         tm615 <= tm614;
         tm630 <= tm629;
         tm645 <= tm644;
      end
   end
endmodule

// Latency: 11
// Gap: 1
module codeBlock83359(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15,
   X16_in, Y16,
   X17_in, Y17,
   X18_in, Y18,
   X19_in, Y19,
   X20_in, Y20,
   X21_in, Y21,
   X22_in, Y22,
   X23_in, Y23,
   X24_in, Y24,
   X25_in, Y25,
   X26_in, Y26,
   X27_in, Y27,
   X28_in, Y28,
   X29_in, Y29,
   X30_in, Y30,
   X31_in, Y31);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [63:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in,
      X16_in,
      X17_in,
      X18_in,
      X19_in,
      X20_in,
      X21_in,
      X22_in,
      X23_in,
      X24_in,
      X25_in,
      X26_in,
      X27_in,
      X28_in,
      X29_in,
      X30_in,
      X31_in;

   reg   [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   shiftRegFIFO #(10, 1) shiftFIFO_87722(.X(next), .Y(next_out), .clk(clk));


   wire signed [63:0] a89;
   wire signed [63:0] a90;
   wire signed [63:0] a91;
   wire signed [63:0] a92;
   wire signed [63:0] a97;
   wire signed [63:0] a98;
   wire signed [63:0] a99;
   wire signed [63:0] a100;
   wire signed [63:0] a105;
   wire signed [63:0] a106;
   wire signed [63:0] a107;
   wire signed [63:0] a108;
   wire signed [63:0] a113;
   wire signed [63:0] a114;
   wire signed [63:0] a115;
   wire signed [63:0] a116;
   wire signed [63:0] a121;
   wire signed [63:0] a122;
   wire signed [63:0] a123;
   wire signed [63:0] a124;
   wire signed [63:0] a129;
   wire signed [63:0] a130;
   wire signed [63:0] a131;
   wire signed [63:0] a132;
   wire signed [63:0] a137;
   wire signed [63:0] a138;
   wire signed [63:0] a139;
   wire signed [63:0] a140;
   wire signed [63:0] a145;
   wire signed [63:0] a146;
   wire signed [63:0] a147;
   wire signed [63:0] a148;
   wire signed [63:0] t642;
   wire signed [63:0] t643;
   wire signed [63:0] t644;
   wire signed [63:0] t645;
   wire signed [63:0] t646;
   wire signed [63:0] t647;
   wire signed [63:0] t648;
   wire signed [63:0] t649;
   wire signed [63:0] t652;
   wire signed [63:0] t653;
   wire signed [63:0] t654;
   wire signed [63:0] t655;
   wire signed [63:0] t656;
   wire signed [63:0] t657;
   wire signed [63:0] t658;
   wire signed [63:0] t659;
   wire signed [63:0] t694;
   wire signed [63:0] t695;
   wire signed [63:0] t696;
   wire signed [63:0] t697;
   wire signed [63:0] t698;
   wire signed [63:0] t699;
   wire signed [63:0] t700;
   wire signed [63:0] t701;
   wire signed [63:0] t704;
   wire signed [63:0] t705;
   wire signed [63:0] t706;
   wire signed [63:0] t707;
   wire signed [63:0] t708;
   wire signed [63:0] t709;
   wire signed [63:0] t710;
   wire signed [63:0] t711;
   wire signed [63:0] t662;
   wire signed [63:0] t663;
   wire signed [63:0] t664;
   wire signed [63:0] t665;
   wire signed [63:0] t666;
   wire signed [63:0] t667;
   wire signed [63:0] t668;
   wire signed [63:0] t669;
   wire signed [63:0] t678;
   wire signed [63:0] t679;
   wire signed [63:0] t680;
   wire signed [63:0] t681;
   wire signed [63:0] t714;
   wire signed [63:0] t715;
   wire signed [63:0] t716;
   wire signed [63:0] t717;
   wire signed [63:0] t718;
   wire signed [63:0] t719;
   wire signed [63:0] t720;
   wire signed [63:0] t721;
   wire signed [63:0] t730;
   wire signed [63:0] t731;
   wire signed [63:0] t732;
   wire signed [63:0] t733;
   wire signed [63:0] t670;
   wire signed [63:0] t671;
   wire signed [63:0] t672;
   wire signed [63:0] t673;
   wire signed [63:0] t674;
   wire signed [63:0] t675;
   wire signed [63:0] t676;
   wire signed [63:0] t677;
   wire signed [63:0] t722;
   wire signed [63:0] t723;
   wire signed [63:0] t724;
   wire signed [63:0] t725;
   wire signed [63:0] t726;
   wire signed [63:0] t727;
   wire signed [63:0] t728;
   wire signed [63:0] t729;
   reg signed [63:0] tm646;
   reg signed [63:0] tm653;
   reg signed [63:0] tm674;
   reg signed [63:0] tm681;
   reg signed [63:0] tm702;
   reg signed [63:0] tm709;
   reg signed [63:0] tm730;
   reg signed [63:0] tm737;
   reg signed [63:0] tm647;
   reg signed [63:0] tm654;
   reg signed [63:0] tm675;
   reg signed [63:0] tm682;
   reg signed [63:0] tm703;
   reg signed [63:0] tm710;
   reg signed [63:0] tm731;
   reg signed [63:0] tm738;
   reg signed [63:0] tm758;
   reg signed [63:0] tm765;
   reg signed [63:0] tm772;
   reg signed [63:0] tm779;
   reg signed [63:0] tm786;
   reg signed [63:0] tm793;
   reg signed [63:0] tm800;
   reg signed [63:0] tm807;
   reg signed [63:0] tm814;
   reg signed [63:0] tm821;
   reg signed [63:0] tm828;
   reg signed [63:0] tm835;
   reg signed [63:0] tm842;
   reg signed [63:0] tm849;
   reg signed [63:0] tm856;
   reg signed [63:0] tm863;
   reg signed [63:0] tm648;
   reg signed [63:0] tm655;
   reg signed [63:0] tm676;
   reg signed [63:0] tm683;
   reg signed [63:0] tm704;
   reg signed [63:0] tm711;
   reg signed [63:0] tm732;
   reg signed [63:0] tm739;
   reg signed [63:0] tm759;
   reg signed [63:0] tm766;
   reg signed [63:0] tm773;
   reg signed [63:0] tm780;
   reg signed [63:0] tm787;
   reg signed [63:0] tm794;
   reg signed [63:0] tm801;
   reg signed [63:0] tm808;
   reg signed [63:0] tm815;
   reg signed [63:0] tm822;
   reg signed [63:0] tm829;
   reg signed [63:0] tm836;
   reg signed [63:0] tm843;
   reg signed [63:0] tm850;
   reg signed [63:0] tm857;
   reg signed [63:0] tm864;
   reg signed [63:0] tm649;
   reg signed [63:0] tm656;
   reg signed [63:0] tm677;
   reg signed [63:0] tm684;
   reg signed [63:0] tm705;
   reg signed [63:0] tm712;
   reg signed [63:0] tm733;
   reg signed [63:0] tm740;
   reg signed [63:0] tm760;
   reg signed [63:0] tm767;
   reg signed [63:0] tm774;
   reg signed [63:0] tm781;
   reg signed [63:0] tm788;
   reg signed [63:0] tm795;
   reg signed [63:0] tm802;
   reg signed [63:0] tm809;
   reg signed [63:0] tm816;
   reg signed [63:0] tm823;
   reg signed [63:0] tm830;
   reg signed [63:0] tm837;
   reg signed [63:0] tm844;
   reg signed [63:0] tm851;
   reg signed [63:0] tm858;
   reg signed [63:0] tm865;
   wire signed [63:0] a81;
   wire signed [63:0] a82;
   wire signed [63:0] a83;
   wire signed [63:0] a84;
   wire signed [63:0] a85;
   wire signed [63:0] a86;
   wire signed [63:0] a87;
   wire signed [63:0] a88;
   reg signed [63:0] tm650;
   reg signed [63:0] tm657;
   reg signed [63:0] tm678;
   reg signed [63:0] tm685;
   reg signed [63:0] tm706;
   reg signed [63:0] tm713;
   reg signed [63:0] tm734;
   reg signed [63:0] tm741;
   reg signed [63:0] tm761;
   reg signed [63:0] tm768;
   reg signed [63:0] tm775;
   reg signed [63:0] tm782;
   reg signed [63:0] tm789;
   reg signed [63:0] tm796;
   reg signed [63:0] tm803;
   reg signed [63:0] tm810;
   reg signed [63:0] tm817;
   reg signed [63:0] tm824;
   reg signed [63:0] tm831;
   reg signed [63:0] tm838;
   reg signed [63:0] tm845;
   reg signed [63:0] tm852;
   reg signed [63:0] tm859;
   reg signed [63:0] tm866;
   wire signed [63:0] t650;
   wire signed [63:0] t651;
   wire signed [63:0] t660;
   wire signed [63:0] t661;
   wire signed [63:0] t702;
   wire signed [63:0] t703;
   wire signed [63:0] t712;
   wire signed [63:0] t713;
   reg signed [63:0] tm651;
   reg signed [63:0] tm658;
   reg signed [63:0] tm679;
   reg signed [63:0] tm686;
   reg signed [63:0] tm707;
   reg signed [63:0] tm714;
   reg signed [63:0] tm735;
   reg signed [63:0] tm742;
   reg signed [63:0] tm762;
   reg signed [63:0] tm769;
   reg signed [63:0] tm776;
   reg signed [63:0] tm783;
   reg signed [63:0] tm790;
   reg signed [63:0] tm797;
   reg signed [63:0] tm804;
   reg signed [63:0] tm811;
   reg signed [63:0] tm818;
   reg signed [63:0] tm825;
   reg signed [63:0] tm832;
   reg signed [63:0] tm839;
   reg signed [63:0] tm846;
   reg signed [63:0] tm853;
   reg signed [63:0] tm860;
   reg signed [63:0] tm867;
   wire signed [63:0] t682;
   wire signed [63:0] t683;
   wire signed [63:0] t684;
   wire signed [63:0] t685;
   wire signed [63:0] t734;
   wire signed [63:0] t735;
   wire signed [63:0] t736;
   wire signed [63:0] t737;
   reg signed [63:0] tm652;
   reg signed [63:0] tm659;
   reg signed [63:0] tm680;
   reg signed [63:0] tm687;
   reg signed [63:0] tm708;
   reg signed [63:0] tm715;
   reg signed [63:0] tm736;
   reg signed [63:0] tm743;
   reg signed [63:0] tm763;
   reg signed [63:0] tm770;
   reg signed [63:0] tm777;
   reg signed [63:0] tm784;
   reg signed [63:0] tm791;
   reg signed [63:0] tm798;
   reg signed [63:0] tm805;
   reg signed [63:0] tm812;
   reg signed [63:0] tm819;
   reg signed [63:0] tm826;
   reg signed [63:0] tm833;
   reg signed [63:0] tm840;
   reg signed [63:0] tm847;
   reg signed [63:0] tm854;
   reg signed [63:0] tm861;
   reg signed [63:0] tm868;
   wire signed [63:0] Y0;
   wire signed [63:0] Y1;
   wire signed [63:0] Y8;
   wire signed [63:0] Y9;
   wire signed [63:0] Y4;
   wire signed [63:0] Y5;
   wire signed [63:0] Y12;
   wire signed [63:0] Y13;
   wire signed [63:0] t686;
   wire signed [63:0] t687;
   wire signed [63:0] t688;
   wire signed [63:0] t689;
   wire signed [63:0] Y2;
   wire signed [63:0] Y3;
   wire signed [63:0] Y10;
   wire signed [63:0] Y11;
   wire signed [63:0] t690;
   wire signed [63:0] t691;
   wire signed [63:0] t692;
   wire signed [63:0] t693;
   wire signed [63:0] Y6;
   wire signed [63:0] Y7;
   wire signed [63:0] Y14;
   wire signed [63:0] Y15;
   wire signed [63:0] Y16;
   wire signed [63:0] Y17;
   wire signed [63:0] Y24;
   wire signed [63:0] Y25;
   wire signed [63:0] Y20;
   wire signed [63:0] Y21;
   wire signed [63:0] Y28;
   wire signed [63:0] Y29;
   wire signed [63:0] t738;
   wire signed [63:0] t739;
   wire signed [63:0] t740;
   wire signed [63:0] t741;
   wire signed [63:0] Y18;
   wire signed [63:0] Y19;
   wire signed [63:0] Y26;
   wire signed [63:0] Y27;
   wire signed [63:0] t742;
   wire signed [63:0] t743;
   wire signed [63:0] t744;
   wire signed [63:0] t745;
   wire signed [63:0] Y22;
   wire signed [63:0] Y23;
   wire signed [63:0] Y30;
   wire signed [63:0] Y31;
   reg signed [63:0] tm764;
   reg signed [63:0] tm771;
   reg signed [63:0] tm778;
   reg signed [63:0] tm785;
   reg signed [63:0] tm792;
   reg signed [63:0] tm799;
   reg signed [63:0] tm806;
   reg signed [63:0] tm813;
   reg signed [63:0] tm820;
   reg signed [63:0] tm827;
   reg signed [63:0] tm834;
   reg signed [63:0] tm841;
   reg signed [63:0] tm848;
   reg signed [63:0] tm855;
   reg signed [63:0] tm862;
   reg signed [63:0] tm869;

   wire signed [63:0] tm60;
   assign tm60 = 64'h2d413cccfe779a00;

   assign a89 = X0;
   assign a90 = X8;
   assign a91 = X1;
   assign a92 = X9;
   assign a97 = X2;
   assign a98 = X10;
   assign a99 = X3;
   assign a100 = X11;
   assign a105 = X4;
   assign a106 = X12;
   assign a107 = X5;
   assign a108 = X13;
   assign a113 = X6;
   assign a114 = X14;
   assign a115 = X7;
   assign a116 = X15;
   assign a121 = X16;
   assign a122 = X24;
   assign a123 = X17;
   assign a124 = X25;
   assign a129 = X18;
   assign a130 = X26;
   assign a131 = X19;
   assign a132 = X27;
   assign a137 = X20;
   assign a138 = X28;
   assign a139 = X21;
   assign a140 = X29;
   assign a145 = X22;
   assign a146 = X30;
   assign a147 = X23;
   assign a148 = X31;
   assign Y0 = tm764;
   assign Y1 = tm771;
   assign Y8 = tm778;
   assign Y9 = tm785;
   assign Y4 = tm792;
   assign Y5 = tm799;
   assign Y12 = tm806;
   assign Y13 = tm813;
   assign Y2 = t686;
   assign Y3 = t687;
   assign Y10 = t688;
   assign Y11 = t689;
   assign Y6 = t690;
   assign Y7 = t691;
   assign Y14 = t692;
   assign Y15 = t693;
   assign Y16 = tm820;
   assign Y17 = tm827;
   assign Y24 = tm834;
   assign Y25 = tm841;
   assign Y20 = tm848;
   assign Y21 = tm855;
   assign Y28 = tm862;
   assign Y29 = tm869;
   assign Y18 = t738;
   assign Y19 = t739;
   assign Y26 = t740;
   assign Y27 = t741;
   assign Y22 = t742;
   assign Y23 = t743;
   assign Y30 = t744;
   assign Y31 = t745;

    addfxp #(64, 1) add83371(.a(a89), .b(a90), .clk(clk), .q(t642));    // 0
    addfxp #(64, 1) add83386(.a(a91), .b(a92), .clk(clk), .q(t643));    // 0
    subfxp #(64, 1) sub83401(.a(a89), .b(a90), .clk(clk), .q(t644));    // 0
    subfxp #(64, 1) sub83416(.a(a91), .b(a92), .clk(clk), .q(t645));    // 0
    addfxp #(64, 1) add83431(.a(a97), .b(a98), .clk(clk), .q(t646));    // 0
    addfxp #(64, 1) add83446(.a(a99), .b(a100), .clk(clk), .q(t647));    // 0
    subfxp #(64, 1) sub83461(.a(a97), .b(a98), .clk(clk), .q(t648));    // 0
    subfxp #(64, 1) sub83476(.a(a99), .b(a100), .clk(clk), .q(t649));    // 0
    addfxp #(64, 1) add83519(.a(a105), .b(a106), .clk(clk), .q(t652));    // 0
    addfxp #(64, 1) add83534(.a(a107), .b(a108), .clk(clk), .q(t653));    // 0
    subfxp #(64, 1) sub83549(.a(a105), .b(a106), .clk(clk), .q(t654));    // 0
    subfxp #(64, 1) sub83564(.a(a107), .b(a108), .clk(clk), .q(t655));    // 0
    addfxp #(64, 1) add83579(.a(a113), .b(a114), .clk(clk), .q(t656));    // 0
    addfxp #(64, 1) add83594(.a(a115), .b(a116), .clk(clk), .q(t657));    // 0
    subfxp #(64, 1) sub83609(.a(a113), .b(a114), .clk(clk), .q(t658));    // 0
    subfxp #(64, 1) sub83624(.a(a115), .b(a116), .clk(clk), .q(t659));    // 0
    addfxp #(64, 1) add83955(.a(a121), .b(a122), .clk(clk), .q(t694));    // 0
    addfxp #(64, 1) add83970(.a(a123), .b(a124), .clk(clk), .q(t695));    // 0
    subfxp #(64, 1) sub83985(.a(a121), .b(a122), .clk(clk), .q(t696));    // 0
    subfxp #(64, 1) sub84000(.a(a123), .b(a124), .clk(clk), .q(t697));    // 0
    addfxp #(64, 1) add84015(.a(a129), .b(a130), .clk(clk), .q(t698));    // 0
    addfxp #(64, 1) add84030(.a(a131), .b(a132), .clk(clk), .q(t699));    // 0
    subfxp #(64, 1) sub84045(.a(a129), .b(a130), .clk(clk), .q(t700));    // 0
    subfxp #(64, 1) sub84060(.a(a131), .b(a132), .clk(clk), .q(t701));    // 0
    addfxp #(64, 1) add84103(.a(a137), .b(a138), .clk(clk), .q(t704));    // 0
    addfxp #(64, 1) add84118(.a(a139), .b(a140), .clk(clk), .q(t705));    // 0
    subfxp #(64, 1) sub84133(.a(a137), .b(a138), .clk(clk), .q(t706));    // 0
    subfxp #(64, 1) sub84148(.a(a139), .b(a140), .clk(clk), .q(t707));    // 0
    addfxp #(64, 1) add84163(.a(a145), .b(a146), .clk(clk), .q(t708));    // 0
    addfxp #(64, 1) add84178(.a(a147), .b(a148), .clk(clk), .q(t709));    // 0
    subfxp #(64, 1) sub84193(.a(a145), .b(a146), .clk(clk), .q(t710));    // 0
    subfxp #(64, 1) sub84208(.a(a147), .b(a148), .clk(clk), .q(t711));    // 0
    addfxp #(64, 1) add83659(.a(t642), .b(t652), .clk(clk), .q(t662));    // 1
    addfxp #(64, 1) add83666(.a(t643), .b(t653), .clk(clk), .q(t663));    // 1
    subfxp #(64, 1) sub83673(.a(t642), .b(t652), .clk(clk), .q(t664));    // 1
    subfxp #(64, 1) sub83680(.a(t643), .b(t653), .clk(clk), .q(t665));    // 1
    addfxp #(64, 1) add83687(.a(t646), .b(t656), .clk(clk), .q(t666));    // 1
    addfxp #(64, 1) add83694(.a(t647), .b(t657), .clk(clk), .q(t667));    // 1
    subfxp #(64, 1) sub83701(.a(t646), .b(t656), .clk(clk), .q(t668));    // 1
    subfxp #(64, 1) sub83708(.a(t647), .b(t657), .clk(clk), .q(t669));    // 1
    addfxp #(64, 1) add83803(.a(t644), .b(t655), .clk(clk), .q(t678));    // 1
    subfxp #(64, 1) sub83810(.a(t645), .b(t654), .clk(clk), .q(t679));    // 1
    subfxp #(64, 1) sub83817(.a(t644), .b(t655), .clk(clk), .q(t680));    // 1
    addfxp #(64, 1) add83824(.a(t645), .b(t654), .clk(clk), .q(t681));    // 1
    addfxp #(64, 1) add84243(.a(t694), .b(t704), .clk(clk), .q(t714));    // 1
    addfxp #(64, 1) add84250(.a(t695), .b(t705), .clk(clk), .q(t715));    // 1
    subfxp #(64, 1) sub84257(.a(t694), .b(t704), .clk(clk), .q(t716));    // 1
    subfxp #(64, 1) sub84264(.a(t695), .b(t705), .clk(clk), .q(t717));    // 1
    addfxp #(64, 1) add84271(.a(t698), .b(t708), .clk(clk), .q(t718));    // 1
    addfxp #(64, 1) add84278(.a(t699), .b(t709), .clk(clk), .q(t719));    // 1
    subfxp #(64, 1) sub84285(.a(t698), .b(t708), .clk(clk), .q(t720));    // 1
    subfxp #(64, 1) sub84292(.a(t699), .b(t709), .clk(clk), .q(t721));    // 1
    addfxp #(64, 1) add84387(.a(t696), .b(t707), .clk(clk), .q(t730));    // 1
    subfxp #(64, 1) sub84394(.a(t697), .b(t706), .clk(clk), .q(t731));    // 1
    subfxp #(64, 1) sub84401(.a(t696), .b(t707), .clk(clk), .q(t732));    // 1
    addfxp #(64, 1) add84408(.a(t697), .b(t706), .clk(clk), .q(t733));    // 1
    addfxp #(64, 1) add83715(.a(t662), .b(t666), .clk(clk), .q(t670));    // 2
    addfxp #(64, 1) add83722(.a(t663), .b(t667), .clk(clk), .q(t671));    // 2
    subfxp #(64, 1) sub83729(.a(t662), .b(t666), .clk(clk), .q(t672));    // 2
    subfxp #(64, 1) sub83736(.a(t663), .b(t667), .clk(clk), .q(t673));    // 2
    addfxp #(64, 1) add83759(.a(t664), .b(t669), .clk(clk), .q(t674));    // 2
    subfxp #(64, 1) sub83766(.a(t665), .b(t668), .clk(clk), .q(t675));    // 2
    subfxp #(64, 1) sub83773(.a(t664), .b(t669), .clk(clk), .q(t676));    // 2
    addfxp #(64, 1) add83780(.a(t665), .b(t668), .clk(clk), .q(t677));    // 2
    addfxp #(64, 1) add84299(.a(t714), .b(t718), .clk(clk), .q(t722));    // 2
    addfxp #(64, 1) add84306(.a(t715), .b(t719), .clk(clk), .q(t723));    // 2
    subfxp #(64, 1) sub84313(.a(t714), .b(t718), .clk(clk), .q(t724));    // 2
    subfxp #(64, 1) sub84320(.a(t715), .b(t719), .clk(clk), .q(t725));    // 2
    addfxp #(64, 1) add84343(.a(t716), .b(t721), .clk(clk), .q(t726));    // 2
    subfxp #(64, 1) sub84350(.a(t717), .b(t720), .clk(clk), .q(t727));    // 2
    subfxp #(64, 1) sub84357(.a(t716), .b(t721), .clk(clk), .q(t728));    // 2
    addfxp #(64, 1) add84364(.a(t717), .b(t720), .clk(clk), .q(t729));    // 2
    multfix #(64, 6) m83483(.a(tm60), .b(t648), .clk(clk), .q_sc(a81), .q_unsc(), .rst(reset));
    multfix #(64, 6) m83490(.a(tm60), .b(t649), .clk(clk), .q_sc(a82), .q_unsc(), .rst(reset));
    multfix #(64, 6) m83631(.a(tm60), .b(t659), .clk(clk), .q_sc(a83), .q_unsc(), .rst(reset));
    multfix #(64, 6) m83638(.a(tm60), .b(t658), .clk(clk), .q_sc(a84), .q_unsc(), .rst(reset));
    multfix #(64, 6) m84067(.a(tm60), .b(t700), .clk(clk), .q_sc(a85), .q_unsc(), .rst(reset));
    multfix #(64, 6) m84074(.a(tm60), .b(t701), .clk(clk), .q_sc(a86), .q_unsc(), .rst(reset));
    multfix #(64, 6) m84215(.a(tm60), .b(t711), .clk(clk), .q_sc(a87), .q_unsc(), .rst(reset));
    multfix #(64, 6) m84222(.a(tm60), .b(t710), .clk(clk), .q_sc(a88), .q_unsc(), .rst(reset));
    addfxp #(64, 1) add83497(.a(a81), .b(a82), .clk(clk), .q(t650));    // 7
    subfxp #(64, 1) sub83504(.a(a82), .b(a81), .clk(clk), .q(t651));    // 7
    subfxp #(64, 1) sub83645(.a(a83), .b(a84), .clk(clk), .q(t660));    // 7
    addfxp #(64, 1) add83652(.a(a84), .b(a83), .clk(clk), .q(t661));    // 7
    addfxp #(64, 1) add84081(.a(a85), .b(a86), .clk(clk), .q(t702));    // 7
    subfxp #(64, 1) sub84088(.a(a86), .b(a85), .clk(clk), .q(t703));    // 7
    subfxp #(64, 1) sub84229(.a(a87), .b(a88), .clk(clk), .q(t712));    // 7
    addfxp #(64, 1) add84236(.a(a88), .b(a87), .clk(clk), .q(t713));    // 7
    addfxp #(64, 1) add83831(.a(t650), .b(t660), .clk(clk), .q(t682));    // 8
    subfxp #(64, 1) sub83838(.a(t651), .b(t661), .clk(clk), .q(t683));    // 8
    subfxp #(64, 1) sub83845(.a(t650), .b(t660), .clk(clk), .q(t684));    // 8
    addfxp #(64, 1) add83852(.a(t651), .b(t661), .clk(clk), .q(t685));    // 8
    addfxp #(64, 1) add84415(.a(t702), .b(t712), .clk(clk), .q(t734));    // 8
    subfxp #(64, 1) sub84422(.a(t703), .b(t713), .clk(clk), .q(t735));    // 8
    subfxp #(64, 1) sub84429(.a(t702), .b(t712), .clk(clk), .q(t736));    // 8
    addfxp #(64, 1) add84436(.a(t703), .b(t713), .clk(clk), .q(t737));    // 8
    addfxp #(64, 1) add83859(.a(tm652), .b(t682), .clk(clk), .q(t686));    // 9
    addfxp #(64, 1) add83866(.a(tm659), .b(t683), .clk(clk), .q(t687));    // 9
    subfxp #(64, 1) sub83873(.a(tm652), .b(t682), .clk(clk), .q(t688));    // 9
    subfxp #(64, 1) sub83880(.a(tm659), .b(t683), .clk(clk), .q(t689));    // 9
    addfxp #(64, 1) add83903(.a(tm680), .b(t685), .clk(clk), .q(t690));    // 9
    subfxp #(64, 1) sub83910(.a(tm687), .b(t684), .clk(clk), .q(t691));    // 9
    subfxp #(64, 1) sub83917(.a(tm680), .b(t685), .clk(clk), .q(t692));    // 9
    addfxp #(64, 1) add83924(.a(tm687), .b(t684), .clk(clk), .q(t693));    // 9
    addfxp #(64, 1) add84443(.a(tm708), .b(t734), .clk(clk), .q(t738));    // 9
    addfxp #(64, 1) add84450(.a(tm715), .b(t735), .clk(clk), .q(t739));    // 9
    subfxp #(64, 1) sub84457(.a(tm708), .b(t734), .clk(clk), .q(t740));    // 9
    subfxp #(64, 1) sub84464(.a(tm715), .b(t735), .clk(clk), .q(t741));    // 9
    addfxp #(64, 1) add84487(.a(tm736), .b(t737), .clk(clk), .q(t742));    // 9
    subfxp #(64, 1) sub84494(.a(tm743), .b(t736), .clk(clk), .q(t743));    // 9
    subfxp #(64, 1) sub84501(.a(tm736), .b(t737), .clk(clk), .q(t744));    // 9
    addfxp #(64, 1) add84508(.a(tm743), .b(t736), .clk(clk), .q(t745));    // 9


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         X16 <= X16_in;
         X17 <= X17_in;
         X18 <= X18_in;
         X19 <= X19_in;
         X20 <= X20_in;
         X21 <= X21_in;
         X22 <= X22_in;
         X23 <= X23_in;
         X24 <= X24_in;
         X25 <= X25_in;
         X26 <= X26_in;
         X27 <= X27_in;
         X28 <= X28_in;
         X29 <= X29_in;
         X30 <= X30_in;
         X31 <= X31_in;
         next <= next_in;
         tm646 <= t678;
         tm653 <= t679;
         tm674 <= t680;
         tm681 <= t681;
         tm702 <= t730;
         tm709 <= t731;
         tm730 <= t732;
         tm737 <= t733;
         tm647 <= tm646;
         tm654 <= tm653;
         tm675 <= tm674;
         tm682 <= tm681;
         tm703 <= tm702;
         tm710 <= tm709;
         tm731 <= tm730;
         tm738 <= tm737;
         tm758 <= t670;
         tm765 <= t671;
         tm772 <= t672;
         tm779 <= t673;
         tm786 <= t674;
         tm793 <= t675;
         tm800 <= t676;
         tm807 <= t677;
         tm814 <= t722;
         tm821 <= t723;
         tm828 <= t724;
         tm835 <= t725;
         tm842 <= t726;
         tm849 <= t727;
         tm856 <= t728;
         tm863 <= t729;
         tm648 <= tm647;
         tm655 <= tm654;
         tm676 <= tm675;
         tm683 <= tm682;
         tm704 <= tm703;
         tm711 <= tm710;
         tm732 <= tm731;
         tm739 <= tm738;
         tm759 <= tm758;
         tm766 <= tm765;
         tm773 <= tm772;
         tm780 <= tm779;
         tm787 <= tm786;
         tm794 <= tm793;
         tm801 <= tm800;
         tm808 <= tm807;
         tm815 <= tm814;
         tm822 <= tm821;
         tm829 <= tm828;
         tm836 <= tm835;
         tm843 <= tm842;
         tm850 <= tm849;
         tm857 <= tm856;
         tm864 <= tm863;
         tm649 <= tm648;
         tm656 <= tm655;
         tm677 <= tm676;
         tm684 <= tm683;
         tm705 <= tm704;
         tm712 <= tm711;
         tm733 <= tm732;
         tm740 <= tm739;
         tm760 <= tm759;
         tm767 <= tm766;
         tm774 <= tm773;
         tm781 <= tm780;
         tm788 <= tm787;
         tm795 <= tm794;
         tm802 <= tm801;
         tm809 <= tm808;
         tm816 <= tm815;
         tm823 <= tm822;
         tm830 <= tm829;
         tm837 <= tm836;
         tm844 <= tm843;
         tm851 <= tm850;
         tm858 <= tm857;
         tm865 <= tm864;
         tm650 <= tm649;
         tm657 <= tm656;
         tm678 <= tm677;
         tm685 <= tm684;
         tm706 <= tm705;
         tm713 <= tm712;
         tm734 <= tm733;
         tm741 <= tm740;
         tm761 <= tm760;
         tm768 <= tm767;
         tm775 <= tm774;
         tm782 <= tm781;
         tm789 <= tm788;
         tm796 <= tm795;
         tm803 <= tm802;
         tm810 <= tm809;
         tm817 <= tm816;
         tm824 <= tm823;
         tm831 <= tm830;
         tm838 <= tm837;
         tm845 <= tm844;
         tm852 <= tm851;
         tm859 <= tm858;
         tm866 <= tm865;
         tm651 <= tm650;
         tm658 <= tm657;
         tm679 <= tm678;
         tm686 <= tm685;
         tm707 <= tm706;
         tm714 <= tm713;
         tm735 <= tm734;
         tm742 <= tm741;
         tm762 <= tm761;
         tm769 <= tm768;
         tm776 <= tm775;
         tm783 <= tm782;
         tm790 <= tm789;
         tm797 <= tm796;
         tm804 <= tm803;
         tm811 <= tm810;
         tm818 <= tm817;
         tm825 <= tm824;
         tm832 <= tm831;
         tm839 <= tm838;
         tm846 <= tm845;
         tm853 <= tm852;
         tm860 <= tm859;
         tm867 <= tm866;
         tm652 <= tm651;
         tm659 <= tm658;
         tm680 <= tm679;
         tm687 <= tm686;
         tm708 <= tm707;
         tm715 <= tm714;
         tm736 <= tm735;
         tm743 <= tm742;
         tm763 <= tm762;
         tm770 <= tm769;
         tm777 <= tm776;
         tm784 <= tm783;
         tm791 <= tm790;
         tm798 <= tm797;
         tm805 <= tm804;
         tm812 <= tm811;
         tm819 <= tm818;
         tm826 <= tm825;
         tm833 <= tm832;
         tm840 <= tm839;
         tm847 <= tm846;
         tm854 <= tm853;
         tm861 <= tm860;
         tm868 <= tm867;
         tm764 <= tm763;
         tm771 <= tm770;
         tm778 <= tm777;
         tm785 <= tm784;
         tm792 <= tm791;
         tm799 <= tm798;
         tm806 <= tm805;
         tm813 <= tm812;
         tm820 <= tm819;
         tm827 <= tm826;
         tm834 <= tm833;
         tm841 <= tm840;
         tm848 <= tm847;
         tm855 <= tm854;
         tm862 <= tm861;
         tm869 <= tm868;
      end
   end
endmodule

// Latency: 35
// Gap: 32
module rc84532(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15,
   X16, Y16,
   X17, Y17,
   X18, Y18,
   X19, Y19,
   X20, Y20,
   X21, Y21,
   X22, Y22,
   X23, Y23,
   X24, Y24,
   X25, Y25,
   X26, Y26,
   X27, Y27,
   X28, Y28,
   X29, Y29,
   X30, Y30,
   X31, Y31);

   output next_out;
   input clk, reset, next;

   input [63:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15,
      X16,
      X17,
      X18,
      X19,
      X20,
      X21,
      X22,
      X23,
      X24,
      X25,
      X26,
      X27,
      X28,
      X29,
      X30,
      X31;

   output [63:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15,
      Y16,
      Y17,
      Y18,
      Y19,
      Y20,
      Y21,
      Y22,
      Y23,
      Y24,
      Y25,
      Y26,
      Y27,
      Y28,
      Y29,
      Y30,
      Y31;

   wire [127:0] t0;
   wire [127:0] s0;
   assign t0 = {X0, X1};
   wire [127:0] t1;
   wire [127:0] s1;
   assign t1 = {X2, X3};
   wire [127:0] t2;
   wire [127:0] s2;
   assign t2 = {X4, X5};
   wire [127:0] t3;
   wire [127:0] s3;
   assign t3 = {X6, X7};
   wire [127:0] t4;
   wire [127:0] s4;
   assign t4 = {X8, X9};
   wire [127:0] t5;
   wire [127:0] s5;
   assign t5 = {X10, X11};
   wire [127:0] t6;
   wire [127:0] s6;
   assign t6 = {X12, X13};
   wire [127:0] t7;
   wire [127:0] s7;
   assign t7 = {X14, X15};
   wire [127:0] t8;
   wire [127:0] s8;
   assign t8 = {X16, X17};
   wire [127:0] t9;
   wire [127:0] s9;
   assign t9 = {X18, X19};
   wire [127:0] t10;
   wire [127:0] s10;
   assign t10 = {X20, X21};
   wire [127:0] t11;
   wire [127:0] s11;
   assign t11 = {X22, X23};
   wire [127:0] t12;
   wire [127:0] s12;
   assign t12 = {X24, X25};
   wire [127:0] t13;
   wire [127:0] s13;
   assign t13 = {X26, X27};
   wire [127:0] t14;
   wire [127:0] s14;
   assign t14 = {X28, X29};
   wire [127:0] t15;
   wire [127:0] s15;
   assign t15 = {X30, X31};
   assign Y0 = s0[127:64];
   assign Y1 = s0[63:0];
   assign Y2 = s1[127:64];
   assign Y3 = s1[63:0];
   assign Y4 = s2[127:64];
   assign Y5 = s2[63:0];
   assign Y6 = s3[127:64];
   assign Y7 = s3[63:0];
   assign Y8 = s4[127:64];
   assign Y9 = s4[63:0];
   assign Y10 = s5[127:64];
   assign Y11 = s5[63:0];
   assign Y12 = s6[127:64];
   assign Y13 = s6[63:0];
   assign Y14 = s7[127:64];
   assign Y15 = s7[63:0];
   assign Y16 = s8[127:64];
   assign Y17 = s8[63:0];
   assign Y18 = s9[127:64];
   assign Y19 = s9[63:0];
   assign Y20 = s10[127:64];
   assign Y21 = s10[63:0];
   assign Y22 = s11[127:64];
   assign Y23 = s11[63:0];
   assign Y24 = s12[127:64];
   assign Y25 = s12[63:0];
   assign Y26 = s13[127:64];
   assign Y27 = s13[63:0];
   assign Y28 = s14[127:64];
   assign Y29 = s14[63:0];
   assign Y30 = s15[127:64];
   assign Y31 = s15[63:0];

   perm84530 instPerm87723(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
    .x8(t8), .y8(s8),
    .x9(t9), .y9(s9),
    .x10(t10), .y10(s10),
    .x11(t11), .y11(s11),
    .x12(t12), .y12(s12),
    .x13(t13), .y13(s13),
    .x14(t14), .y14(s14),
    .x15(t15), .y15(s15),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

// Latency: 35
// Gap: 32
module perm84530(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7,
   x8, y8,
   x9, y9,
   x10, y10,
   x11, y11,
   x12, y12,
   x13, y13,
   x14, y14,
   x15, y15);
   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 128;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  ybuff0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  ybuff1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  ybuff2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  ybuff3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  ybuff4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  ybuff5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  ybuff6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  ybuff7;
   input [width-1:0]  x8;
   output [width-1:0]  y8;
   wire [width-1:0]  ybuff8;
   input [width-1:0]  x9;
   output [width-1:0]  y9;
   wire [width-1:0]  ybuff9;
   input [width-1:0]  x10;
   output [width-1:0]  y10;
   wire [width-1:0]  ybuff10;
   input [width-1:0]  x11;
   output [width-1:0]  y11;
   wire [width-1:0]  ybuff11;
   input [width-1:0]  x12;
   output [width-1:0]  y12;
   wire [width-1:0]  ybuff12;
   input [width-1:0]  x13;
   output [width-1:0]  y13;
   wire [width-1:0]  ybuff13;
   input [width-1:0]  x14;
   output [width-1:0]  y14;
   wire [width-1:0]  ybuff14;
   input [width-1:0]  x15;
   output [width-1:0]  y15;
   wire [width-1:0]  ybuff15;
   input 	      clk, next, reset;
   output 	     next_out;

   wire    	     next0;

   reg              inFlip0, outFlip0;
   reg              inActive, outActive;

   wire [logBanks-1:0] inBank0, outBank0;
   wire [logDepth-1:0] inAddr0, outAddr0;
   wire [logBanks-1:0] outBank_a0;
   wire [logDepth-1:0] outAddr_a0;
   wire [logDepth+logBanks-1:0] addr0, addr0b, addr0c;
   wire [logBanks-1:0] inBank1, outBank1;
   wire [logDepth-1:0] inAddr1, outAddr1;
   wire [logBanks-1:0] outBank_a1;
   wire [logDepth-1:0] outAddr_a1;
   wire [logDepth+logBanks-1:0] addr1, addr1b, addr1c;
   wire [logBanks-1:0] inBank2, outBank2;
   wire [logDepth-1:0] inAddr2, outAddr2;
   wire [logBanks-1:0] outBank_a2;
   wire [logDepth-1:0] outAddr_a2;
   wire [logDepth+logBanks-1:0] addr2, addr2b, addr2c;
   wire [logBanks-1:0] inBank3, outBank3;
   wire [logDepth-1:0] inAddr3, outAddr3;
   wire [logBanks-1:0] outBank_a3;
   wire [logDepth-1:0] outAddr_a3;
   wire [logDepth+logBanks-1:0] addr3, addr3b, addr3c;
   wire [logBanks-1:0] inBank4, outBank4;
   wire [logDepth-1:0] inAddr4, outAddr4;
   wire [logBanks-1:0] outBank_a4;
   wire [logDepth-1:0] outAddr_a4;
   wire [logDepth+logBanks-1:0] addr4, addr4b, addr4c;
   wire [logBanks-1:0] inBank5, outBank5;
   wire [logDepth-1:0] inAddr5, outAddr5;
   wire [logBanks-1:0] outBank_a5;
   wire [logDepth-1:0] outAddr_a5;
   wire [logDepth+logBanks-1:0] addr5, addr5b, addr5c;
   wire [logBanks-1:0] inBank6, outBank6;
   wire [logDepth-1:0] inAddr6, outAddr6;
   wire [logBanks-1:0] outBank_a6;
   wire [logDepth-1:0] outAddr_a6;
   wire [logDepth+logBanks-1:0] addr6, addr6b, addr6c;
   wire [logBanks-1:0] inBank7, outBank7;
   wire [logDepth-1:0] inAddr7, outAddr7;
   wire [logBanks-1:0] outBank_a7;
   wire [logDepth-1:0] outAddr_a7;
   wire [logDepth+logBanks-1:0] addr7, addr7b, addr7c;
   wire [logBanks-1:0] inBank8, outBank8;
   wire [logDepth-1:0] inAddr8, outAddr8;
   wire [logBanks-1:0] outBank_a8;
   wire [logDepth-1:0] outAddr_a8;
   wire [logDepth+logBanks-1:0] addr8, addr8b, addr8c;
   wire [logBanks-1:0] inBank9, outBank9;
   wire [logDepth-1:0] inAddr9, outAddr9;
   wire [logBanks-1:0] outBank_a9;
   wire [logDepth-1:0] outAddr_a9;
   wire [logDepth+logBanks-1:0] addr9, addr9b, addr9c;
   wire [logBanks-1:0] inBank10, outBank10;
   wire [logDepth-1:0] inAddr10, outAddr10;
   wire [logBanks-1:0] outBank_a10;
   wire [logDepth-1:0] outAddr_a10;
   wire [logDepth+logBanks-1:0] addr10, addr10b, addr10c;
   wire [logBanks-1:0] inBank11, outBank11;
   wire [logDepth-1:0] inAddr11, outAddr11;
   wire [logBanks-1:0] outBank_a11;
   wire [logDepth-1:0] outAddr_a11;
   wire [logDepth+logBanks-1:0] addr11, addr11b, addr11c;
   wire [logBanks-1:0] inBank12, outBank12;
   wire [logDepth-1:0] inAddr12, outAddr12;
   wire [logBanks-1:0] outBank_a12;
   wire [logDepth-1:0] outAddr_a12;
   wire [logDepth+logBanks-1:0] addr12, addr12b, addr12c;
   wire [logBanks-1:0] inBank13, outBank13;
   wire [logDepth-1:0] inAddr13, outAddr13;
   wire [logBanks-1:0] outBank_a13;
   wire [logDepth-1:0] outAddr_a13;
   wire [logDepth+logBanks-1:0] addr13, addr13b, addr13c;
   wire [logBanks-1:0] inBank14, outBank14;
   wire [logDepth-1:0] inAddr14, outAddr14;
   wire [logBanks-1:0] outBank_a14;
   wire [logDepth-1:0] outAddr_a14;
   wire [logDepth+logBanks-1:0] addr14, addr14b, addr14c;
   wire [logBanks-1:0] inBank15, outBank15;
   wire [logDepth-1:0] inAddr15, outAddr15;
   wire [logBanks-1:0] outBank_a15;
   wire [logDepth-1:0] outAddr_a15;
   wire [logDepth+logBanks-1:0] addr15, addr15b, addr15c;


   reg [logDepth-1:0]  inCount, outCount, outCount_d, outCount_dd, outCount_for_rd_addr, outCount_for_rd_data;  

   assign    addr0 = {inCount, 4'd0};
   assign    addr0b = {outCount, 4'd0};
   assign    addr0c = {outCount_for_rd_addr, 4'd0};
   assign    addr1 = {inCount, 4'd1};
   assign    addr1b = {outCount, 4'd1};
   assign    addr1c = {outCount_for_rd_addr, 4'd1};
   assign    addr2 = {inCount, 4'd2};
   assign    addr2b = {outCount, 4'd2};
   assign    addr2c = {outCount_for_rd_addr, 4'd2};
   assign    addr3 = {inCount, 4'd3};
   assign    addr3b = {outCount, 4'd3};
   assign    addr3c = {outCount_for_rd_addr, 4'd3};
   assign    addr4 = {inCount, 4'd4};
   assign    addr4b = {outCount, 4'd4};
   assign    addr4c = {outCount_for_rd_addr, 4'd4};
   assign    addr5 = {inCount, 4'd5};
   assign    addr5b = {outCount, 4'd5};
   assign    addr5c = {outCount_for_rd_addr, 4'd5};
   assign    addr6 = {inCount, 4'd6};
   assign    addr6b = {outCount, 4'd6};
   assign    addr6c = {outCount_for_rd_addr, 4'd6};
   assign    addr7 = {inCount, 4'd7};
   assign    addr7b = {outCount, 4'd7};
   assign    addr7c = {outCount_for_rd_addr, 4'd7};
   assign    addr8 = {inCount, 4'd8};
   assign    addr8b = {outCount, 4'd8};
   assign    addr8c = {outCount_for_rd_addr, 4'd8};
   assign    addr9 = {inCount, 4'd9};
   assign    addr9b = {outCount, 4'd9};
   assign    addr9c = {outCount_for_rd_addr, 4'd9};
   assign    addr10 = {inCount, 4'd10};
   assign    addr10b = {outCount, 4'd10};
   assign    addr10c = {outCount_for_rd_addr, 4'd10};
   assign    addr11 = {inCount, 4'd11};
   assign    addr11b = {outCount, 4'd11};
   assign    addr11c = {outCount_for_rd_addr, 4'd11};
   assign    addr12 = {inCount, 4'd12};
   assign    addr12b = {outCount, 4'd12};
   assign    addr12c = {outCount_for_rd_addr, 4'd12};
   assign    addr13 = {inCount, 4'd13};
   assign    addr13b = {outCount, 4'd13};
   assign    addr13c = {outCount_for_rd_addr, 4'd13};
   assign    addr14 = {inCount, 4'd14};
   assign    addr14b = {outCount, 4'd14};
   assign    addr14c = {outCount_for_rd_addr, 4'd14};
   assign    addr15 = {inCount, 4'd15};
   assign    addr15b = {outCount, 4'd15};
   assign    addr15c = {outCount_for_rd_addr, 4'd15};
    wire [width+logDepth-1:0] w_0_0, w_0_1, w_0_2, w_0_3, w_0_4, w_0_5, w_0_6, w_0_7, w_0_8, w_0_9, w_0_10, w_0_11, w_0_12, w_0_13, w_0_14, w_0_15, w_1_0, w_1_1, w_1_2, w_1_3, w_1_4, w_1_5, w_1_6, w_1_7, w_1_8, w_1_9, w_1_10, w_1_11, w_1_12, w_1_13, w_1_14, w_1_15, w_2_0, w_2_1, w_2_2, w_2_3, w_2_4, w_2_5, w_2_6, w_2_7, w_2_8, w_2_9, w_2_10, w_2_11, w_2_12, w_2_13, w_2_14, w_2_15, w_3_0, w_3_1, w_3_2, w_3_3, w_3_4, w_3_5, w_3_6, w_3_7, w_3_8, w_3_9, w_3_10, w_3_11, w_3_12, w_3_13, w_3_14, w_3_15;

    reg [width-1:0] z_0_0;
    reg [width-1:0] z_0_1;
    reg [width-1:0] z_0_2;
    reg [width-1:0] z_0_3;
    reg [width-1:0] z_0_4;
    reg [width-1:0] z_0_5;
    reg [width-1:0] z_0_6;
    reg [width-1:0] z_0_7;
    reg [width-1:0] z_0_8;
    reg [width-1:0] z_0_9;
    reg [width-1:0] z_0_10;
    reg [width-1:0] z_0_11;
    reg [width-1:0] z_0_12;
    reg [width-1:0] z_0_13;
    reg [width-1:0] z_0_14;
    reg [width-1:0] z_0_15;
    wire [width-1:0] z_1_0, z_1_1, z_1_2, z_1_3, z_1_4, z_1_5, z_1_6, z_1_7, z_1_8, z_1_9, z_1_10, z_1_11, z_1_12, z_1_13, z_1_14, z_1_15, z_2_0, z_2_1, z_2_2, z_2_3, z_2_4, z_2_5, z_2_6, z_2_7, z_2_8, z_2_9, z_2_10, z_2_11, z_2_12, z_2_13, z_2_14, z_2_15, z_3_0, z_3_1, z_3_2, z_3_3, z_3_4, z_3_5, z_3_6, z_3_7, z_3_8, z_3_9, z_3_10, z_3_11, z_3_12, z_3_13, z_3_14, z_3_15;

    wire [logDepth-1:0] u_0_0, u_0_1, u_0_2, u_0_3, u_0_4, u_0_5, u_0_6, u_0_7, u_0_8, u_0_9, u_0_10, u_0_11, u_0_12, u_0_13, u_0_14, u_0_15, u_1_0, u_1_1, u_1_2, u_1_3, u_1_4, u_1_5, u_1_6, u_1_7, u_1_8, u_1_9, u_1_10, u_1_11, u_1_12, u_1_13, u_1_14, u_1_15, u_2_0, u_2_1, u_2_2, u_2_3, u_2_4, u_2_5, u_2_6, u_2_7, u_2_8, u_2_9, u_2_10, u_2_11, u_2_12, u_2_13, u_2_14, u_2_15, u_3_0, u_3_1, u_3_2, u_3_3, u_3_4, u_3_5, u_3_6, u_3_7, u_3_8, u_3_9, u_3_10, u_3_11, u_3_12, u_3_13, u_3_14, u_3_15;

    reg inFlip1, outFlip1;
    reg inFlip2, outFlip2;
    always @(posedge clk) begin
        inFlip1 <= inFlip0;
        outFlip1 <= outFlip0;
        inFlip2 <= inFlip1;
        outFlip2 <= outFlip1;
    end

   assign inBank0[0] = addr0[3];
   assign inBank0[1] = addr0[4] ^ addr0[0];
   assign inBank0[2] = addr0[5] ^ addr0[1];
   assign inBank0[3] = addr0[6] ^ addr0[2];
   assign inAddr0[0] = addr0[7];
   assign inAddr0[1] = addr0[8];
   assign inAddr0[2] = addr0[0];
   assign inAddr0[3] = addr0[1];
   assign inAddr0[4] = addr0[2];
   assign outBank0[0] = addr0b[0];
   assign outBank0[1] = addr0b[6] ^ addr0b[1];
   assign outBank0[2] = addr0b[7] ^ addr0b[2];
   assign outBank0[3] = addr0b[8] ^ addr0b[3];
   assign outAddr0[0] = addr0b[4];
   assign outAddr0[1] = addr0b[5];
   assign outAddr0[2] = addr0b[6];
   assign outAddr0[3] = addr0b[7];
   assign outAddr0[4] = addr0b[8];
   assign outBank_a0[0] = addr0c[0];
   assign outBank_a0[1] = addr0c[6] ^ addr0c[1];
   assign outBank_a0[2] = addr0c[7] ^ addr0c[2];
   assign outBank_a0[3] = addr0c[8] ^ addr0c[3];
   assign outAddr_a0[0] = addr0c[4];
   assign outAddr_a0[1] = addr0c[5];
   assign outAddr_a0[2] = addr0c[6];
   assign outAddr_a0[3] = addr0c[7];
   assign outAddr_a0[4] = addr0c[8];

   assign inBank1[0] = addr1[3];
   assign inBank1[1] = addr1[4] ^ addr1[0];
   assign inBank1[2] = addr1[5] ^ addr1[1];
   assign inBank1[3] = addr1[6] ^ addr1[2];
   assign inAddr1[0] = addr1[7];
   assign inAddr1[1] = addr1[8];
   assign inAddr1[2] = addr1[0];
   assign inAddr1[3] = addr1[1];
   assign inAddr1[4] = addr1[2];
   assign outBank1[0] = addr1b[0];
   assign outBank1[1] = addr1b[6] ^ addr1b[1];
   assign outBank1[2] = addr1b[7] ^ addr1b[2];
   assign outBank1[3] = addr1b[8] ^ addr1b[3];
   assign outAddr1[0] = addr1b[4];
   assign outAddr1[1] = addr1b[5];
   assign outAddr1[2] = addr1b[6];
   assign outAddr1[3] = addr1b[7];
   assign outAddr1[4] = addr1b[8];
   assign outBank_a1[0] = addr1c[0];
   assign outBank_a1[1] = addr1c[6] ^ addr1c[1];
   assign outBank_a1[2] = addr1c[7] ^ addr1c[2];
   assign outBank_a1[3] = addr1c[8] ^ addr1c[3];
   assign outAddr_a1[0] = addr1c[4];
   assign outAddr_a1[1] = addr1c[5];
   assign outAddr_a1[2] = addr1c[6];
   assign outAddr_a1[3] = addr1c[7];
   assign outAddr_a1[4] = addr1c[8];

   assign inBank2[0] = addr2[3];
   assign inBank2[1] = addr2[4] ^ addr2[0];
   assign inBank2[2] = addr2[5] ^ addr2[1];
   assign inBank2[3] = addr2[6] ^ addr2[2];
   assign inAddr2[0] = addr2[7];
   assign inAddr2[1] = addr2[8];
   assign inAddr2[2] = addr2[0];
   assign inAddr2[3] = addr2[1];
   assign inAddr2[4] = addr2[2];
   assign outBank2[0] = addr2b[0];
   assign outBank2[1] = addr2b[6] ^ addr2b[1];
   assign outBank2[2] = addr2b[7] ^ addr2b[2];
   assign outBank2[3] = addr2b[8] ^ addr2b[3];
   assign outAddr2[0] = addr2b[4];
   assign outAddr2[1] = addr2b[5];
   assign outAddr2[2] = addr2b[6];
   assign outAddr2[3] = addr2b[7];
   assign outAddr2[4] = addr2b[8];
   assign outBank_a2[0] = addr2c[0];
   assign outBank_a2[1] = addr2c[6] ^ addr2c[1];
   assign outBank_a2[2] = addr2c[7] ^ addr2c[2];
   assign outBank_a2[3] = addr2c[8] ^ addr2c[3];
   assign outAddr_a2[0] = addr2c[4];
   assign outAddr_a2[1] = addr2c[5];
   assign outAddr_a2[2] = addr2c[6];
   assign outAddr_a2[3] = addr2c[7];
   assign outAddr_a2[4] = addr2c[8];

   assign inBank3[0] = addr3[3];
   assign inBank3[1] = addr3[4] ^ addr3[0];
   assign inBank3[2] = addr3[5] ^ addr3[1];
   assign inBank3[3] = addr3[6] ^ addr3[2];
   assign inAddr3[0] = addr3[7];
   assign inAddr3[1] = addr3[8];
   assign inAddr3[2] = addr3[0];
   assign inAddr3[3] = addr3[1];
   assign inAddr3[4] = addr3[2];
   assign outBank3[0] = addr3b[0];
   assign outBank3[1] = addr3b[6] ^ addr3b[1];
   assign outBank3[2] = addr3b[7] ^ addr3b[2];
   assign outBank3[3] = addr3b[8] ^ addr3b[3];
   assign outAddr3[0] = addr3b[4];
   assign outAddr3[1] = addr3b[5];
   assign outAddr3[2] = addr3b[6];
   assign outAddr3[3] = addr3b[7];
   assign outAddr3[4] = addr3b[8];
   assign outBank_a3[0] = addr3c[0];
   assign outBank_a3[1] = addr3c[6] ^ addr3c[1];
   assign outBank_a3[2] = addr3c[7] ^ addr3c[2];
   assign outBank_a3[3] = addr3c[8] ^ addr3c[3];
   assign outAddr_a3[0] = addr3c[4];
   assign outAddr_a3[1] = addr3c[5];
   assign outAddr_a3[2] = addr3c[6];
   assign outAddr_a3[3] = addr3c[7];
   assign outAddr_a3[4] = addr3c[8];

   assign inBank4[0] = addr4[3];
   assign inBank4[1] = addr4[4] ^ addr4[0];
   assign inBank4[2] = addr4[5] ^ addr4[1];
   assign inBank4[3] = addr4[6] ^ addr4[2];
   assign inAddr4[0] = addr4[7];
   assign inAddr4[1] = addr4[8];
   assign inAddr4[2] = addr4[0];
   assign inAddr4[3] = addr4[1];
   assign inAddr4[4] = addr4[2];
   assign outBank4[0] = addr4b[0];
   assign outBank4[1] = addr4b[6] ^ addr4b[1];
   assign outBank4[2] = addr4b[7] ^ addr4b[2];
   assign outBank4[3] = addr4b[8] ^ addr4b[3];
   assign outAddr4[0] = addr4b[4];
   assign outAddr4[1] = addr4b[5];
   assign outAddr4[2] = addr4b[6];
   assign outAddr4[3] = addr4b[7];
   assign outAddr4[4] = addr4b[8];
   assign outBank_a4[0] = addr4c[0];
   assign outBank_a4[1] = addr4c[6] ^ addr4c[1];
   assign outBank_a4[2] = addr4c[7] ^ addr4c[2];
   assign outBank_a4[3] = addr4c[8] ^ addr4c[3];
   assign outAddr_a4[0] = addr4c[4];
   assign outAddr_a4[1] = addr4c[5];
   assign outAddr_a4[2] = addr4c[6];
   assign outAddr_a4[3] = addr4c[7];
   assign outAddr_a4[4] = addr4c[8];

   assign inBank5[0] = addr5[3];
   assign inBank5[1] = addr5[4] ^ addr5[0];
   assign inBank5[2] = addr5[5] ^ addr5[1];
   assign inBank5[3] = addr5[6] ^ addr5[2];
   assign inAddr5[0] = addr5[7];
   assign inAddr5[1] = addr5[8];
   assign inAddr5[2] = addr5[0];
   assign inAddr5[3] = addr5[1];
   assign inAddr5[4] = addr5[2];
   assign outBank5[0] = addr5b[0];
   assign outBank5[1] = addr5b[6] ^ addr5b[1];
   assign outBank5[2] = addr5b[7] ^ addr5b[2];
   assign outBank5[3] = addr5b[8] ^ addr5b[3];
   assign outAddr5[0] = addr5b[4];
   assign outAddr5[1] = addr5b[5];
   assign outAddr5[2] = addr5b[6];
   assign outAddr5[3] = addr5b[7];
   assign outAddr5[4] = addr5b[8];
   assign outBank_a5[0] = addr5c[0];
   assign outBank_a5[1] = addr5c[6] ^ addr5c[1];
   assign outBank_a5[2] = addr5c[7] ^ addr5c[2];
   assign outBank_a5[3] = addr5c[8] ^ addr5c[3];
   assign outAddr_a5[0] = addr5c[4];
   assign outAddr_a5[1] = addr5c[5];
   assign outAddr_a5[2] = addr5c[6];
   assign outAddr_a5[3] = addr5c[7];
   assign outAddr_a5[4] = addr5c[8];

   assign inBank6[0] = addr6[3];
   assign inBank6[1] = addr6[4] ^ addr6[0];
   assign inBank6[2] = addr6[5] ^ addr6[1];
   assign inBank6[3] = addr6[6] ^ addr6[2];
   assign inAddr6[0] = addr6[7];
   assign inAddr6[1] = addr6[8];
   assign inAddr6[2] = addr6[0];
   assign inAddr6[3] = addr6[1];
   assign inAddr6[4] = addr6[2];
   assign outBank6[0] = addr6b[0];
   assign outBank6[1] = addr6b[6] ^ addr6b[1];
   assign outBank6[2] = addr6b[7] ^ addr6b[2];
   assign outBank6[3] = addr6b[8] ^ addr6b[3];
   assign outAddr6[0] = addr6b[4];
   assign outAddr6[1] = addr6b[5];
   assign outAddr6[2] = addr6b[6];
   assign outAddr6[3] = addr6b[7];
   assign outAddr6[4] = addr6b[8];
   assign outBank_a6[0] = addr6c[0];
   assign outBank_a6[1] = addr6c[6] ^ addr6c[1];
   assign outBank_a6[2] = addr6c[7] ^ addr6c[2];
   assign outBank_a6[3] = addr6c[8] ^ addr6c[3];
   assign outAddr_a6[0] = addr6c[4];
   assign outAddr_a6[1] = addr6c[5];
   assign outAddr_a6[2] = addr6c[6];
   assign outAddr_a6[3] = addr6c[7];
   assign outAddr_a6[4] = addr6c[8];

   assign inBank7[0] = addr7[3];
   assign inBank7[1] = addr7[4] ^ addr7[0];
   assign inBank7[2] = addr7[5] ^ addr7[1];
   assign inBank7[3] = addr7[6] ^ addr7[2];
   assign inAddr7[0] = addr7[7];
   assign inAddr7[1] = addr7[8];
   assign inAddr7[2] = addr7[0];
   assign inAddr7[3] = addr7[1];
   assign inAddr7[4] = addr7[2];
   assign outBank7[0] = addr7b[0];
   assign outBank7[1] = addr7b[6] ^ addr7b[1];
   assign outBank7[2] = addr7b[7] ^ addr7b[2];
   assign outBank7[3] = addr7b[8] ^ addr7b[3];
   assign outAddr7[0] = addr7b[4];
   assign outAddr7[1] = addr7b[5];
   assign outAddr7[2] = addr7b[6];
   assign outAddr7[3] = addr7b[7];
   assign outAddr7[4] = addr7b[8];
   assign outBank_a7[0] = addr7c[0];
   assign outBank_a7[1] = addr7c[6] ^ addr7c[1];
   assign outBank_a7[2] = addr7c[7] ^ addr7c[2];
   assign outBank_a7[3] = addr7c[8] ^ addr7c[3];
   assign outAddr_a7[0] = addr7c[4];
   assign outAddr_a7[1] = addr7c[5];
   assign outAddr_a7[2] = addr7c[6];
   assign outAddr_a7[3] = addr7c[7];
   assign outAddr_a7[4] = addr7c[8];

   assign inBank8[0] = addr8[3];
   assign inBank8[1] = addr8[4] ^ addr8[0];
   assign inBank8[2] = addr8[5] ^ addr8[1];
   assign inBank8[3] = addr8[6] ^ addr8[2];
   assign inAddr8[0] = addr8[7];
   assign inAddr8[1] = addr8[8];
   assign inAddr8[2] = addr8[0];
   assign inAddr8[3] = addr8[1];
   assign inAddr8[4] = addr8[2];
   assign outBank8[0] = addr8b[0];
   assign outBank8[1] = addr8b[6] ^ addr8b[1];
   assign outBank8[2] = addr8b[7] ^ addr8b[2];
   assign outBank8[3] = addr8b[8] ^ addr8b[3];
   assign outAddr8[0] = addr8b[4];
   assign outAddr8[1] = addr8b[5];
   assign outAddr8[2] = addr8b[6];
   assign outAddr8[3] = addr8b[7];
   assign outAddr8[4] = addr8b[8];
   assign outBank_a8[0] = addr8c[0];
   assign outBank_a8[1] = addr8c[6] ^ addr8c[1];
   assign outBank_a8[2] = addr8c[7] ^ addr8c[2];
   assign outBank_a8[3] = addr8c[8] ^ addr8c[3];
   assign outAddr_a8[0] = addr8c[4];
   assign outAddr_a8[1] = addr8c[5];
   assign outAddr_a8[2] = addr8c[6];
   assign outAddr_a8[3] = addr8c[7];
   assign outAddr_a8[4] = addr8c[8];

   assign inBank9[0] = addr9[3];
   assign inBank9[1] = addr9[4] ^ addr9[0];
   assign inBank9[2] = addr9[5] ^ addr9[1];
   assign inBank9[3] = addr9[6] ^ addr9[2];
   assign inAddr9[0] = addr9[7];
   assign inAddr9[1] = addr9[8];
   assign inAddr9[2] = addr9[0];
   assign inAddr9[3] = addr9[1];
   assign inAddr9[4] = addr9[2];
   assign outBank9[0] = addr9b[0];
   assign outBank9[1] = addr9b[6] ^ addr9b[1];
   assign outBank9[2] = addr9b[7] ^ addr9b[2];
   assign outBank9[3] = addr9b[8] ^ addr9b[3];
   assign outAddr9[0] = addr9b[4];
   assign outAddr9[1] = addr9b[5];
   assign outAddr9[2] = addr9b[6];
   assign outAddr9[3] = addr9b[7];
   assign outAddr9[4] = addr9b[8];
   assign outBank_a9[0] = addr9c[0];
   assign outBank_a9[1] = addr9c[6] ^ addr9c[1];
   assign outBank_a9[2] = addr9c[7] ^ addr9c[2];
   assign outBank_a9[3] = addr9c[8] ^ addr9c[3];
   assign outAddr_a9[0] = addr9c[4];
   assign outAddr_a9[1] = addr9c[5];
   assign outAddr_a9[2] = addr9c[6];
   assign outAddr_a9[3] = addr9c[7];
   assign outAddr_a9[4] = addr9c[8];

   assign inBank10[0] = addr10[3];
   assign inBank10[1] = addr10[4] ^ addr10[0];
   assign inBank10[2] = addr10[5] ^ addr10[1];
   assign inBank10[3] = addr10[6] ^ addr10[2];
   assign inAddr10[0] = addr10[7];
   assign inAddr10[1] = addr10[8];
   assign inAddr10[2] = addr10[0];
   assign inAddr10[3] = addr10[1];
   assign inAddr10[4] = addr10[2];
   assign outBank10[0] = addr10b[0];
   assign outBank10[1] = addr10b[6] ^ addr10b[1];
   assign outBank10[2] = addr10b[7] ^ addr10b[2];
   assign outBank10[3] = addr10b[8] ^ addr10b[3];
   assign outAddr10[0] = addr10b[4];
   assign outAddr10[1] = addr10b[5];
   assign outAddr10[2] = addr10b[6];
   assign outAddr10[3] = addr10b[7];
   assign outAddr10[4] = addr10b[8];
   assign outBank_a10[0] = addr10c[0];
   assign outBank_a10[1] = addr10c[6] ^ addr10c[1];
   assign outBank_a10[2] = addr10c[7] ^ addr10c[2];
   assign outBank_a10[3] = addr10c[8] ^ addr10c[3];
   assign outAddr_a10[0] = addr10c[4];
   assign outAddr_a10[1] = addr10c[5];
   assign outAddr_a10[2] = addr10c[6];
   assign outAddr_a10[3] = addr10c[7];
   assign outAddr_a10[4] = addr10c[8];

   assign inBank11[0] = addr11[3];
   assign inBank11[1] = addr11[4] ^ addr11[0];
   assign inBank11[2] = addr11[5] ^ addr11[1];
   assign inBank11[3] = addr11[6] ^ addr11[2];
   assign inAddr11[0] = addr11[7];
   assign inAddr11[1] = addr11[8];
   assign inAddr11[2] = addr11[0];
   assign inAddr11[3] = addr11[1];
   assign inAddr11[4] = addr11[2];
   assign outBank11[0] = addr11b[0];
   assign outBank11[1] = addr11b[6] ^ addr11b[1];
   assign outBank11[2] = addr11b[7] ^ addr11b[2];
   assign outBank11[3] = addr11b[8] ^ addr11b[3];
   assign outAddr11[0] = addr11b[4];
   assign outAddr11[1] = addr11b[5];
   assign outAddr11[2] = addr11b[6];
   assign outAddr11[3] = addr11b[7];
   assign outAddr11[4] = addr11b[8];
   assign outBank_a11[0] = addr11c[0];
   assign outBank_a11[1] = addr11c[6] ^ addr11c[1];
   assign outBank_a11[2] = addr11c[7] ^ addr11c[2];
   assign outBank_a11[3] = addr11c[8] ^ addr11c[3];
   assign outAddr_a11[0] = addr11c[4];
   assign outAddr_a11[1] = addr11c[5];
   assign outAddr_a11[2] = addr11c[6];
   assign outAddr_a11[3] = addr11c[7];
   assign outAddr_a11[4] = addr11c[8];

   assign inBank12[0] = addr12[3];
   assign inBank12[1] = addr12[4] ^ addr12[0];
   assign inBank12[2] = addr12[5] ^ addr12[1];
   assign inBank12[3] = addr12[6] ^ addr12[2];
   assign inAddr12[0] = addr12[7];
   assign inAddr12[1] = addr12[8];
   assign inAddr12[2] = addr12[0];
   assign inAddr12[3] = addr12[1];
   assign inAddr12[4] = addr12[2];
   assign outBank12[0] = addr12b[0];
   assign outBank12[1] = addr12b[6] ^ addr12b[1];
   assign outBank12[2] = addr12b[7] ^ addr12b[2];
   assign outBank12[3] = addr12b[8] ^ addr12b[3];
   assign outAddr12[0] = addr12b[4];
   assign outAddr12[1] = addr12b[5];
   assign outAddr12[2] = addr12b[6];
   assign outAddr12[3] = addr12b[7];
   assign outAddr12[4] = addr12b[8];
   assign outBank_a12[0] = addr12c[0];
   assign outBank_a12[1] = addr12c[6] ^ addr12c[1];
   assign outBank_a12[2] = addr12c[7] ^ addr12c[2];
   assign outBank_a12[3] = addr12c[8] ^ addr12c[3];
   assign outAddr_a12[0] = addr12c[4];
   assign outAddr_a12[1] = addr12c[5];
   assign outAddr_a12[2] = addr12c[6];
   assign outAddr_a12[3] = addr12c[7];
   assign outAddr_a12[4] = addr12c[8];

   assign inBank13[0] = addr13[3];
   assign inBank13[1] = addr13[4] ^ addr13[0];
   assign inBank13[2] = addr13[5] ^ addr13[1];
   assign inBank13[3] = addr13[6] ^ addr13[2];
   assign inAddr13[0] = addr13[7];
   assign inAddr13[1] = addr13[8];
   assign inAddr13[2] = addr13[0];
   assign inAddr13[3] = addr13[1];
   assign inAddr13[4] = addr13[2];
   assign outBank13[0] = addr13b[0];
   assign outBank13[1] = addr13b[6] ^ addr13b[1];
   assign outBank13[2] = addr13b[7] ^ addr13b[2];
   assign outBank13[3] = addr13b[8] ^ addr13b[3];
   assign outAddr13[0] = addr13b[4];
   assign outAddr13[1] = addr13b[5];
   assign outAddr13[2] = addr13b[6];
   assign outAddr13[3] = addr13b[7];
   assign outAddr13[4] = addr13b[8];
   assign outBank_a13[0] = addr13c[0];
   assign outBank_a13[1] = addr13c[6] ^ addr13c[1];
   assign outBank_a13[2] = addr13c[7] ^ addr13c[2];
   assign outBank_a13[3] = addr13c[8] ^ addr13c[3];
   assign outAddr_a13[0] = addr13c[4];
   assign outAddr_a13[1] = addr13c[5];
   assign outAddr_a13[2] = addr13c[6];
   assign outAddr_a13[3] = addr13c[7];
   assign outAddr_a13[4] = addr13c[8];

   assign inBank14[0] = addr14[3];
   assign inBank14[1] = addr14[4] ^ addr14[0];
   assign inBank14[2] = addr14[5] ^ addr14[1];
   assign inBank14[3] = addr14[6] ^ addr14[2];
   assign inAddr14[0] = addr14[7];
   assign inAddr14[1] = addr14[8];
   assign inAddr14[2] = addr14[0];
   assign inAddr14[3] = addr14[1];
   assign inAddr14[4] = addr14[2];
   assign outBank14[0] = addr14b[0];
   assign outBank14[1] = addr14b[6] ^ addr14b[1];
   assign outBank14[2] = addr14b[7] ^ addr14b[2];
   assign outBank14[3] = addr14b[8] ^ addr14b[3];
   assign outAddr14[0] = addr14b[4];
   assign outAddr14[1] = addr14b[5];
   assign outAddr14[2] = addr14b[6];
   assign outAddr14[3] = addr14b[7];
   assign outAddr14[4] = addr14b[8];
   assign outBank_a14[0] = addr14c[0];
   assign outBank_a14[1] = addr14c[6] ^ addr14c[1];
   assign outBank_a14[2] = addr14c[7] ^ addr14c[2];
   assign outBank_a14[3] = addr14c[8] ^ addr14c[3];
   assign outAddr_a14[0] = addr14c[4];
   assign outAddr_a14[1] = addr14c[5];
   assign outAddr_a14[2] = addr14c[6];
   assign outAddr_a14[3] = addr14c[7];
   assign outAddr_a14[4] = addr14c[8];

   assign inBank15[0] = addr15[3];
   assign inBank15[1] = addr15[4] ^ addr15[0];
   assign inBank15[2] = addr15[5] ^ addr15[1];
   assign inBank15[3] = addr15[6] ^ addr15[2];
   assign inAddr15[0] = addr15[7];
   assign inAddr15[1] = addr15[8];
   assign inAddr15[2] = addr15[0];
   assign inAddr15[3] = addr15[1];
   assign inAddr15[4] = addr15[2];
   assign outBank15[0] = addr15b[0];
   assign outBank15[1] = addr15b[6] ^ addr15b[1];
   assign outBank15[2] = addr15b[7] ^ addr15b[2];
   assign outBank15[3] = addr15b[8] ^ addr15b[3];
   assign outAddr15[0] = addr15b[4];
   assign outAddr15[1] = addr15b[5];
   assign outAddr15[2] = addr15b[6];
   assign outAddr15[3] = addr15b[7];
   assign outAddr15[4] = addr15b[8];
   assign outBank_a15[0] = addr15c[0];
   assign outBank_a15[1] = addr15c[6] ^ addr15c[1];
   assign outBank_a15[2] = addr15c[7] ^ addr15c[2];
   assign outBank_a15[3] = addr15c[8] ^ addr15c[3];
   assign outAddr_a15[0] = addr15c[4];
   assign outAddr_a15[1] = addr15c[5];
   assign outAddr_a15[2] = addr15c[6];
   assign outAddr_a15[3] = addr15c[7];
   assign outAddr_a15[4] = addr15c[8];

   nextReg #(29, 5) nextReg_87728(.X(next), .Y(next0), .reset(reset), .clk(clk));


   shiftRegFIFO #(6, 1) shiftFIFO_87731(.X(next0), .Y(next_out), .clk(clk));


   memArray512_84530 #(numBanks, logBanks, depth, logDepth, width)
     memSys(.inFlip(inFlip2), .outFlip(outFlip2), .next(next), .reset(reset),
        .x0(w_3_0[width+logDepth-1:logDepth]), .y0(ybuff0),
        .inAddr0(w_3_0[logDepth-1:0]),
        .outAddr0(u_3_0), 
        .x1(w_3_1[width+logDepth-1:logDepth]), .y1(ybuff1),
        .inAddr1(w_3_1[logDepth-1:0]),
        .outAddr1(u_3_1), 
        .x2(w_3_2[width+logDepth-1:logDepth]), .y2(ybuff2),
        .inAddr2(w_3_2[logDepth-1:0]),
        .outAddr2(u_3_2), 
        .x3(w_3_3[width+logDepth-1:logDepth]), .y3(ybuff3),
        .inAddr3(w_3_3[logDepth-1:0]),
        .outAddr3(u_3_3), 
        .x4(w_3_4[width+logDepth-1:logDepth]), .y4(ybuff4),
        .inAddr4(w_3_4[logDepth-1:0]),
        .outAddr4(u_3_4), 
        .x5(w_3_5[width+logDepth-1:logDepth]), .y5(ybuff5),
        .inAddr5(w_3_5[logDepth-1:0]),
        .outAddr5(u_3_5), 
        .x6(w_3_6[width+logDepth-1:logDepth]), .y6(ybuff6),
        .inAddr6(w_3_6[logDepth-1:0]),
        .outAddr6(u_3_6), 
        .x7(w_3_7[width+logDepth-1:logDepth]), .y7(ybuff7),
        .inAddr7(w_3_7[logDepth-1:0]),
        .outAddr7(u_3_7), 
        .x8(w_3_8[width+logDepth-1:logDepth]), .y8(ybuff8),
        .inAddr8(w_3_8[logDepth-1:0]),
        .outAddr8(u_3_8), 
        .x9(w_3_9[width+logDepth-1:logDepth]), .y9(ybuff9),
        .inAddr9(w_3_9[logDepth-1:0]),
        .outAddr9(u_3_9), 
        .x10(w_3_10[width+logDepth-1:logDepth]), .y10(ybuff10),
        .inAddr10(w_3_10[logDepth-1:0]),
        .outAddr10(u_3_10), 
        .x11(w_3_11[width+logDepth-1:logDepth]), .y11(ybuff11),
        .inAddr11(w_3_11[logDepth-1:0]),
        .outAddr11(u_3_11), 
        .x12(w_3_12[width+logDepth-1:logDepth]), .y12(ybuff12),
        .inAddr12(w_3_12[logDepth-1:0]),
        .outAddr12(u_3_12), 
        .x13(w_3_13[width+logDepth-1:logDepth]), .y13(ybuff13),
        .inAddr13(w_3_13[logDepth-1:0]),
        .outAddr13(u_3_13), 
        .x14(w_3_14[width+logDepth-1:logDepth]), .y14(ybuff14),
        .inAddr14(w_3_14[logDepth-1:0]),
        .outAddr14(u_3_14), 
        .x15(w_3_15[width+logDepth-1:logDepth]), .y15(ybuff15),
        .inAddr15(w_3_15[logDepth-1:0]),
        .outAddr15(u_3_15), 
        .clk(clk));

    reg resetOutCountRd2_32;

    always @(posedge clk) begin
        if (reset == 1) begin
            resetOutCountRd2_32 <= 0;
        end
        else begin
            resetOutCountRd2_32 <= (inCount == 31) ? 1'b1 : 1'b0;
            if (resetOutCountRd2_32 == 1'b1)
                outCount_for_rd_data <= 0;
            else
                outCount_for_rd_data <= outCount_for_rd_data+1;
        end
    end
   always @(posedge clk) begin
      if (reset == 1) begin
      z_0_0 <= 0;
      z_0_1 <= 0;
      z_0_2 <= 0;
      z_0_3 <= 0;
      z_0_4 <= 0;
      z_0_5 <= 0;
      z_0_6 <= 0;
      z_0_7 <= 0;
      z_0_8 <= 0;
      z_0_9 <= 0;
      z_0_10 <= 0;
      z_0_11 <= 0;
      z_0_12 <= 0;
      z_0_13 <= 0;
      z_0_14 <= 0;
      z_0_15 <= 0;
         inFlip0 <= 0; outFlip0 <= 1; outCount <= 0; inCount <= 0;
        outCount_for_rd_addr <= 0;
      end
      else begin
          outCount_d <= outCount;
          outCount_dd <= outCount_d;
         if (inCount == 28)
            outCount_for_rd_addr <= 0;
         else
            outCount_for_rd_addr <= outCount_for_rd_addr+1;
      z_0_0 <= ybuff0;
      z_0_1 <= ybuff1;
      z_0_2 <= ybuff2;
      z_0_3 <= ybuff3;
      z_0_4 <= ybuff4;
      z_0_5 <= ybuff5;
      z_0_6 <= ybuff6;
      z_0_7 <= ybuff7;
      z_0_8 <= ybuff8;
      z_0_9 <= ybuff9;
      z_0_10 <= ybuff10;
      z_0_11 <= ybuff11;
      z_0_12 <= ybuff12;
      z_0_13 <= ybuff13;
      z_0_14 <= ybuff14;
      z_0_15 <= ybuff15;
         if (inCount == 28) begin
            outFlip0 <= ~outFlip0;
            outCount <= 0;
         end
         else
            outCount <= outCount+1;
         if (inCount == 31) begin
            inFlip0 <= ~inFlip0;
         end
         if (next == 1) begin
            if (inCount >= 28)
               inFlip0 <= ~inFlip0;
            inCount <= 0;
         end
         else
            inCount <= inCount + 1;
      end
   end
    assign w_0_0 = {x0, inAddr0};
    assign w_0_2 = {x1, inAddr1};
    assign w_0_4 = {x2, inAddr2};
    assign w_0_6 = {x3, inAddr3};
    assign w_0_8 = {x4, inAddr4};
    assign w_0_10 = {x5, inAddr5};
    assign w_0_12 = {x6, inAddr6};
    assign w_0_14 = {x7, inAddr7};
    assign w_0_1 = {x8, inAddr8};
    assign w_0_3 = {x9, inAddr9};
    assign w_0_5 = {x10, inAddr10};
    assign w_0_7 = {x11, inAddr11};
    assign w_0_9 = {x12, inAddr12};
    assign w_0_11 = {x13, inAddr13};
    assign w_0_13 = {x14, inAddr14};
    assign w_0_15 = {x15, inAddr15};
    assign y0 = z_3_0;
    assign y1 = z_3_1;
    assign y2 = z_3_2;
    assign y3 = z_3_3;
    assign y4 = z_3_4;
    assign y5 = z_3_5;
    assign y6 = z_3_6;
    assign y7 = z_3_7;
    assign y8 = z_3_8;
    assign y9 = z_3_9;
    assign y10 = z_3_10;
    assign y11 = z_3_11;
    assign y12 = z_3_12;
    assign y13 = z_3_13;
    assign y14 = z_3_14;
    assign y15 = z_3_15;
    assign u_0_0 = outAddr_a0;
    assign u_0_1 = outAddr_a1;
    assign u_0_2 = outAddr_a2;
    assign u_0_3 = outAddr_a3;
    assign u_0_4 = outAddr_a4;
    assign u_0_5 = outAddr_a5;
    assign u_0_6 = outAddr_a6;
    assign u_0_7 = outAddr_a7;
    assign u_0_8 = outAddr_a8;
    assign u_0_9 = outAddr_a9;
    assign u_0_10 = outAddr_a10;
    assign u_0_11 = outAddr_a11;
    assign u_0_12 = outAddr_a12;
    assign u_0_13 = outAddr_a13;
    assign u_0_14 = outAddr_a14;
    assign u_0_15 = outAddr_a15;
    wire wr_ctrl_st_0;
    assign wr_ctrl_st_0 = inCount[2];

    switch #(logDepth+width) in_sw_0_0(.x0(w_0_0), .x1(w_0_8), .y0(w_1_0), .y1(w_1_8), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_1(.x0(w_0_1), .x1(w_0_9), .y0(w_1_1), .y1(w_1_9), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_2(.x0(w_0_2), .x1(w_0_10), .y0(w_1_2), .y1(w_1_10), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_3(.x0(w_0_3), .x1(w_0_11), .y0(w_1_3), .y1(w_1_11), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_4(.x0(w_0_4), .x1(w_0_12), .y0(w_1_4), .y1(w_1_12), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_5(.x0(w_0_5), .x1(w_0_13), .y0(w_1_5), .y1(w_1_13), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_6(.x0(w_0_6), .x1(w_0_14), .y0(w_1_6), .y1(w_1_14), .ctrl(wr_ctrl_st_0));
    switch #(logDepth+width) in_sw_0_7(.x0(w_0_7), .x1(w_0_15), .y0(w_1_7), .y1(w_1_15), .ctrl(wr_ctrl_st_0));
    reg [width+logDepth-1:0] w_1_0_pipe;
    reg [width+logDepth-1:0] w_1_1_pipe;
    reg [width+logDepth-1:0] w_1_2_pipe;
    reg [width+logDepth-1:0] w_1_3_pipe;
    reg [width+logDepth-1:0] w_1_4_pipe;
    reg [width+logDepth-1:0] w_1_5_pipe;
    reg [width+logDepth-1:0] w_1_6_pipe;
    reg [width+logDepth-1:0] w_1_7_pipe;
    reg [width+logDepth-1:0] w_1_8_pipe;
    reg [width+logDepth-1:0] w_1_9_pipe;
    reg [width+logDepth-1:0] w_1_10_pipe;
    reg [width+logDepth-1:0] w_1_11_pipe;
    reg [width+logDepth-1:0] w_1_12_pipe;
    reg [width+logDepth-1:0] w_1_13_pipe;
    reg [width+logDepth-1:0] w_1_14_pipe;
    reg [width+logDepth-1:0] w_1_15_pipe;

    always @(posedge clk) begin
        w_1_0_pipe <= w_1_0;
        w_1_1_pipe <= w_1_1;
        w_1_2_pipe <= w_1_2;
        w_1_3_pipe <= w_1_3;
        w_1_4_pipe <= w_1_4;
        w_1_5_pipe <= w_1_5;
        w_1_6_pipe <= w_1_6;
        w_1_7_pipe <= w_1_7;
        w_1_8_pipe <= w_1_8;
        w_1_9_pipe <= w_1_9;
        w_1_10_pipe <= w_1_10;
        w_1_11_pipe <= w_1_11;
        w_1_12_pipe <= w_1_12;
        w_1_13_pipe <= w_1_13;
        w_1_14_pipe <= w_1_14;
        w_1_15_pipe <= w_1_15;
    end

    wire wr_ctrl_st_1;
    reg wr_ctrl_st_1_1;
    always @(posedge clk) begin
        wr_ctrl_st_1_1 <= inCount[1];
    end
    assign wr_ctrl_st_1 = wr_ctrl_st_1_1;

    switch #(logDepth+width) in_sw_1_0(.x0(w_1_0_pipe), .x1(w_1_4_pipe), .y0(w_2_0), .y1(w_2_4), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_1(.x0(w_1_1_pipe), .x1(w_1_5_pipe), .y0(w_2_1), .y1(w_2_5), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_2(.x0(w_1_2_pipe), .x1(w_1_6_pipe), .y0(w_2_2), .y1(w_2_6), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_3(.x0(w_1_3_pipe), .x1(w_1_7_pipe), .y0(w_2_3), .y1(w_2_7), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_4(.x0(w_1_8_pipe), .x1(w_1_12_pipe), .y0(w_2_8), .y1(w_2_12), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_5(.x0(w_1_9_pipe), .x1(w_1_13_pipe), .y0(w_2_9), .y1(w_2_13), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_6(.x0(w_1_10_pipe), .x1(w_1_14_pipe), .y0(w_2_10), .y1(w_2_14), .ctrl(wr_ctrl_st_1));
    switch #(logDepth+width) in_sw_1_7(.x0(w_1_11_pipe), .x1(w_1_15_pipe), .y0(w_2_11), .y1(w_2_15), .ctrl(wr_ctrl_st_1));
    reg [width+logDepth-1:0] w_2_0_pipe;
    reg [width+logDepth-1:0] w_2_1_pipe;
    reg [width+logDepth-1:0] w_2_2_pipe;
    reg [width+logDepth-1:0] w_2_3_pipe;
    reg [width+logDepth-1:0] w_2_4_pipe;
    reg [width+logDepth-1:0] w_2_5_pipe;
    reg [width+logDepth-1:0] w_2_6_pipe;
    reg [width+logDepth-1:0] w_2_7_pipe;
    reg [width+logDepth-1:0] w_2_8_pipe;
    reg [width+logDepth-1:0] w_2_9_pipe;
    reg [width+logDepth-1:0] w_2_10_pipe;
    reg [width+logDepth-1:0] w_2_11_pipe;
    reg [width+logDepth-1:0] w_2_12_pipe;
    reg [width+logDepth-1:0] w_2_13_pipe;
    reg [width+logDepth-1:0] w_2_14_pipe;
    reg [width+logDepth-1:0] w_2_15_pipe;

    always @(posedge clk) begin
        w_2_0_pipe <= w_2_0;
        w_2_1_pipe <= w_2_1;
        w_2_2_pipe <= w_2_2;
        w_2_3_pipe <= w_2_3;
        w_2_4_pipe <= w_2_4;
        w_2_5_pipe <= w_2_5;
        w_2_6_pipe <= w_2_6;
        w_2_7_pipe <= w_2_7;
        w_2_8_pipe <= w_2_8;
        w_2_9_pipe <= w_2_9;
        w_2_10_pipe <= w_2_10;
        w_2_11_pipe <= w_2_11;
        w_2_12_pipe <= w_2_12;
        w_2_13_pipe <= w_2_13;
        w_2_14_pipe <= w_2_14;
        w_2_15_pipe <= w_2_15;
    end

    wire wr_ctrl_st_2;
    reg wr_ctrl_st_2_1;
    reg wr_ctrl_st_2_2;
    always @(posedge clk) begin
        wr_ctrl_st_2_1 <= inCount[0];
        wr_ctrl_st_2_2 <= wr_ctrl_st_2_1;
    end
    assign wr_ctrl_st_2 = wr_ctrl_st_2_2;

    switch #(logDepth+width) in_sw_2_0(.x0(w_2_0_pipe), .x1(w_2_2_pipe), .y0(w_3_0), .y1(w_3_2), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_1(.x0(w_2_1_pipe), .x1(w_2_3_pipe), .y0(w_3_1), .y1(w_3_3), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_2(.x0(w_2_4_pipe), .x1(w_2_6_pipe), .y0(w_3_4), .y1(w_3_6), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_3(.x0(w_2_5_pipe), .x1(w_2_7_pipe), .y0(w_3_5), .y1(w_3_7), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_4(.x0(w_2_8_pipe), .x1(w_2_10_pipe), .y0(w_3_8), .y1(w_3_10), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_5(.x0(w_2_9_pipe), .x1(w_2_11_pipe), .y0(w_3_9), .y1(w_3_11), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_6(.x0(w_2_12_pipe), .x1(w_2_14_pipe), .y0(w_3_12), .y1(w_3_14), .ctrl(wr_ctrl_st_2));
    switch #(logDepth+width) in_sw_2_7(.x0(w_2_13_pipe), .x1(w_2_15_pipe), .y0(w_3_13), .y1(w_3_15), .ctrl(wr_ctrl_st_2));
    wire rdd_ctrl_st_0;
    assign rdd_ctrl_st_0 = outCount_for_rd_data[4];

    switch #(width) out_sw_0_0(.x0(z_0_0), .x1(z_0_8), .y0(z_1_0), .y1(z_1_8), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_1(.x0(z_0_1), .x1(z_0_9), .y0(z_1_1), .y1(z_1_9), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_2(.x0(z_0_2), .x1(z_0_10), .y0(z_1_2), .y1(z_1_10), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_3(.x0(z_0_3), .x1(z_0_11), .y0(z_1_3), .y1(z_1_11), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_4(.x0(z_0_4), .x1(z_0_12), .y0(z_1_4), .y1(z_1_12), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_5(.x0(z_0_5), .x1(z_0_13), .y0(z_1_5), .y1(z_1_13), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_6(.x0(z_0_6), .x1(z_0_14), .y0(z_1_6), .y1(z_1_14), .ctrl(rdd_ctrl_st_0));
    switch #(width) out_sw_0_7(.x0(z_0_7), .x1(z_0_15), .y0(z_1_7), .y1(z_1_15), .ctrl(rdd_ctrl_st_0));
    reg [width-1:0] z_1_0_pipe;
    reg [width-1:0] z_1_1_pipe;
    reg [width-1:0] z_1_2_pipe;
    reg [width-1:0] z_1_3_pipe;
    reg [width-1:0] z_1_4_pipe;
    reg [width-1:0] z_1_5_pipe;
    reg [width-1:0] z_1_6_pipe;
    reg [width-1:0] z_1_7_pipe;
    reg [width-1:0] z_1_8_pipe;
    reg [width-1:0] z_1_9_pipe;
    reg [width-1:0] z_1_10_pipe;
    reg [width-1:0] z_1_11_pipe;
    reg [width-1:0] z_1_12_pipe;
    reg [width-1:0] z_1_13_pipe;
    reg [width-1:0] z_1_14_pipe;
    reg [width-1:0] z_1_15_pipe;

    always @(posedge clk) begin
        z_1_0_pipe <= z_1_0;
        z_1_1_pipe <= z_1_1;
        z_1_2_pipe <= z_1_2;
        z_1_3_pipe <= z_1_3;
        z_1_4_pipe <= z_1_4;
        z_1_5_pipe <= z_1_5;
        z_1_6_pipe <= z_1_6;
        z_1_7_pipe <= z_1_7;
        z_1_8_pipe <= z_1_8;
        z_1_9_pipe <= z_1_9;
        z_1_10_pipe <= z_1_10;
        z_1_11_pipe <= z_1_11;
        z_1_12_pipe <= z_1_12;
        z_1_13_pipe <= z_1_13;
        z_1_14_pipe <= z_1_14;
        z_1_15_pipe <= z_1_15;
    end

    wire rdd_ctrl_st_1;
    reg rdd_ctrl_st_1_1;
    always @(posedge clk) begin
        rdd_ctrl_st_1_1 <= outCount_for_rd_data[3];

    end
    assign rdd_ctrl_st_1 = rdd_ctrl_st_1_1;

    switch #(width) out_sw_1_0(.x0(z_1_0_pipe), .x1(z_1_4_pipe), .y0(z_2_0), .y1(z_2_4), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_1(.x0(z_1_1_pipe), .x1(z_1_5_pipe), .y0(z_2_1), .y1(z_2_5), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_2(.x0(z_1_2_pipe), .x1(z_1_6_pipe), .y0(z_2_2), .y1(z_2_6), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_3(.x0(z_1_3_pipe), .x1(z_1_7_pipe), .y0(z_2_3), .y1(z_2_7), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_4(.x0(z_1_8_pipe), .x1(z_1_12_pipe), .y0(z_2_8), .y1(z_2_12), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_5(.x0(z_1_9_pipe), .x1(z_1_13_pipe), .y0(z_2_9), .y1(z_2_13), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_6(.x0(z_1_10_pipe), .x1(z_1_14_pipe), .y0(z_2_10), .y1(z_2_14), .ctrl(rdd_ctrl_st_1));
    switch #(width) out_sw_1_7(.x0(z_1_11_pipe), .x1(z_1_15_pipe), .y0(z_2_11), .y1(z_2_15), .ctrl(rdd_ctrl_st_1));
    reg [width-1:0] z_2_0_pipe;
    reg [width-1:0] z_2_1_pipe;
    reg [width-1:0] z_2_2_pipe;
    reg [width-1:0] z_2_3_pipe;
    reg [width-1:0] z_2_4_pipe;
    reg [width-1:0] z_2_5_pipe;
    reg [width-1:0] z_2_6_pipe;
    reg [width-1:0] z_2_7_pipe;
    reg [width-1:0] z_2_8_pipe;
    reg [width-1:0] z_2_9_pipe;
    reg [width-1:0] z_2_10_pipe;
    reg [width-1:0] z_2_11_pipe;
    reg [width-1:0] z_2_12_pipe;
    reg [width-1:0] z_2_13_pipe;
    reg [width-1:0] z_2_14_pipe;
    reg [width-1:0] z_2_15_pipe;

    always @(posedge clk) begin
        z_2_0_pipe <= z_2_0;
        z_2_1_pipe <= z_2_1;
        z_2_2_pipe <= z_2_2;
        z_2_3_pipe <= z_2_3;
        z_2_4_pipe <= z_2_4;
        z_2_5_pipe <= z_2_5;
        z_2_6_pipe <= z_2_6;
        z_2_7_pipe <= z_2_7;
        z_2_8_pipe <= z_2_8;
        z_2_9_pipe <= z_2_9;
        z_2_10_pipe <= z_2_10;
        z_2_11_pipe <= z_2_11;
        z_2_12_pipe <= z_2_12;
        z_2_13_pipe <= z_2_13;
        z_2_14_pipe <= z_2_14;
        z_2_15_pipe <= z_2_15;
    end

    wire rdd_ctrl_st_2;
    reg rdd_ctrl_st_2_1;
    reg rdd_ctrl_st_2_2;
    always @(posedge clk) begin
        rdd_ctrl_st_2_1 <= outCount_for_rd_data[2];

        rdd_ctrl_st_2_2 <= rdd_ctrl_st_2_1;
    end
    assign rdd_ctrl_st_2 = rdd_ctrl_st_2_2;

    switch #(width) out_sw_2_0(.x0(z_2_0_pipe), .x1(z_2_2_pipe), .y0(z_3_0), .y1(z_3_2), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_1(.x0(z_2_1_pipe), .x1(z_2_3_pipe), .y0(z_3_1), .y1(z_3_3), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_2(.x0(z_2_4_pipe), .x1(z_2_6_pipe), .y0(z_3_4), .y1(z_3_6), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_3(.x0(z_2_5_pipe), .x1(z_2_7_pipe), .y0(z_3_5), .y1(z_3_7), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_4(.x0(z_2_8_pipe), .x1(z_2_10_pipe), .y0(z_3_8), .y1(z_3_10), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_5(.x0(z_2_9_pipe), .x1(z_2_11_pipe), .y0(z_3_9), .y1(z_3_11), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_6(.x0(z_2_12_pipe), .x1(z_2_14_pipe), .y0(z_3_12), .y1(z_3_14), .ctrl(rdd_ctrl_st_2));
    switch #(width) out_sw_2_7(.x0(z_2_13_pipe), .x1(z_2_15_pipe), .y0(z_3_13), .y1(z_3_15), .ctrl(rdd_ctrl_st_2));
    wire rda_ctrl_st_0;
    assign rda_ctrl_st_0 = outCount_for_rd_addr[4];

    switch #(logDepth) rdaddr_sw_0_0(.x0(u_0_0), .x1(u_0_8), .y0(u_1_0), .y1(u_1_8), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_1(.x0(u_0_1), .x1(u_0_9), .y0(u_1_1), .y1(u_1_9), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_2(.x0(u_0_2), .x1(u_0_10), .y0(u_1_2), .y1(u_1_10), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_3(.x0(u_0_3), .x1(u_0_11), .y0(u_1_3), .y1(u_1_11), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_4(.x0(u_0_4), .x1(u_0_12), .y0(u_1_4), .y1(u_1_12), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_5(.x0(u_0_5), .x1(u_0_13), .y0(u_1_5), .y1(u_1_13), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_6(.x0(u_0_6), .x1(u_0_14), .y0(u_1_6), .y1(u_1_14), .ctrl(rda_ctrl_st_0));
    switch #(logDepth) rdaddr_sw_0_7(.x0(u_0_7), .x1(u_0_15), .y0(u_1_7), .y1(u_1_15), .ctrl(rda_ctrl_st_0));
    reg [logDepth-1:0] u_1_0_pipe;
    reg [logDepth-1:0] u_1_1_pipe;
    reg [logDepth-1:0] u_1_2_pipe;
    reg [logDepth-1:0] u_1_3_pipe;
    reg [logDepth-1:0] u_1_4_pipe;
    reg [logDepth-1:0] u_1_5_pipe;
    reg [logDepth-1:0] u_1_6_pipe;
    reg [logDepth-1:0] u_1_7_pipe;
    reg [logDepth-1:0] u_1_8_pipe;
    reg [logDepth-1:0] u_1_9_pipe;
    reg [logDepth-1:0] u_1_10_pipe;
    reg [logDepth-1:0] u_1_11_pipe;
    reg [logDepth-1:0] u_1_12_pipe;
    reg [logDepth-1:0] u_1_13_pipe;
    reg [logDepth-1:0] u_1_14_pipe;
    reg [logDepth-1:0] u_1_15_pipe;

    always @(posedge clk) begin
        u_1_0_pipe <= u_1_0;
        u_1_1_pipe <= u_1_1;
        u_1_2_pipe <= u_1_2;
        u_1_3_pipe <= u_1_3;
        u_1_4_pipe <= u_1_4;
        u_1_5_pipe <= u_1_5;
        u_1_6_pipe <= u_1_6;
        u_1_7_pipe <= u_1_7;
        u_1_8_pipe <= u_1_8;
        u_1_9_pipe <= u_1_9;
        u_1_10_pipe <= u_1_10;
        u_1_11_pipe <= u_1_11;
        u_1_12_pipe <= u_1_12;
        u_1_13_pipe <= u_1_13;
        u_1_14_pipe <= u_1_14;
        u_1_15_pipe <= u_1_15;
    end

    wire rda_ctrl_st_1;
    reg rda_ctrl_st_1_1;
    always @(posedge clk) begin
        rda_ctrl_st_1_1 <= outCount_for_rd_addr[3];

    end
    assign rda_ctrl_st_1 = rda_ctrl_st_1_1;

    switch #(logDepth) rdaddr_sw_1_0(.x0(u_1_0_pipe), .x1(u_1_4_pipe), .y0(u_2_0), .y1(u_2_4), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_1(.x0(u_1_1_pipe), .x1(u_1_5_pipe), .y0(u_2_1), .y1(u_2_5), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_2(.x0(u_1_2_pipe), .x1(u_1_6_pipe), .y0(u_2_2), .y1(u_2_6), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_3(.x0(u_1_3_pipe), .x1(u_1_7_pipe), .y0(u_2_3), .y1(u_2_7), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_4(.x0(u_1_8_pipe), .x1(u_1_12_pipe), .y0(u_2_8), .y1(u_2_12), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_5(.x0(u_1_9_pipe), .x1(u_1_13_pipe), .y0(u_2_9), .y1(u_2_13), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_6(.x0(u_1_10_pipe), .x1(u_1_14_pipe), .y0(u_2_10), .y1(u_2_14), .ctrl(rda_ctrl_st_1));
    switch #(logDepth) rdaddr_sw_1_7(.x0(u_1_11_pipe), .x1(u_1_15_pipe), .y0(u_2_11), .y1(u_2_15), .ctrl(rda_ctrl_st_1));
    reg [logDepth-1:0] u_2_0_pipe;
    reg [logDepth-1:0] u_2_1_pipe;
    reg [logDepth-1:0] u_2_2_pipe;
    reg [logDepth-1:0] u_2_3_pipe;
    reg [logDepth-1:0] u_2_4_pipe;
    reg [logDepth-1:0] u_2_5_pipe;
    reg [logDepth-1:0] u_2_6_pipe;
    reg [logDepth-1:0] u_2_7_pipe;
    reg [logDepth-1:0] u_2_8_pipe;
    reg [logDepth-1:0] u_2_9_pipe;
    reg [logDepth-1:0] u_2_10_pipe;
    reg [logDepth-1:0] u_2_11_pipe;
    reg [logDepth-1:0] u_2_12_pipe;
    reg [logDepth-1:0] u_2_13_pipe;
    reg [logDepth-1:0] u_2_14_pipe;
    reg [logDepth-1:0] u_2_15_pipe;

    always @(posedge clk) begin
        u_2_0_pipe <= u_2_0;
        u_2_1_pipe <= u_2_1;
        u_2_2_pipe <= u_2_2;
        u_2_3_pipe <= u_2_3;
        u_2_4_pipe <= u_2_4;
        u_2_5_pipe <= u_2_5;
        u_2_6_pipe <= u_2_6;
        u_2_7_pipe <= u_2_7;
        u_2_8_pipe <= u_2_8;
        u_2_9_pipe <= u_2_9;
        u_2_10_pipe <= u_2_10;
        u_2_11_pipe <= u_2_11;
        u_2_12_pipe <= u_2_12;
        u_2_13_pipe <= u_2_13;
        u_2_14_pipe <= u_2_14;
        u_2_15_pipe <= u_2_15;
    end

    wire rda_ctrl_st_2;
    reg rda_ctrl_st_2_1;
    reg rda_ctrl_st_2_2;
    always @(posedge clk) begin
        rda_ctrl_st_2_1 <= outCount_for_rd_addr[2];

        rda_ctrl_st_2_2 <= rda_ctrl_st_2_1;
    end
    assign rda_ctrl_st_2 = rda_ctrl_st_2_2;

    switch #(logDepth) rdaddr_sw_2_0(.x0(u_2_0_pipe), .x1(u_2_2_pipe), .y0(u_3_0), .y1(u_3_2), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_1(.x0(u_2_1_pipe), .x1(u_2_3_pipe), .y0(u_3_1), .y1(u_3_3), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_2(.x0(u_2_4_pipe), .x1(u_2_6_pipe), .y0(u_3_4), .y1(u_3_6), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_3(.x0(u_2_5_pipe), .x1(u_2_7_pipe), .y0(u_3_5), .y1(u_3_7), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_4(.x0(u_2_8_pipe), .x1(u_2_10_pipe), .y0(u_3_8), .y1(u_3_10), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_5(.x0(u_2_9_pipe), .x1(u_2_11_pipe), .y0(u_3_9), .y1(u_3_11), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_6(.x0(u_2_12_pipe), .x1(u_2_14_pipe), .y0(u_3_12), .y1(u_3_14), .ctrl(rda_ctrl_st_2));
    switch #(logDepth) rdaddr_sw_2_7(.x0(u_2_13_pipe), .x1(u_2_15_pipe), .y0(u_3_13), .y1(u_3_15), .ctrl(rda_ctrl_st_2));
endmodule

module memArray512_84530(next, reset,
                x0, y0,
                inAddr0,
                outAddr0,
                x1, y1,
                inAddr1,
                outAddr1,
                x2, y2,
                inAddr2,
                outAddr2,
                x3, y3,
                inAddr3,
                outAddr3,
                x4, y4,
                inAddr4,
                outAddr4,
                x5, y5,
                inAddr5,
                outAddr5,
                x6, y6,
                inAddr6,
                outAddr6,
                x7, y7,
                inAddr7,
                outAddr7,
                x8, y8,
                inAddr8,
                outAddr8,
                x9, y9,
                inAddr9,
                outAddr9,
                x10, y10,
                inAddr10,
                outAddr10,
                x11, y11,
                inAddr11,
                outAddr11,
                x12, y12,
                inAddr12,
                outAddr12,
                x13, y13,
                inAddr13,
                outAddr13,
                x14, y14,
                inAddr14,
                outAddr14,
                x15, y15,
                inAddr15,
                outAddr15,
                clk, inFlip, outFlip);

   parameter numBanks = 16;
   parameter logBanks = 4;
   parameter depth = 32;
   parameter logDepth = 5;
   parameter width = 128;
         
   input     clk, next, reset;
   input    inFlip, outFlip;
   wire    next0;
   
   input [width-1:0]   x0;
   output [width-1:0]  y0;
   input [logDepth-1:0] inAddr0, outAddr0;
   input [width-1:0]   x1;
   output [width-1:0]  y1;
   input [logDepth-1:0] inAddr1, outAddr1;
   input [width-1:0]   x2;
   output [width-1:0]  y2;
   input [logDepth-1:0] inAddr2, outAddr2;
   input [width-1:0]   x3;
   output [width-1:0]  y3;
   input [logDepth-1:0] inAddr3, outAddr3;
   input [width-1:0]   x4;
   output [width-1:0]  y4;
   input [logDepth-1:0] inAddr4, outAddr4;
   input [width-1:0]   x5;
   output [width-1:0]  y5;
   input [logDepth-1:0] inAddr5, outAddr5;
   input [width-1:0]   x6;
   output [width-1:0]  y6;
   input [logDepth-1:0] inAddr6, outAddr6;
   input [width-1:0]   x7;
   output [width-1:0]  y7;
   input [logDepth-1:0] inAddr7, outAddr7;
   input [width-1:0]   x8;
   output [width-1:0]  y8;
   input [logDepth-1:0] inAddr8, outAddr8;
   input [width-1:0]   x9;
   output [width-1:0]  y9;
   input [logDepth-1:0] inAddr9, outAddr9;
   input [width-1:0]   x10;
   output [width-1:0]  y10;
   input [logDepth-1:0] inAddr10, outAddr10;
   input [width-1:0]   x11;
   output [width-1:0]  y11;
   input [logDepth-1:0] inAddr11, outAddr11;
   input [width-1:0]   x12;
   output [width-1:0]  y12;
   input [logDepth-1:0] inAddr12, outAddr12;
   input [width-1:0]   x13;
   output [width-1:0]  y13;
   input [logDepth-1:0] inAddr13, outAddr13;
   input [width-1:0]   x14;
   output [width-1:0]  y14;
   input [logDepth-1:0] inAddr14, outAddr14;
   input [width-1:0]   x15;
   output [width-1:0]  y15;
   input [logDepth-1:0] inAddr15, outAddr15;
   nextReg #(32, 5) nextReg_87736(.X(next), .Y(next0), .reset(reset), .clk(clk));


   memMod_dist #(depth*2, width, logDepth+1) 
     memMod0(.in(x0), .out(y0), .inAddr({inFlip, inAddr0}),
	   .outAddr({outFlip, outAddr0}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod1(.in(x1), .out(y1), .inAddr({inFlip, inAddr1}),
	   .outAddr({outFlip, outAddr1}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod2(.in(x2), .out(y2), .inAddr({inFlip, inAddr2}),
	   .outAddr({outFlip, outAddr2}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod3(.in(x3), .out(y3), .inAddr({inFlip, inAddr3}),
	   .outAddr({outFlip, outAddr3}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod4(.in(x4), .out(y4), .inAddr({inFlip, inAddr4}),
	   .outAddr({outFlip, outAddr4}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod5(.in(x5), .out(y5), .inAddr({inFlip, inAddr5}),
	   .outAddr({outFlip, outAddr5}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod6(.in(x6), .out(y6), .inAddr({inFlip, inAddr6}),
	   .outAddr({outFlip, outAddr6}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod7(.in(x7), .out(y7), .inAddr({inFlip, inAddr7}),
	   .outAddr({outFlip, outAddr7}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod8(.in(x8), .out(y8), .inAddr({inFlip, inAddr8}),
	   .outAddr({outFlip, outAddr8}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod9(.in(x9), .out(y9), .inAddr({inFlip, inAddr9}),
	   .outAddr({outFlip, outAddr9}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod10(.in(x10), .out(y10), .inAddr({inFlip, inAddr10}),
	   .outAddr({outFlip, outAddr10}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod11(.in(x11), .out(y11), .inAddr({inFlip, inAddr11}),
	   .outAddr({outFlip, outAddr11}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod12(.in(x12), .out(y12), .inAddr({inFlip, inAddr12}),
	   .outAddr({outFlip, outAddr12}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod13(.in(x13), .out(y13), .inAddr({inFlip, inAddr13}),
	   .outAddr({outFlip, outAddr13}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod14(.in(x14), .out(y14), .inAddr({inFlip, inAddr14}),
	   .outAddr({outFlip, outAddr14}), .writeSel(1'b1), .clk(clk));   
   memMod_dist #(depth*2, width, logDepth+1) 
     memMod15(.in(x15), .out(y15), .inAddr({inFlip, inAddr15}),
	   .outAddr({outFlip, outAddr15}), .writeSel(1'b1), .clk(clk));   
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule
